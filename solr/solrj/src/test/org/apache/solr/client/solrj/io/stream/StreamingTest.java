begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|ComparatorOrder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|MultipleFieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|FieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Bucket
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|CountMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MaxMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MeanMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MinMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|SumMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractZkTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  *  All base tests will be done with CloudSolrStream. Under the covers CloudSolrStream uses SolrStream so  *  SolrStream will get fully exercised through these tests.  *  **/
end_comment
begin_class
annotation|@
name|Slow
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|}
argument_list|)
DECL|class|StreamingTest
specifier|public
class|class
name|StreamingTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|SOLR_HOME
specifier|private
specifier|static
specifier|final
name|String
name|SOLR_HOME
init|=
name|getFile
argument_list|(
literal|"solrj"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solr"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|streamFactory
specifier|private
name|StreamFactory
name|streamFactory
decl_stmt|;
static|static
block|{
name|schemaString
operator|=
literal|"schema-streaming.xml"
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeSuperClass
specifier|public
specifier|static
name|void
name|beforeSuperClass
parameter_list|()
block|{
name|AbstractZkTestCase
operator|.
name|SOLRHOME
operator|=
operator|new
name|File
argument_list|(
name|SOLR_HOME
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterSuperClass
specifier|public
specifier|static
name|void
name|afterSuperClass
parameter_list|()
block|{    }
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-streaming.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|SOLR_HOME
return|;
block|}
DECL|method|SOLR_HOME
specifier|public
specifier|static
name|String
name|SOLR_HOME
parameter_list|()
block|{
return|return
name|SOLR_HOME
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// we expect this time of exception as shards go up and down...
comment|//ignoreException(".*");
comment|//System.setProperty("export.test", "true");
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
DECL|method|StreamingTest
specifier|public
name|StreamingTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|2
expr_stmt|;
name|streamFactory
operator|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"merge"
argument_list|,
name|MergeStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|RecordCountStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testUniqueStream
specifier|private
name|void
name|testUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Test CloudSolrStream and UniqueStream
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|UniqueStream
name|ustream
init|=
operator|new
name|UniqueStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|ustream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpacesInParams
specifier|private
name|void
name|testSpacesInParams
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id , a_s , a_i , a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f  asc , a_i  asc"
argument_list|)
decl_stmt|;
comment|//CloudSolrStream compares the values of the sort with the fl field.
comment|//The constructor will throw an exception if the sort fields do not the
comment|//a value in the field list.
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testNonePartitionKeys
specifier|private
name|void
name|testNonePartitionKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc,a_f asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"none"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|stream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|20
operator|)
assert|;
comment|// Each tuple will be double counted.
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelUniqueStream
specifier|private
name|void
name|testParallelUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|UniqueStream
name|ustream
init|=
operator|new
name|UniqueStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|ustream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|//Test the eofTuples
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|>
name|eofTuples
init|=
name|pstream
operator|.
name|getEofTuples
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|eofTuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//There should be an EOF tuple for each worker.
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testRankStream
specifier|private
name|void
name|testRankStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|RankStream
name|rstream
init|=
operator|new
name|RankStream
argument_list|(
name|stream
argument_list|,
literal|3
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelRankStream
specifier|private
name|void
name|testParallelRankStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|RankStream
name|rstream
init|=
operator|new
name|RankStream
argument_list|(
name|stream
argument_list|,
literal|11
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|rstream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrace
specifier|private
name|void
name|testTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
comment|//Test with spaces in the parameter lists.
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s, a_i,  a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc  ,  a_f   asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setTrace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"_COLLECTION_"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"collection1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"_COLLECTION_"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"collection1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"_COLLECTION_"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"collection1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"_COLLECTION_"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"collection1"
argument_list|)
operator|)
assert|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testReducerStream
specifier|private
name|void
name|testReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
comment|//Test with spaces in the parameter lists.
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s, a_i,  a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc  ,  a_f   asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|ReducerStream
name|rstream
init|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Tuple
name|t0
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps0
init|=
name|t0
operator|.
name|getMaps
argument_list|()
decl_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Tuple
name|t1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps1
init|=
name|t1
operator|.
name|getMaps
argument_list|()
decl_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Tuple
name|t2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps2
init|=
name|t2
operator|.
name|getMaps
argument_list|()
decl_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testZeroReducerStream
specifier|private
name|void
name|testZeroReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Gracefully handle zero results
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
comment|//Test with spaces in the parameter lists.
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"blah"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s, a_i,  a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc  ,  a_f   asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|ReducerStream
name|rstream
init|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelReducerStream
specifier|private
name|void
name|testParallelReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc,a_f asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|ReducerStream
name|rstream
init|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|rstream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Tuple
name|t0
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps0
init|=
name|t0
operator|.
name|getMaps
argument_list|()
decl_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Tuple
name|t1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps1
init|=
name|t1
operator|.
name|getMaps
argument_list|()
decl_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Tuple
name|t2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps2
init|=
name|t2
operator|.
name|getMaps
argument_list|()
decl_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|//Test Descending with Ascending subsort
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc,a_f asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|rstream
operator|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|pstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|rstream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|()
expr_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|()
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|()
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testExceptionStream
specifier|private
name|void
name|testExceptionStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
comment|//Test an error that comes originates from the /select handler
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,blah"
argument_list|,
literal|"sort"
argument_list|,
literal|"blah asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|ExceptionStream
name|estream
init|=
operator|new
name|ExceptionStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|getTuple
argument_list|(
name|estream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|t
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|t
operator|.
name|EXCEPTION
operator|)
assert|;
assert|assert
operator|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"sort param field can't be found: blah"
argument_list|)
operator|)
assert|;
comment|//Test an error that comes originates from the /export handler
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|estream
operator|=
operator|new
name|ExceptionStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|t
operator|=
name|getTuple
argument_list|(
name|estream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|t
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|t
operator|.
name|EXCEPTION
operator|)
assert|;
comment|//The /export handler will pass through a real exception.
assert|assert
operator|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"undefined field:"
argument_list|)
operator|)
assert|;
block|}
DECL|method|testParallelExceptionStream
specifier|private
name|void
name|testParallelExceptionStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,blah"
argument_list|,
literal|"sort"
argument_list|,
literal|"blah asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|stream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"blah"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ExceptionStream
name|estream
init|=
operator|new
name|ExceptionStream
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|getTuple
argument_list|(
name|estream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|t
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|t
operator|.
name|EXCEPTION
operator|)
assert|;
comment|//ParallelStream requires that partitionKeys be set.
assert|assert
operator|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"When numWorkers> 1 partitionKeys must be set."
argument_list|)
operator|)
assert|;
comment|//Test an error that originates from the /select handler
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,blah"
argument_list|,
literal|"sort"
argument_list|,
literal|"blah asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|pstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|stream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"blah"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|estream
operator|=
operator|new
name|ExceptionStream
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|t
operator|=
name|getTuple
argument_list|(
name|estream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|t
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|t
operator|.
name|EXCEPTION
operator|)
assert|;
assert|assert
operator|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"sort param field can't be found: blah"
argument_list|)
operator|)
assert|;
comment|//Test an error that originates from the /export handler
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|pstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|stream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|estream
operator|=
operator|new
name|ExceptionStream
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|t
operator|=
name|getTuple
argument_list|(
name|estream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|t
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|t
operator|.
name|EXCEPTION
operator|)
assert|;
comment|//The /export handler will pass through a real exception.
assert|assert
operator|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"undefined field:"
argument_list|)
operator|)
assert|;
block|}
DECL|method|testFacetStream
specifier|private
name|void
name|testFacetStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|SumMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|FieldComparator
index|[]
name|sorts
init|=
block|{
operator|new
name|FieldComparator
argument_list|(
literal|"sum(a_i)"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
block|}
decl_stmt|;
name|FacetStream
name|facetStream
init|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|//Reverse the Sort.
name|sorts
index|[
literal|0
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"sum(a_i)"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|facetStream
operator|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//Test index sort
name|sorts
index|[
literal|0
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|facetStream
operator|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|//Test index sort
name|sorts
index|[
literal|0
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|facetStream
operator|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testSubFacetStream
specifier|private
name|void
name|testSubFacetStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_i,a_f"
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"level1_s"
argument_list|)
block|,
operator|new
name|Bucket
argument_list|(
literal|"level2_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|FieldComparator
index|[]
name|sorts
init|=
block|{
operator|new
name|FieldComparator
argument_list|(
literal|"sum(a_i)"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
block|,
operator|new
name|FieldComparator
argument_list|(
literal|"sum(a_i)"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
block|}
decl_stmt|;
name|FacetStream
name|facetStream
init|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket1
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
decl_stmt|;
name|String
name|bucket2
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|35
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|sorts
index|[
literal|0
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"level1_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|sorts
index|[
literal|1
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"level2_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|facetStream
operator|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|35
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testRollupStream
specifier|private
name|void
name|testRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|SumMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|RollupStream
name|rollupStream
init|=
operator|new
name|RollupStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rollupStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelRollupStream
specifier|private
name|void
name|testParallelRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|SumMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|RollupStream
name|rollupStream
init|=
operator|new
name|RollupStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|ParallelStream
name|parallelStream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|rollupStream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testZeroParallelReducerStream
specifier|private
name|void
name|testZeroParallelReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"blah"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc,a_f asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|ReducerStream
name|rstream
init|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|rstream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testTuple
specifier|private
name|void
name|testTuple
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5.1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"a"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"b"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"2"
argument_list|,
literal|"f_multi"
argument_list|,
literal|"1.2"
argument_list|,
literal|"f_multi"
argument_list|,
literal|"1.3"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f,s_multi,i_multi,f_multi"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
name|long
name|l
init|=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|l
operator|==
literal|0
operator|)
assert|;
name|double
name|d
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|d
operator|==
literal|5.1
operator|)
assert|;
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|stringList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|stringList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|List
argument_list|<
name|Long
argument_list|>
name|longList
init|=
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|longList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|longValue
argument_list|()
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|longList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|longValue
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|List
argument_list|<
name|Double
argument_list|>
name|doubleList
init|=
name|tuple
operator|.
name|getDoubles
argument_list|(
literal|"f_multi"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|doubleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.2
operator|)
assert|;
assert|assert
operator|(
name|doubleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.3
operator|)
assert|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeStream
specifier|private
name|void
name|testMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
comment|//Test ascending
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|MergeStream
name|mstream
init|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Test descending
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Test compound sort
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|MultipleFieldComparator
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|MultipleFieldComparator
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelMergeStream
specifier|private
name|void
name|testParallelMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
comment|//Test ascending
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1 8 7 9)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|MergeStream
name|mstream
init|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|mstream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|9
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|//Test descending
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1 8 9)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|pstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|mstream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelEOF
specifier|private
name|void
name|testParallelEOF
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
comment|//Test ascending
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1 8 7 9)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|MergeStream
name|mstream
init|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|RecordCountStream
name|cstream
init|=
operator|new
name|RecordCountStream
argument_list|(
name|mstream
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|cstream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|9
operator|)
assert|;
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|>
name|eofTuples
init|=
name|pstream
operator|.
name|getEofTuples
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|eofTuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|// There should be an EOF Tuple for each worker.
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|it
init|=
name|eofTuples
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tuple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|totalCount
operator|+=
name|t
operator|.
name|getLong
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
name|totalCount
operator|)
assert|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|streamTests
specifier|public
name|void
name|streamTests
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|waitForThingsToLevelOut
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
literal|null
decl_stmt|;
comment|//Basic CloudSolrStream Test with Descending Sort
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
expr_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//With Ascending Sort
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Test compound sort
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|testTuple
argument_list|()
expr_stmt|;
name|testSpacesInParams
argument_list|()
expr_stmt|;
name|testNonePartitionKeys
argument_list|()
expr_stmt|;
name|testTrace
argument_list|()
expr_stmt|;
name|testUniqueStream
argument_list|()
expr_stmt|;
name|testRankStream
argument_list|()
expr_stmt|;
name|testMergeStream
argument_list|()
expr_stmt|;
name|testReducerStream
argument_list|()
expr_stmt|;
name|testRollupStream
argument_list|()
expr_stmt|;
name|testZeroReducerStream
argument_list|()
expr_stmt|;
name|testFacetStream
argument_list|()
expr_stmt|;
name|testSubFacetStream
argument_list|()
expr_stmt|;
comment|//testExceptionStream();
name|testParallelEOF
argument_list|()
expr_stmt|;
name|testParallelUniqueStream
argument_list|()
expr_stmt|;
name|testParallelRankStream
argument_list|()
expr_stmt|;
name|testParallelMergeStream
argument_list|()
expr_stmt|;
name|testParallelRollupStream
argument_list|()
expr_stmt|;
name|testParallelReducerStream
argument_list|()
expr_stmt|;
comment|//testParallelExceptionStream();
name|testZeroParallelReducerStream
argument_list|()
expr_stmt|;
block|}
DECL|method|mapParams
specifier|protected
name|Map
name|mapParams
parameter_list|(
name|String
modifier|...
name|vals
parameter_list|)
block|{
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|String
name|k
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|vals
control|)
block|{
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
name|k
operator|=
name|val
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|k
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|params
return|;
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
DECL|method|getTuple
specifier|protected
name|Tuple
name|getTuple
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|assertOrder
specifier|protected
name|boolean
name|assertOrder
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertGroupOrder
specifier|protected
name|boolean
name|assertGroupOrder
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|group
init|=
operator|(
name|List
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"tuples"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
name|t
init|=
operator|(
name|Map
operator|)
name|group
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertMaps
specifier|protected
name|boolean
name|assertMaps
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|>
name|maps
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|maps
operator|.
name|size
argument_list|()
operator|!=
name|ids
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected id count != actual map count:"
operator|+
name|ids
operator|.
name|length
operator|+
literal|":"
operator|+
name|maps
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
name|t
init|=
name|maps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertLong
specifier|public
name|boolean
name|assertLong
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|lv
init|=
operator|(
name|long
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|!=
name|l
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|l
operator|+
literal|" : "
operator|+
name|lv
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|indexr
specifier|protected
name|void
name|indexr
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
name|getDoc
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
