begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|BinaryResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|XMLResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|DirectXmlRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|LukeRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FieldStatsInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|ContentStreamUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
operator|.
name|ACTION
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|LukeResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|PivotField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|ClientUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XML
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|AnalysisParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * This should include tests against the example solr config  *   * This lets us try various SolrServer implementations with the same tests.  *   *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|SolrExampleTests
specifier|abstract
specifier|public
class|class
name|SolrExampleTests
extends|extends
name|SolrJettyTestBase
block|{
comment|/**    * query the example    */
annotation|@
name|Test
DECL|method|testExampleConfig
specifier|public
name|void
name|testExampleConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
comment|// Now add something...
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|String
name|docID
init|=
literal|"1112211111"
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|docID
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"my name!"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|doc
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|UpdateResponse
name|upres
init|=
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// System.out.println( "ADD:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|upres
operator|=
name|server
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// System.out.println( "COMMIT:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|upres
operator|=
name|server
operator|.
name|optimize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// System.out.println( "OPTIMIZE:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"id:"
operator|+
name|docID
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|docID
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now add a few docs for facet testing...
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc2
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|2
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"timestamp_dt"
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc3
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|3
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"timestamp_dt"
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc3
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc4
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|4
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"timestamp_dt"
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc4
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc5
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc5
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc5
operator|.
name|addField
argument_list|(
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc5
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|5
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc5
operator|.
name|addField
argument_list|(
literal|"timestamp_dt"
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc5
argument_list|)
expr_stmt|;
name|upres
operator|=
name|server
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
comment|// System.out.println( "ADD:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|upres
operator|=
name|server
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// System.out.println( "COMMIT:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|upres
operator|=
name|server
operator|.
name|optimize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// System.out.println( "OPTIMIZE:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetQuery
argument_list|(
literal|"price:[* TO 2]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetQuery
argument_list|(
literal|"price:[2 TO 4]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetQuery
argument_list|(
literal|"price:[5 TO *]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetField
argument_list|(
literal|"inStock"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetField
argument_list|(
literal|"price"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetField
argument_list|(
literal|"timestamp_dt"
argument_list|)
expr_stmt|;
name|query
operator|.
name|removeFilterQuery
argument_list|(
literal|"inStock:true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|response
operator|.
name|getFacetQuery
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getFacetField
argument_list|(
literal|"inStock"
argument_list|)
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|response
operator|.
name|getFacetField
argument_list|(
literal|"price"
argument_list|)
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// test a second query, test making a copy of the main query
name|SolrQuery
name|query2
init|=
name|query
operator|.
name|getCopy
argument_list|()
decl_stmt|;
name|query2
operator|.
name|addFilterQuery
argument_list|(
literal|"inStock:true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|server
operator|.
name|query
argument_list|(
name|query2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|query2
operator|.
name|getFilterQueries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|query
operator|.
name|getFilterQueries
argument_list|()
operator|==
name|query2
operator|.
name|getFilterQueries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * query the example    */
annotation|@
name|Test
DECL|method|testAddRetrieve
specifier|public
name|void
name|testAddRetrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
comment|// Now add something...
name|SolrInputDocument
name|doc1
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc1
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc1
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc1
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc2
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"h\uD866\uDF05llo"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
comment|// Add the documents
name|server
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addSortField
argument_list|(
literal|"price"
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println( rsp.getResults() );
comment|// Now do it again
name|server
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println( rsp.getResults() );
comment|// query outside ascii range
name|query
operator|.
name|setQuery
argument_list|(
literal|"name:h\uD866\uDF05llo"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**   * Get empty results   */
annotation|@
name|Test
DECL|method|testGetEmptyResults
specifier|public
name|void
name|testGetEmptyResults
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Add two docs
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Make sure we get empty docs for unknown field
name|SolrDocumentList
name|out
init|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|out
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomTestString
specifier|private
name|String
name|randomTestString
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
comment|// we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc
comment|// (considered invalid by XML)
name|int
name|size
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxLength
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|/* single byte */
name|sb
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* two bytes */
name|sb
operator|.
name|append
argument_list|(
literal|'\u0645'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* three bytes */
name|sb
operator|.
name|append
argument_list|(
literal|'\u092a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|/* four bytes */
name|sb
operator|.
name|appendCodePoint
argument_list|(
literal|0x29B05
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testUnicode
specifier|public
name|void
name|testUnicode
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// save the old parser, so we can set it back.
name|ResponseParser
name|oldParser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|instanceof
name|HttpSolrServer
condition|)
block|{
name|HttpSolrServer
name|cserver
init|=
operator|(
name|HttpSolrServer
operator|)
name|server
decl_stmt|;
name|oldParser
operator|=
name|cserver
operator|.
name|getParser
argument_list|()
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|numIterations
condition|;
name|iteration
operator|++
control|)
block|{
comment|// choose format
if|if
condition|(
name|server
operator|instanceof
name|HttpSolrServer
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
operator|(
operator|(
name|HttpSolrServer
operator|)
name|server
operator|)
operator|.
name|setParser
argument_list|(
operator|new
name|BinaryResponseParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|HttpSolrServer
operator|)
name|server
operator|)
operator|.
name|setParser
argument_list|(
operator|new
name|XMLResponseParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numDocs
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
comment|// Now add something...
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"unicode_s"
argument_list|,
name|randomTestString
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|expected
init|=
operator|(
name|String
operator|)
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"unicode_s"
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"unicode_s"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|oldParser
operator|!=
literal|null
condition|)
block|{
comment|// set the old parser back
operator|(
operator|(
name|HttpSolrServer
operator|)
name|server
operator|)
operator|.
name|setParser
argument_list|(
name|oldParser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * query the example    */
annotation|@
name|Test
DECL|method|testCommitWithinOnAdd
specifier|public
name|void
name|testCommitWithinOnAdd
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure it is empty...
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now try a timed commit...
name|SolrInputDocument
name|doc3
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id3"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc3"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|UpdateRequest
name|up
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|up
operator|.
name|add
argument_list|(
name|doc3
argument_list|)
expr_stmt|;
name|up
operator|.
name|setCommitWithin
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// a smaller commitWithin caused failures on the following assert
name|up
operator|.
name|process
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: not a great way to test this - timing is easily out
comment|// of whack due to parallel tests and various computer specs/load
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait 1 sec
comment|// now check that it comes out...
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:id3"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// wait and try again for slower/busier machines
comment|// and/or parallel test effects.
if|if
condition|(
name|cnt
operator|++
operator|==
literal|10
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// wait 2 seconds...
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:id3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now test the new convenience parameter on the add() for commitWithin
name|SolrInputDocument
name|doc4
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id4"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc4"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc4
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait 1 sec
comment|// now check that it comes out...
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:id4"
argument_list|)
argument_list|)
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// wait and try again for slower/busier machines
comment|// and/or parallel test effects.
if|if
condition|(
name|cnt
operator|++
operator|==
literal|10
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// wait 2 seconds...
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:id3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommitWithinOnDelete
specifier|public
name|void
name|testCommitWithinOnDelete
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure it is empty...
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now add one document...
name|SolrInputDocument
name|doc3
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id3"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc3"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc3
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// now check that it comes out...
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:id3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// now test commitWithin on a delete
name|UpdateRequest
name|up
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|up
operator|.
name|setCommitWithin
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|up
operator|.
name|deleteById
argument_list|(
literal|"id3"
argument_list|)
expr_stmt|;
name|up
operator|.
name|process
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// the document should still be there
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:id3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the doc has been deleted every 250 ms for 30 seconds
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
comment|// wait 250 ms
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:id3"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
do|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"commitWithin failed to commit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testErrorHandling
specifier|public
name|void
name|testErrorHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/analysis/field"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|AnalysisParams
operator|.
name|FIELD_TYPE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|AnalysisParams
operator|.
name|FIELD_VALUE
argument_list|,
literal|"ignore_exception"
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have a number format exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid Number: ignore_exception"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// The reason should get passed through
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have thrown a SolrException! not: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"??::?? ignore_exception"
argument_list|)
expr_stmt|;
comment|// query syntax error
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have a number format exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"??::?? ignore_exception"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The reason should get passed through
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have thrown a SolrException! not: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAugmentFields
specifier|public
name|void
name|testAugmentFields
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
comment|// Now add something...
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"111"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// make sure this gets in first
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"222"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
literal|"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addSortField
argument_list|(
literal|"price"
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|out
init|=
name|rsp
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|out
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocument
name|out1
init|=
name|out
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SolrDocument
name|out2
init|=
name|out
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"111"
argument_list|,
name|out1
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"222"
argument_list|,
name|out2
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|out1
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|out2
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the docid is one bigger
name|int
name|id1
init|=
operator|(
name|Integer
operator|)
name|out1
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
decl_stmt|;
name|int
name|id2
init|=
operator|(
name|Integer
operator|)
name|out2
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should be bigger ["
operator|+
name|id1
operator|+
literal|","
operator|+
name|id2
operator|+
literal|"]"
argument_list|,
name|id2
operator|>
name|id1
argument_list|)
expr_stmt|;
comment|// The score from explain should be the same as the score
name|NamedList
name|explain
init|=
operator|(
name|NamedList
operator|)
name|out1
operator|.
name|getFieldValue
argument_list|(
literal|"[explain]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|out1
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
argument_list|,
name|explain
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Augmented _value_ with alias
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|out1
operator|.
name|get
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|out1
operator|.
name|get
argument_list|(
literal|"ten"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateRequestWithParameters
specifier|public
name|void
name|testUpdateRequestWithParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server1
init|=
name|createNewSolrServer
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"server:"
operator|+
name|server1
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|server1
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|server1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id1"
argument_list|)
expr_stmt|;
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setParam
argument_list|(
literal|"overwrite"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server1
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|server1
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|server1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server1
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|out
init|=
name|rsp
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|out
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContentStreamRequest
specifier|public
name|void
name|testContentStreamRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|ContentStreamUpdateRequest
name|up
init|=
operator|new
name|ContentStreamUpdateRequest
argument_list|(
literal|"/update/csv"
argument_list|)
decl_stmt|;
name|up
operator|.
name|addFile
argument_list|(
name|getFile
argument_list|(
literal|"solrj/books.csv"
argument_list|)
argument_list|)
expr_stmt|;
name|up
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|server
operator|.
name|request
argument_list|(
name|up
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Couldn't upload books.csv"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiContentStreamRequest
specifier|public
name|void
name|testMultiContentStreamRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|ContentStreamUpdateRequest
name|up
init|=
operator|new
name|ContentStreamUpdateRequest
argument_list|(
literal|"/update"
argument_list|)
decl_stmt|;
name|up
operator|.
name|addFile
argument_list|(
name|getFile
argument_list|(
literal|"solrj/docs1.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2
name|up
operator|.
name|addFile
argument_list|(
name|getFile
argument_list|(
literal|"solrj/docs2.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3
name|up
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|server
operator|.
name|request
argument_list|(
name|up
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Couldn't upload xml files"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumFound
specifier|protected
name|void
name|assertNumFound
parameter_list|(
name|String
name|query
parameter_list|,
name|int
name|num
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|QueryResponse
name|rsp
init|=
name|getSolrServer
argument_list|()
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|!=
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"expected: "
operator|+
name|num
operator|+
literal|" but had: "
operator|+
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|+
literal|" :: "
operator|+
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddDelete
specifier|public
name|void
name|testAddDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|SolrInputDocument
index|[]
name|doc
init|=
operator|new
name|SolrInputDocument
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|doc
index|[
name|i
index|]
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
index|[
name|i
index|]
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
literal|"& 222"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
name|String
name|id
init|=
operator|(
name|String
operator|)
name|doc
index|[
literal|0
index|]
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getFirstValue
argument_list|()
decl_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make sure it got in
comment|// make sure it got in there
name|server
operator|.
name|deleteById
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got out
comment|// add it back
name|server
operator|.
name|add
argument_list|(
name|doc
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"id:\""
operator|+
name|ClientUtils
operator|.
name|escapeQueryChars
argument_list|(
name|id
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got out
comment|// Add two documents
for|for
control|(
name|SolrInputDocument
name|d
range|:
name|doc
control|)
block|{
name|server
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// make sure it got in
comment|// should be able to handle multiple delete commands in a single go
name|StringWriter
name|xml
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xml
operator|.
name|append
argument_list|(
literal|"<delete>"
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrInputDocument
name|d
range|:
name|doc
control|)
block|{
name|xml
operator|.
name|append
argument_list|(
literal|"<id>"
argument_list|)
expr_stmt|;
name|XML
operator|.
name|escapeCharData
argument_list|(
operator|(
name|String
operator|)
name|d
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getFirstValue
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|xml
operator|.
name|append
argument_list|(
literal|"</id>"
argument_list|)
expr_stmt|;
block|}
name|xml
operator|.
name|append
argument_list|(
literal|"</delete>"
argument_list|)
expr_stmt|;
name|DirectXmlRequest
name|up
init|=
operator|new
name|DirectXmlRequest
argument_list|(
literal|"/update"
argument_list|,
name|xml
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|request
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got out
block|}
annotation|@
name|Test
DECL|method|testLukeHandler
specifier|public
name|void
name|testLukeHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|SolrInputDocument
index|[]
name|doc
init|=
operator|new
name|SolrInputDocument
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doc
index|[
name|i
index|]
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
index|[
name|i
index|]
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"ID"
operator|+
name|i
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
name|doc
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|LukeRequest
name|luke
init|=
operator|new
name|LukeRequest
argument_list|()
decl_stmt|;
name|luke
operator|.
name|setShowSchema
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LukeResponse
name|rsp
init|=
name|luke
operator|.
name|process
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|rsp
operator|.
name|getFieldTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// if you don't ask for it, the schema is null
name|luke
operator|.
name|setShowSchema
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|luke
operator|.
name|process
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rsp
operator|.
name|getFieldTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStatistics
specifier|public
name|void
name|testStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|String
name|f
init|=
literal|"val_pi"
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// 0   1   2   3   4   5   6   7   8   9
name|int
index|[]
name|nums
init|=
operator|new
name|int
index|[]
block|{
literal|23
block|,
literal|26
block|,
literal|38
block|,
literal|46
block|,
literal|55
block|,
literal|63
block|,
literal|77
block|,
literal|84
block|,
literal|92
block|,
literal|94
block|}
decl_stmt|;
for|for
control|(
name|int
name|num
range|:
name|nums
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
operator|++
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"name"
argument_list|,
literal|"doc: "
operator|+
name|num
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|f
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
name|nums
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// make sure they all got in
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setGetFieldStatistics
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|FieldStatsInfo
name|stats
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23.0
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|stats
operator|.
name|getMin
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|94.0
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|stats
operator|.
name|getMax
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
name|nums
operator|.
name|length
argument_list|)
argument_list|,
name|stats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
name|stats
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"26.4"
argument_list|,
name|stats
operator|.
name|getStddev
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// now lets try again with a new set...  (odd median)
comment|//----------------------------------------------------
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|nums
operator|=
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|7
block|,
literal|10
block|,
literal|19
block|,
literal|20
block|}
expr_stmt|;
for|for
control|(
name|int
name|num
range|:
name|nums
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
operator|++
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"name"
argument_list|,
literal|"doc: "
operator|+
name|num
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|f
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
name|nums
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// make sure they all got in
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|stats
operator|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.0
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|stats
operator|.
name|getMin
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20.0
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|stats
operator|.
name|getMax
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
name|nums
operator|.
name|length
argument_list|)
argument_list|,
name|stats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
name|stats
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now try again with faceting
comment|//---------------------------------
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|nums
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|}
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|num
init|=
name|nums
index|[
name|i
index|]
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"name"
argument_list|,
literal|"doc: "
operator|+
name|num
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|f
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"inStock"
argument_list|,
name|i
operator|<
literal|5
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"inStock:true"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// make sure they all got in
name|assertNumFound
argument_list|(
literal|"inStock:false"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// make sure they all got in
comment|// facet on 'inStock'
name|query
operator|.
name|addStatsFieldFacets
argument_list|(
name|f
argument_list|,
literal|"inStock"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|stats
operator|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldStatsInfo
argument_list|>
name|facets
init|=
name|stats
operator|.
name|getFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|"inStock"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|inStockF
init|=
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FieldStatsInfo
name|inStockT
init|=
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|inStockF
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|FieldStatsInfo
name|tmp
init|=
name|inStockF
decl_stmt|;
name|inStockF
operator|=
name|inStockT
expr_stmt|;
name|inStockT
operator|=
name|tmp
expr_stmt|;
block|}
comment|// make sure half went to each
name|assertEquals
argument_list|(
name|inStockF
operator|.
name|getCount
argument_list|()
argument_list|,
name|inStockT
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|inStockF
operator|.
name|getCount
argument_list|()
operator|+
name|inStockT
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check that min max faceted ok"
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|inStockF
operator|.
name|getMin
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
operator|<
operator|(
operator|(
name|Double
operator|)
name|inStockF
operator|.
name|getMax
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"they have the same distribution"
argument_list|,
name|inStockF
operator|.
name|getStddev
argument_list|()
argument_list|,
name|inStockT
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPingHandler
specifier|public
name|void
name|testPingHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
comment|// should be ok
name|server
operator|.
name|ping
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFaceting
specifier|public
name|void
name|testFaceting
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
literal|""
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"features"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|%
literal|3
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"features"
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|%
literal|4
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"features"
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|%
literal|5
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"features"
argument_list|,
literal|"five"
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetField
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetField
argument_list|>
name|facets
init|=
name|rsp
operator|.
name|getFacetFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetField
name|ff
init|=
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|ff
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println( "111: "+ff.getValues() );
comment|// check all counts
name|assertEquals
argument_list|(
literal|"[two (5), three (3), five (2), four (2)]"
argument_list|,
name|ff
operator|.
name|getValues
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// should be the same facets with minCount=0
name|query
operator|.
name|setFilterQueries
argument_list|(
literal|"features:two"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ff
operator|=
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[two (5), four (2), five (1), three (1)]"
argument_list|,
name|ff
operator|.
name|getValues
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// with minCount> 3
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ff
operator|=
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[two (5)]"
argument_list|,
name|ff
operator|.
name|getValues
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// with minCount> 3
name|query
operator|.
name|setFacetMinCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ff
operator|=
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
comment|// System.out.println( rsp.getResults().getNumFound() + " :::: 444: "+ff.getValues() );
block|}
annotation|@
name|Test
DECL|method|testPivotFacet
specifier|public
name|void
name|testPivotFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|int
name|id
init|=
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|)
argument_list|)
expr_stmt|;
comment|// something not matching
name|server
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|addFacetPivotField
argument_list|(
literal|"features,cat"
argument_list|,
literal|"cat,features"
argument_list|,
literal|"features,cat,inStock"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|PivotField
argument_list|>
argument_list|>
name|pivots
init|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {
comment|//      System.out.println( "PIVOT: "+entry.getKey() );
comment|//      for( PivotField p : entry.getValue() ) {
comment|//        p.write(System.out, 0 );
comment|//      }
comment|//      System.out.println();
comment|//    }
comment|//  PIVOT: features,cat
comment|//  features=bbb (6)
comment|//    cat=b (4)
comment|//    cat=a (2)
comment|//  features=aaa (5)
comment|//    cat=a (3)
comment|//    cat=b (2)
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivot
init|=
name|pivots
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"features,cat"
argument_list|,
name|pivots
operator|.
name|getName
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|ff
init|=
name|pivot
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|ff
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|ff
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|ff
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|counts
init|=
name|ff
operator|.
name|getPivot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//  PIVOT: cat,features
comment|//  cat=b (6)
comment|//    features=bbb (4)
comment|//    features=aaa (2)
comment|//  cat=a (5)
comment|//    features=aaa (3)
comment|//    features=bbb (2)
name|ff
operator|=
name|pivot
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|ff
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|ff
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ff
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|=
name|ff
operator|.
name|getPivot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Three deep:
comment|//  PIVOT: features,cat,inStock
comment|//  features=bbb (6)
comment|//    cat=b (4)
comment|//      inStock=false (2)
comment|//      inStock=true (2)
comment|//    cat=a (2)
comment|//      inStock=false (1)
comment|//      inStock=true (1)
comment|//  features=aaa (5)
comment|//    cat=a (3)
comment|//      inStock=true (2)
comment|//      inStock=false (1)
comment|//    cat=b (2)
comment|//      inStock=false (1)
comment|//      inStock=true (1)
name|pivot
operator|=
name|pivots
operator|.
name|getVal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"features,cat,inStock"
argument_list|,
name|pivots
operator|.
name|getName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|p
init|=
name|pivot
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// get(1) should be features=AAAA, then get(0) should be cat=a
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|p
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|=
name|p
operator|.
name|getPivot
argument_list|()
expr_stmt|;
comment|//  p.write(System.out, 5 );
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 trues and 1 false under features=AAAA,cat=a
name|assertEquals
argument_list|(
literal|"inStock"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTestDoc
specifier|public
specifier|static
name|SolrInputDocument
name|makeTestDoc
parameter_list|(
name|Object
modifier|...
name|kvp
parameter_list|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kvp
operator|.
name|length
condition|;
control|)
block|{
name|String
name|k
init|=
operator|(
name|String
operator|)
name|kvp
index|[
name|i
operator|++
index|]
decl_stmt|;
name|Object
name|v
init|=
name|kvp
index|[
name|i
operator|++
index|]
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Test
DECL|method|testStreamingRequest
specifier|public
name|void
name|testStreamingRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
comment|// Add some docs to the index
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"cat"
argument_list|,
literal|"foocat"
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setAction
argument_list|(
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// Make sure it ran OK
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
literal|"id,score,_docid_"
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now make sure each document gets output
specifier|final
name|AtomicInteger
name|cnt
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|server
operator|.
name|queryAndStreamResponse
argument_list|(
name|query
argument_list|,
operator|new
name|StreamingResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|streamDocListInfo
parameter_list|(
name|long
name|numFound
parameter_list|,
name|long
name|start
parameter_list|,
name|Float
name|maxScore
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|streamSolrDocument
parameter_list|(
name|SolrDocument
name|doc
parameter_list|)
block|{
name|cnt
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// Make sure the transformer works for streaming
name|Float
name|score
init|=
operator|(
name|Float
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should have score"
argument_list|,
operator|new
name|Float
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cnt
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChineseDefaults
specifier|public
name|void
name|testChineseDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
comment|// Beijing medical University
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"text"
argument_list|,
literal|"åäº¬å»ç§å¤§å­¦"
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|req
operator|.
name|setAction
argument_list|(
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// Beijing university should match:
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"åäº¬å¤§å­¦"
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRealtimeGet
specifier|public
name|void
name|testRealtimeGet
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrServer
name|server
init|=
name|getSolrServer
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
comment|// Now add something...
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"DOCID"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"hello"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Since the transaction log is disabled in the example, we need to commit
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|setQueryType
argument_list|(
literal|"/get"
argument_list|)
expr_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
literal|"DOCID"
argument_list|)
expr_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
literal|"id,name,aaa:[value v=aaa]"
argument_list|)
expr_stmt|;
comment|// First Try with the BinaryResponseParser
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResponseParser
argument_list|(
operator|new
name|BinaryResponseParser
argument_list|()
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|req
operator|.
name|process
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|SolrDocument
name|out
init|=
operator|(
name|SolrDocument
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DOCID"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Then with the XMLResponseParser
name|req
operator|.
name|setResponseParser
argument_list|(
operator|new
name|XMLResponseParser
argument_list|()
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|req
operator|.
name|process
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|out
operator|=
operator|(
name|SolrDocument
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DOCID"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
