begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
package|;
end_package
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|BinaryResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|ConcurrentUpdateSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|XMLResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
operator|.
name|ACTION
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|ContentStreamUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|LukeRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FieldStatsInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|LukeResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|PivotField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|AnalysisParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|matchers
operator|.
name|StringContains
operator|.
name|containsString
import|;
end_import
begin_comment
comment|/**  * This should include tests against the example solr config  *   * This lets us try various SolrServer implementations with the same tests.  *   *  * @since solr 1.3  */
end_comment
begin_class
annotation|@
name|SuppressSSL
DECL|class|SolrExampleTests
specifier|abstract
specifier|public
class|class
name|SolrExampleTests
extends|extends
name|SolrExampleTestsBase
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrExampleTests
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|ignoreException
argument_list|(
literal|"uniqueKey"
argument_list|)
expr_stmt|;
block|}
comment|/**    * query the example    */
annotation|@
name|Test
DECL|method|testExampleConfig
specifier|public
name|void
name|testExampleConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
comment|// Now add something...
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|String
name|docID
init|=
literal|"1112211111"
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|docID
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"my name!"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|doc
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|UpdateResponse
name|upres
init|=
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// System.out.println( "ADD:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|upres
operator|=
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// System.out.println( "COMMIT:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|upres
operator|=
name|client
operator|.
name|optimize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// System.out.println( "OPTIMIZE:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"id:"
operator|+
name|docID
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|docID
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now add a few docs for facet testing...
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc2
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|2
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"timestamp_dt"
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc3
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|3
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|addField
argument_list|(
literal|"timestamp_dt"
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc3
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc4
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|4
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc4
operator|.
name|addField
argument_list|(
literal|"timestamp_dt"
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc4
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc5
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc5
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc5
operator|.
name|addField
argument_list|(
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc5
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|5
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc5
operator|.
name|addField
argument_list|(
literal|"timestamp_dt"
argument_list|,
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc5
argument_list|)
expr_stmt|;
name|upres
operator|=
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
comment|// System.out.println( "ADD:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|upres
operator|=
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// System.out.println( "COMMIT:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|upres
operator|=
name|client
operator|.
name|optimize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// System.out.println( "OPTIMIZE:"+upres.getResponse() );
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|upres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetQuery
argument_list|(
literal|"price:[* TO 2]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetQuery
argument_list|(
literal|"price:[2 TO 4]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetQuery
argument_list|(
literal|"price:[5 TO *]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetField
argument_list|(
literal|"inStock"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetField
argument_list|(
literal|"price"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetField
argument_list|(
literal|"timestamp_dt"
argument_list|)
expr_stmt|;
name|query
operator|.
name|removeFilterQuery
argument_list|(
literal|"inStock:true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|response
operator|.
name|getFacetQuery
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getFacetField
argument_list|(
literal|"inStock"
argument_list|)
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|response
operator|.
name|getFacetField
argument_list|(
literal|"price"
argument_list|)
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// test a second query, test making a copy of the main query
name|SolrQuery
name|query2
init|=
name|query
operator|.
name|getCopy
argument_list|()
decl_stmt|;
name|query2
operator|.
name|addFilterQuery
argument_list|(
literal|"inStock:true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|query2
operator|.
name|getFilterQueries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|query
operator|.
name|getFilterQueries
argument_list|()
operator|==
name|query2
operator|.
name|getFilterQueries
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check round tripping of params...
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFilterQuery
argument_list|(
literal|"{!field f=inStock}true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFilterQuery
argument_list|(
literal|"{!term f=name}hoss"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetQuery
argument_list|(
literal|"price:[* TO 2]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetQuery
argument_list|(
literal|"price:[2 TO 4]"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"echoed params are not a NamedList: "
operator|+
name|response
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|response
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
operator|instanceof
name|NamedList
argument_list|)
expr_stmt|;
name|NamedList
name|echo
init|=
operator|(
name|NamedList
operator|)
name|response
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
decl_stmt|;
name|List
name|values
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|echo
operator|.
name|get
argument_list|(
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"echoed fq is not a List: "
operator|+
name|echo
operator|.
name|get
argument_list|(
literal|"fq"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|echo
operator|.
name|get
argument_list|(
literal|"fq"
argument_list|)
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|values
operator|=
operator|(
name|List
operator|)
name|echo
operator|.
name|get
argument_list|(
literal|"fq"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{!field f=inStock}true"
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{!term f=name}hoss"
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"echoed facet.query is not a List: "
operator|+
name|echo
operator|.
name|get
argument_list|(
literal|"facet.query"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|echo
operator|.
name|get
argument_list|(
literal|"facet.query"
argument_list|)
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|values
operator|=
operator|(
name|List
operator|)
name|echo
operator|.
name|get
argument_list|(
literal|"facet.query"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"price:[* TO 2]"
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"price:[2 TO 4]"
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|jetty
operator|!=
literal|null
condition|)
block|{
comment|// check system wide system handler + "/admin/info/system"
name|String
name|url
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|adminClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/admin/info/system"
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|adminClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"lucene"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * query the example    */
annotation|@
name|Test
DECL|method|testAddRetrieve
specifier|public
name|void
name|testAddRetrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
comment|// Now add something...
name|SolrInputDocument
name|doc1
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc1
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc1
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc1
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc2
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"h\uD866\uDF05llo"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
comment|// Add the documents
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addSort
argument_list|(
operator|new
name|SolrQuery
operator|.
name|SortClause
argument_list|(
literal|"price"
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println( rsp.getResults() );
comment|// Now do it again
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println( rsp.getResults() );
comment|// query outside ascii range
name|query
operator|.
name|setQuery
argument_list|(
literal|"name:h\uD866\uDF05llo"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**   * Get empty results   */
annotation|@
name|Test
DECL|method|testGetEmptyResults
specifier|public
name|void
name|testGetEmptyResults
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Add two docs
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Make sure we get empty docs for unknown field
name|SolrDocumentList
name|out
init|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|out
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomTestString
specifier|private
name|String
name|randomTestString
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
comment|// we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc
comment|// (considered invalid by XML)
name|int
name|size
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxLength
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|/* single byte */
name|sb
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* two bytes */
name|sb
operator|.
name|append
argument_list|(
literal|'\u0645'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* three bytes */
name|sb
operator|.
name|append
argument_list|(
literal|'\u092a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|/* four bytes */
name|sb
operator|.
name|appendCodePoint
argument_list|(
literal|0x29B05
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testUnicode
specifier|public
name|void
name|testUnicode
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numIterations
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// save the old parser, so we can set it back.
name|ResponseParser
name|oldParser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|client
operator|instanceof
name|HttpSolrClient
condition|)
block|{
name|HttpSolrClient
name|httpSolrClient
init|=
operator|(
name|HttpSolrClient
operator|)
name|client
decl_stmt|;
name|oldParser
operator|=
name|httpSolrClient
operator|.
name|getParser
argument_list|()
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|numIterations
condition|;
name|iteration
operator|++
control|)
block|{
comment|// choose format
if|if
condition|(
name|client
operator|instanceof
name|HttpSolrClient
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
operator|(
operator|(
name|HttpSolrClient
operator|)
name|client
operator|)
operator|.
name|setParser
argument_list|(
operator|new
name|BinaryResponseParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|HttpSolrClient
operator|)
name|client
operator|)
operator|.
name|setParser
argument_list|(
operator|new
name|XMLResponseParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
comment|// Now add something...
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"unicode_s"
argument_list|,
name|randomTestString
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|expected
init|=
operator|(
name|String
operator|)
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"unicode_s"
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"unicode_s"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|oldParser
operator|!=
literal|null
condition|)
block|{
comment|// set the old parser back
operator|(
operator|(
name|HttpSolrClient
operator|)
name|client
operator|)
operator|.
name|setParser
argument_list|(
name|oldParser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testErrorHandling
specifier|public
name|void
name|testErrorHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/analysis/field"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|AnalysisParams
operator|.
name|FIELD_TYPE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|AnalysisParams
operator|.
name|FIELD_VALUE
argument_list|,
literal|"ignore_exception"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have a number format exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Invalid Number: ignore_exception"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have thrown a SolrException! not: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|//the df=text here is a kluge for the test to supply a default field in case there is none in schema.xml
comment|// alternatively, the resulting assertion could be modified to assert that no default field is specified.
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"{!df=text} ??::?? ignore_exception"
argument_list|)
expr_stmt|;
comment|// query syntax error
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have a number format exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"??::?? ignore_exception"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The reason should get passed through
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have thrown a SolrException! not: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"DOCID"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"DOCID2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"hello"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
name|client
operator|instanceof
name|HttpSolrClient
condition|)
block|{
try|try
block|{
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"contains multiple values for uniqueKey"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The reason should get passed through
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have thrown a SolrException! not: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|client
operator|instanceof
name|ConcurrentUpdateSolrClient
condition|)
block|{
comment|//XXX concurrentupdatesolrserver reports errors differently
name|ConcurrentUpdateSolrClient
name|concurrentClient
init|=
operator|(
name|ConcurrentUpdateSolrClient
operator|)
name|client
decl_stmt|;
name|Field
name|field
init|=
name|getConcurrentClientExceptionField
argument_list|(
name|concurrentClient
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|concurrentClient
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|concurrentClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|concurrentClient
operator|.
name|blockUntilFinished
argument_list|()
expr_stmt|;
name|Throwable
name|lastError
init|=
operator|(
name|Throwable
operator|)
name|field
operator|.
name|get
argument_list|(
name|concurrentClient
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should throw exception!"
argument_list|,
name|lastError
argument_list|)
expr_stmt|;
comment|//XXX
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring update test for client:"
operator|+
name|client
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConcurrentClientExceptionField
specifier|private
specifier|static
name|Field
name|getConcurrentClientExceptionField
parameter_list|(
name|Object
name|cs
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
block|{
name|Field
name|field
init|=
name|cs
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"lastError"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Test
DECL|method|testAugmentFields
specifier|public
name|void
name|testAugmentFields
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
comment|// Now add something...
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"111"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// make sure this gets in first
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"222"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"doc2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price"
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
literal|"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addSort
argument_list|(
operator|new
name|SolrQuery
operator|.
name|SortClause
argument_list|(
literal|"price"
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|out
init|=
name|rsp
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|out
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocument
name|out1
init|=
name|out
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SolrDocument
name|out2
init|=
name|out
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"111"
argument_list|,
name|out1
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"222"
argument_list|,
name|out2
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|out1
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|out2
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the docid is one bigger
name|int
name|id1
init|=
operator|(
name|Integer
operator|)
name|out1
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
decl_stmt|;
name|int
name|id2
init|=
operator|(
name|Integer
operator|)
name|out2
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should be bigger ["
operator|+
name|id1
operator|+
literal|","
operator|+
name|id2
operator|+
literal|"]"
argument_list|,
name|id2
operator|>
name|id1
argument_list|)
expr_stmt|;
comment|// The score from explain should be the same as the score
name|NamedList
name|explain
init|=
operator|(
name|NamedList
operator|)
name|out1
operator|.
name|getFieldValue
argument_list|(
literal|"[explain]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|out1
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
argument_list|,
name|explain
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Augmented _value_ with alias
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|out1
operator|.
name|get
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|out1
operator|.
name|get
argument_list|(
literal|"ten"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateRequestWithParameters
specifier|public
name|void
name|testUpdateRequestWithParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|createNewSolrClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id1"
argument_list|)
expr_stmt|;
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setParam
argument_list|(
literal|"overwrite"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|out
init|=
name|rsp
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|out
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|client
operator|instanceof
name|EmbeddedSolrServer
operator|)
condition|)
block|{
comment|/* Do not close in case of using EmbeddedSolrServer,        * as that would close the CoreContainer */
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContentStreamRequest
specifier|public
name|void
name|testContentStreamRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|ContentStreamUpdateRequest
name|up
init|=
operator|new
name|ContentStreamUpdateRequest
argument_list|(
literal|"/update"
argument_list|)
decl_stmt|;
name|up
operator|.
name|addFile
argument_list|(
name|getFile
argument_list|(
literal|"solrj/books.csv"
argument_list|)
argument_list|,
literal|"application/csv"
argument_list|)
expr_stmt|;
name|up
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|client
operator|.
name|request
argument_list|(
name|up
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Couldn't upload books.csv"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiContentStreamRequest
specifier|public
name|void
name|testMultiContentStreamRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|ContentStreamUpdateRequest
name|up
init|=
operator|new
name|ContentStreamUpdateRequest
argument_list|(
literal|"/update"
argument_list|)
decl_stmt|;
name|up
operator|.
name|addFile
argument_list|(
name|getFile
argument_list|(
literal|"solrj/docs1.xml"
argument_list|)
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
comment|// 2
name|up
operator|.
name|addFile
argument_list|(
name|getFile
argument_list|(
literal|"solrj/docs2.xml"
argument_list|)
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
comment|// 3
name|up
operator|.
name|setParam
argument_list|(
literal|"a"
argument_list|,
literal|"\u1234"
argument_list|)
expr_stmt|;
name|up
operator|.
name|setParam
argument_list|(
name|CommonParams
operator|.
name|HEADER_ECHO_PARAMS
argument_list|,
name|CommonParams
operator|.
name|EchoParamStyle
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|up
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|client
operator|.
name|request
argument_list|(
name|up
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\u1234"
argument_list|,
operator|(
call|(
name|NamedList
call|)
argument_list|(
operator|(
name|NamedList
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Couldn't upload xml files"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLukeHandler
specifier|public
name|void
name|testLukeHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|SolrInputDocument
index|[]
name|doc
init|=
operator|new
name|SolrInputDocument
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doc
index|[
name|i
index|]
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
index|[
name|i
index|]
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"ID"
operator|+
name|i
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
name|doc
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|LukeRequest
name|luke
init|=
operator|new
name|LukeRequest
argument_list|()
decl_stmt|;
name|luke
operator|.
name|setShowSchema
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LukeResponse
name|rsp
init|=
name|luke
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|rsp
operator|.
name|getFieldTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// if you don't ask for it, the schema is null
name|luke
operator|.
name|setShowSchema
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|luke
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rsp
operator|.
name|getFieldTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStatistics
specifier|public
name|void
name|testStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|String
name|f
init|=
literal|"val_i"
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// 0   1   2   3   4   5   6   7   8   9
name|int
index|[]
name|nums
init|=
operator|new
name|int
index|[]
block|{
literal|23
block|,
literal|26
block|,
literal|38
block|,
literal|46
block|,
literal|55
block|,
literal|63
block|,
literal|77
block|,
literal|84
block|,
literal|92
block|,
literal|94
block|}
decl_stmt|;
for|for
control|(
name|int
name|num
range|:
name|nums
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
operator|++
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"name"
argument_list|,
literal|"doc: "
operator|+
name|num
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|f
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
name|nums
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// make sure they all got in
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setGetFieldStatistics
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|FieldStatsInfo
name|stats
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23.0
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|stats
operator|.
name|getMin
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|94.0
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|stats
operator|.
name|getMax
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
name|nums
operator|.
name|length
argument_list|)
argument_list|,
name|stats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
name|stats
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"26.4"
argument_list|,
name|stats
operator|.
name|getStddev
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// now lets try again with a new set...  (odd median)
comment|//----------------------------------------------------
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|nums
operator|=
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|7
block|,
literal|10
block|,
literal|19
block|,
literal|20
block|}
expr_stmt|;
for|for
control|(
name|int
name|num
range|:
name|nums
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
operator|++
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"name"
argument_list|,
literal|"doc: "
operator|+
name|num
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|f
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
name|nums
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// make sure they all got in
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|stats
operator|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.0
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|stats
operator|.
name|getMin
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20.0
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|stats
operator|.
name|getMax
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
name|nums
operator|.
name|length
argument_list|)
argument_list|,
name|stats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
name|stats
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now try again with faceting
comment|//---------------------------------
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|nums
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|}
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|num
init|=
name|nums
index|[
name|i
index|]
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"name"
argument_list|,
literal|"doc: "
operator|+
name|num
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|f
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"inStock"
argument_list|,
name|i
operator|<
literal|5
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"inStock:true"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// make sure they all got in
name|assertNumFound
argument_list|(
literal|"inStock:false"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// make sure they all got in
comment|// facet on 'inStock'
name|query
operator|.
name|addStatsFieldFacets
argument_list|(
name|f
argument_list|,
literal|"inStock"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|stats
operator|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldStatsInfo
argument_list|>
name|facets
init|=
name|stats
operator|.
name|getFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|"inStock"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|facets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|inStockF
init|=
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FieldStatsInfo
name|inStockT
init|=
name|facets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|inStockF
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|FieldStatsInfo
name|tmp
init|=
name|inStockF
decl_stmt|;
name|inStockF
operator|=
name|inStockT
expr_stmt|;
name|inStockT
operator|=
name|tmp
expr_stmt|;
block|}
comment|// make sure half went to each
name|assertEquals
argument_list|(
name|inStockF
operator|.
name|getCount
argument_list|()
argument_list|,
name|inStockT
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|inStockF
operator|.
name|getCount
argument_list|()
operator|+
name|inStockT
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check that min max faceted ok"
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|inStockF
operator|.
name|getMin
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
operator|<
operator|(
operator|(
name|Double
operator|)
name|inStockF
operator|.
name|getMax
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"they have the same distribution"
argument_list|,
name|inStockF
operator|.
name|getStddev
argument_list|()
argument_list|,
name|inStockT
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPingHandler
specifier|public
name|void
name|testPingHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
comment|// should be ok
name|client
operator|.
name|ping
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFaceting
specifier|public
name|void
name|testFaceting
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
literal|""
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"features"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|%
literal|3
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"features"
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|%
literal|4
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"features"
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|%
literal|5
operator|)
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"features"
argument_list|,
literal|"five"
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetField
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetField
argument_list|>
name|facets
init|=
name|rsp
operator|.
name|getFacetFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetField
name|ff
init|=
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|ff
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println( "111: "+ff.getValues() );
comment|// check all counts
name|assertEquals
argument_list|(
literal|"[two (5), three (3), five (2), four (2)]"
argument_list|,
name|ff
operator|.
name|getValues
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// should be the same facets with minCount=0
name|query
operator|.
name|setFilterQueries
argument_list|(
literal|"features:two"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ff
operator|=
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[two (5), four (2), five (1), three (1)]"
argument_list|,
name|ff
operator|.
name|getValues
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// with minCount> 3
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ff
operator|=
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[two (5)]"
argument_list|,
name|ff
operator|.
name|getValues
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// with minCount> 3
name|query
operator|.
name|setFacetMinCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ff
operator|=
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
comment|// System.out.println( rsp.getResults().getNumFound() + " :::: 444: "+ff.getValues() );
block|}
annotation|@
name|Test
DECL|method|testPivotFacets
specifier|public
name|void
name|testPivotFacets
parameter_list|()
throws|throws
name|Exception
block|{
name|doPivotFacetTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPivotFacetsStats
specifier|public
name|void
name|testPivotFacetsStats
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|int
name|id
init|=
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"manu"
argument_list|,
literal|"apple"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|"popularity"
argument_list|,
literal|12
argument_list|,
literal|"price"
argument_list|,
literal|.017
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"manu"
argument_list|,
literal|"lg"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|"popularity"
argument_list|,
literal|13
argument_list|,
literal|"price"
argument_list|,
literal|16.04
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"manu"
argument_list|,
literal|"samsung"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|"popularity"
argument_list|,
literal|14
argument_list|,
literal|"price"
argument_list|,
literal|12.34
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"manu"
argument_list|,
literal|"lg"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|"popularity"
argument_list|,
literal|24
argument_list|,
literal|"price"
argument_list|,
literal|51.39
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"manu"
argument_list|,
literal|"nokia"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|"popularity"
argument_list|,
literal|28
argument_list|,
literal|"price"
argument_list|,
literal|131.39
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"manu"
argument_list|,
literal|"ztc"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|"popularity"
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"manu"
argument_list|,
literal|"htc"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|"popularity"
argument_list|,
literal|31
argument_list|,
literal|"price"
argument_list|,
literal|131.39
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"manu"
argument_list|,
literal|"apple"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|"popularity"
argument_list|,
literal|36
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"manu"
argument_list|,
literal|"lg"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|"popularity"
argument_list|,
literal|37
argument_list|,
literal|"price"
argument_list|,
literal|1.39
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"manu"
argument_list|,
literal|"ztc"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|,
literal|"popularity"
argument_list|,
literal|38
argument_list|,
literal|"price"
argument_list|,
literal|47.98
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"manu"
argument_list|,
literal|"ztc"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|"popularity"
argument_list|,
operator|-
literal|38
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// something not matching all fields
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|pivot
range|:
operator|new
name|String
index|[]
block|{
literal|"{!key=pivot_key stats=s1}features,manu"
block|,
literal|"{!key=pivot_key stats=s1}features,manu,cat"
block|,
literal|"{!key=pivot_key stats=s1}features,manu,cat,inStock"
block|}
control|)
block|{
comment|// for any of these pivot params, the assertions we check should be teh same
comment|// (we stop asserting at the "manu" level)
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|addFacetPivotField
argument_list|(
name|pivot
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|query
operator|.
name|addGetFieldStatistics
argument_list|(
literal|"{!key=foo_price tag=s1}price"
argument_list|,
literal|"{!tag=s1}popularity"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// check top (ie: non-pivot) stats
name|Map
argument_list|<
name|String
argument_list|,
name|FieldStatsInfo
argument_list|>
name|map
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
decl_stmt|;
name|FieldStatsInfo
name|intValueStatsInfo
init|=
name|map
operator|.
name|get
argument_list|(
literal|"popularity"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|38.0d
argument_list|,
name|intValueStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38.0d
argument_list|,
name|intValueStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11l
argument_list|,
name|intValueStatsInfo
operator|.
name|getCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|intValueStatsInfo
operator|.
name|getMissing
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|227.0d
argument_list|,
name|intValueStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20.636363636363637d
argument_list|,
name|intValueStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|doubleValueStatsInfo
init|=
name|map
operator|.
name|get
argument_list|(
literal|"foo_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|.017d
argument_list|,
operator|(
name|double
operator|)
name|doubleValueStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|131.39d
argument_list|,
operator|(
name|double
operator|)
name|doubleValueStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8l
argument_list|,
name|doubleValueStatsInfo
operator|.
name|getCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4l
argument_list|,
name|doubleValueStatsInfo
operator|.
name|getMissing
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|391.93d
argument_list|,
operator|(
name|double
operator|)
name|doubleValueStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|48.99d
argument_list|,
operator|(
name|double
operator|)
name|doubleValueStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
comment|// now get deeper and look at the pivots...
name|NamedList
argument_list|<
name|List
argument_list|<
name|PivotField
argument_list|>
argument_list|>
name|pivots
init|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|pivots
operator|.
name|get
argument_list|(
literal|"pivot_key"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|list
init|=
name|pivots
operator|.
name|get
argument_list|(
literal|"pivot_key"
argument_list|)
decl_stmt|;
name|PivotField
name|featuresBBBPivot
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|featuresBBBPivot
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|featuresBBBPivot
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|featuresBBBPivot
operator|.
name|getFieldStatsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|featuresBBBPivot
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|featuresBBBPivotStats1
init|=
name|featuresBBBPivot
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo_price"
argument_list|,
name|featuresBBBPivotStats1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|131.39d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBPivotStats1
operator|.
name|getMax
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.38d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBPivotStats1
operator|.
name|getMin
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|180.75d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBPivotStats1
operator|.
name|getSum
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|long
operator|)
name|featuresBBBPivotStats1
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|long
operator|)
name|featuresBBBPivotStats1
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60.25d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBPivotStats1
operator|.
name|getMean
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|65.86d
argument_list|,
name|featuresBBBPivotStats1
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19567.34d
argument_list|,
name|featuresBBBPivotStats1
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|featuresBBBPivotStats2
init|=
name|featuresBBBPivot
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"popularity"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"popularity"
argument_list|,
name|featuresBBBPivotStats2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38.0d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBPivotStats2
operator|.
name|getMax
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|38.0d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBPivotStats2
operator|.
name|getMin
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|136.0d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBPivotStats2
operator|.
name|getSum
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
operator|(
name|long
operator|)
name|featuresBBBPivotStats2
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|featuresBBBPivotStats2
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22.66d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBPivotStats2
operator|.
name|getMean
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29.85d
argument_list|,
name|featuresBBBPivotStats2
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7538.0d
argument_list|,
name|featuresBBBPivotStats2
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|nestedPivotList
init|=
name|featuresBBBPivot
operator|.
name|getPivot
argument_list|()
decl_stmt|;
name|PivotField
name|featuresBBBPivotPivot
init|=
name|nestedPivotList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"manu"
argument_list|,
name|featuresBBBPivotPivot
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ztc"
argument_list|,
name|featuresBBBPivotPivot
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|featuresBBBPivotPivot
operator|.
name|getFieldStatsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|featuresBBBPivotPivot
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|featuresBBBManuZtcPivotStats1
init|=
name|featuresBBBPivotPivot
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo_price"
argument_list|,
name|featuresBBBManuZtcPivotStats1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|47.97d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBManuZtcPivotStats1
operator|.
name|getMax
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|47.97d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBManuZtcPivotStats1
operator|.
name|getMin
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|47.97d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBManuZtcPivotStats1
operator|.
name|getSum
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|long
operator|)
name|featuresBBBManuZtcPivotStats1
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|long
operator|)
name|featuresBBBManuZtcPivotStats1
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|47.97d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBManuZtcPivotStats1
operator|.
name|getMean
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0d
argument_list|,
name|featuresBBBManuZtcPivotStats1
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2302.08d
argument_list|,
name|featuresBBBManuZtcPivotStats1
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|featuresBBBManuZtcPivotStats2
init|=
name|featuresBBBPivotPivot
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"popularity"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"popularity"
argument_list|,
name|featuresBBBManuZtcPivotStats2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38.0d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBManuZtcPivotStats2
operator|.
name|getMax
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|38.0d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBManuZtcPivotStats2
operator|.
name|getMin
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32.0
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBManuZtcPivotStats2
operator|.
name|getSum
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|long
operator|)
name|featuresBBBManuZtcPivotStats2
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|featuresBBBManuZtcPivotStats2
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.66d
argument_list|,
operator|(
name|double
operator|)
name|featuresBBBManuZtcPivotStats2
operator|.
name|getMean
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42.25d
argument_list|,
name|featuresBBBManuZtcPivotStats2
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3912.0d
argument_list|,
name|featuresBBBManuZtcPivotStats2
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|.01d
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPivotFacetsStatsNotSupported
specifier|public
name|void
name|testPivotFacetsStatsNotSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
comment|// results of this test should be the same regardless of whether any docs in index
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|client
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|,
literal|"popularity"
argument_list|,
literal|12
argument_list|,
literal|"price"
argument_list|,
literal|.017
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|ignoreException
argument_list|(
literal|"is not currently supported"
argument_list|)
expr_stmt|;
comment|// boolean field
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|addFacetPivotField
argument_list|(
literal|"{!stats=s1}features,manu"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addGetFieldStatistics
argument_list|(
literal|"{!key=inStock_val tag=s1}inStock"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SolrException should be thrown on query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Pivot facet on boolean is not currently supported, bad request returned"
argument_list|,
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is not currently supported"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// asking for multiple stat tags -- see SOLR-6663
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetPivotField
argument_list|(
literal|"{!stats=tag1,tag2}features,manu"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addGetFieldStatistics
argument_list|(
literal|"{!tag=tag1}price"
argument_list|,
literal|"{!tag=tag2}popularity"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SolrException should be thrown on query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"stats"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"comma"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"tag"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// text field
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetPivotField
argument_list|(
literal|"{!stats=s1}features,manu"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addGetFieldStatistics
argument_list|(
literal|"{!tag=s1}features"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SolrException should be thrown on query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Pivot facet on string is not currently supported, bad request returned"
argument_list|,
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is not currently supported"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"text_general"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPivotFacetsMissing
specifier|public
name|void
name|testPivotFacetsMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|doPivotFacetTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|doPivotFacetTest
specifier|private
name|void
name|doPivotFacetTest
parameter_list|(
name|boolean
name|missing
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
name|int
name|id
init|=
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"aaa"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"a"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"features"
argument_list|,
literal|"bbb"
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|,
literal|"inStock"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|makeTestDoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"cat"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// something not matching all fields
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|addFacetPivotField
argument_list|(
literal|"features,cat"
argument_list|,
literal|"cat,features"
argument_list|,
literal|"features,cat,inStock"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFacetMissing
argument_list|(
name|missing
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|PivotField
argument_list|>
argument_list|>
name|pivots
init|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {
comment|//      System.out.println( "PIVOT: "+entry.getKey() );
comment|//      for( PivotField p : entry.getValue() ) {
comment|//        p.write(System.out, 0 );
comment|//      }
comment|//      System.out.println();
comment|//    }
comment|//  PIVOT: features,cat
comment|//  features=bbb (6)
comment|//    cat=b (4)
comment|//    cat=a (2)
comment|//  features=aaa (5)
comment|//    cat=a (3)
comment|//    cat=b (2)
comment|//  features missing (1)
comment|//    cat=b (1)
name|assertEquals
argument_list|(
literal|"features,cat"
argument_list|,
name|pivots
operator|.
name|getName
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivot
init|=
name|pivots
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|missing
condition|?
literal|3
else|:
literal|2
argument_list|,
name|pivot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|ff
init|=
name|pivot
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|ff
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|ff
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|ff
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|counts
init|=
name|ff
operator|.
name|getPivot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|ff
operator|=
name|pivot
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|ff
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|ff
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ff
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|=
name|ff
operator|.
name|getPivot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|missing
condition|)
block|{
name|ff
operator|=
name|pivot
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|ff
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ff
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ff
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|=
name|ff
operator|.
name|getPivot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//  PIVOT: cat,features
comment|//  cat=b (7)
comment|//    features=bbb (4)
comment|//    features=aaa (2)
comment|//    features missing (1)
comment|//  cat=a (5)
comment|//    features=aaa (3)
comment|//    features=bbb (2)
name|assertEquals
argument_list|(
literal|"cat,features"
argument_list|,
name|pivots
operator|.
name|getName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|pivot
operator|=
name|pivots
operator|.
name|getVal
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ff
operator|=
name|pivot
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|ff
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|ff
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ff
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|=
name|ff
operator|.
name|getPivot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|missing
condition|?
literal|3
else|:
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|missing
condition|)
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ff
operator|=
name|pivot
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|ff
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|ff
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ff
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|=
name|ff
operator|.
name|getPivot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Three deep:
comment|//  PIVOT: features,cat,inStock
comment|//  features=bbb (6)
comment|//    cat=b (4)
comment|//      inStock=false (2)
comment|//      inStock=true (2)
comment|//    cat=a (2)
comment|//      inStock=false (1)
comment|//      inStock=true (1)
comment|//  features=aaa (5)
comment|//    cat=a (3)
comment|//      inStock=true (2)
comment|//      inStock=false (1)
comment|//    cat=b (2)
comment|//      inStock=false (1)
comment|//      inStock=true (1)
comment|//  features missing (1)
comment|//    cat=b (1)
comment|//      inStock missing (1)
name|assertEquals
argument_list|(
literal|"features,cat,inStock"
argument_list|,
name|pivots
operator|.
name|getName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|pivot
operator|=
name|pivots
operator|.
name|getVal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|missing
condition|?
literal|3
else|:
literal|2
argument_list|,
name|pivot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|p
init|=
name|pivot
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// get(1) should be features=AAAA, then get(0) should be cat=a
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|p
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|=
name|p
operator|.
name|getPivot
argument_list|()
expr_stmt|;
comment|//  p.write(System.out, 5 );
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 trues and 1 false under features=AAAA,cat=a
name|assertEquals
argument_list|(
literal|"inStock"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|missing
condition|)
block|{
name|p
operator|=
name|pivot
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|p
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|p
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inStock"
argument_list|,
name|p
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|p
operator|.
name|getPivot
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// -- SOLR-2255 Test excluding a filter Query --
comment|// this test is a slight modification to the first pivot facet test
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFacetPivotField
argument_list|(
literal|"{!ex=mytag key=mykey}features,cat"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFilterQuery
argument_list|(
literal|"{!tag=mytag}-(features:bbb AND cat:a AND inStock:true)"
argument_list|)
expr_stmt|;
comment|//filters out one
name|query
operator|.
name|setFacetMinCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//one less due to filter
comment|//The rest of this test should be just like the original since we've
comment|// excluded the 'fq' from the facet count
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
expr_stmt|;
name|pivot
operator|=
name|pivots
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mykey"
argument_list|,
name|pivots
operator|.
name|getName
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ff
operator|=
name|pivot
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"features"
argument_list|,
name|ff
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|ff
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|ff
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|counts
operator|=
name|ff
operator|.
name|getPivot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cat"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTestDoc
specifier|public
specifier|static
name|SolrInputDocument
name|makeTestDoc
parameter_list|(
name|Object
modifier|...
name|kvp
parameter_list|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kvp
operator|.
name|length
condition|;
control|)
block|{
name|String
name|k
init|=
operator|(
name|String
operator|)
name|kvp
index|[
name|i
operator|++
index|]
decl_stmt|;
name|Object
name|v
init|=
name|kvp
index|[
name|i
operator|++
index|]
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Test
DECL|method|testChineseDefaults
specifier|public
name|void
name|testChineseDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNumFound
argument_list|(
literal|"*:*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it got in
comment|// Beijing medical University
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"text"
argument_list|,
literal|"åäº¬å»ç§å¤§å­¦"
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|req
operator|.
name|setAction
argument_list|(
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// Beijing university should match:
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"åäº¬å¤§å­¦"
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRealtimeGet
specifier|public
name|void
name|testRealtimeGet
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Empty the database...
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete everything!
comment|// Now add something...
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"DOCID"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"hello"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Since the transaction log is disabled in the example, we need to commit
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|setRequestHandler
argument_list|(
literal|"/get"
argument_list|)
expr_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
literal|"DOCID"
argument_list|)
expr_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
literal|"id,name,aaa:[value v=aaa]"
argument_list|)
expr_stmt|;
comment|// First Try with the BinaryResponseParser
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResponseParser
argument_list|(
operator|new
name|BinaryResponseParser
argument_list|()
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|req
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|SolrDocument
name|out
init|=
operator|(
name|SolrDocument
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DOCID"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Then with the XMLResponseParser
name|req
operator|.
name|setResponseParser
argument_list|(
operator|new
name|XMLResponseParser
argument_list|()
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|req
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|out
operator|=
operator|(
name|SolrDocument
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DOCID"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|out
operator|.
name|get
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateField
specifier|public
name|void
name|testUpdateField
parameter_list|()
throws|throws
name|Exception
block|{
comment|//no versions
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"unique"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"gadget"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price_f"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFields
argument_list|(
literal|"id"
argument_list|,
literal|"price_f"
argument_list|,
literal|"name"
argument_list|,
literal|"_version_"
argument_list|)
expr_stmt|;
name|QueryResponse
name|resp
init|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Doc count does not match"
argument_list|,
literal|1
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|version
init|=
operator|(
name|Long
operator|)
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstValue
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no version returned"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstValue
argument_list|(
literal|"price_f"
argument_list|)
argument_list|)
expr_stmt|;
comment|//update "price" with incorrect version (optimistic locking)
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|oper
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//need better api for this???
name|oper
operator|.
name|put
argument_list|(
literal|"set"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"unique"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"_version_"
argument_list|,
name|version
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price_f"
argument_list|,
name|oper
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|client
operator|instanceof
name|HttpSolrClient
condition|)
block|{
comment|//XXX concurrent client reports exceptions differently
name|fail
argument_list|(
literal|"Operation should throw an exception!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//just to be sure the client has sent the doc
name|assertTrue
argument_list|(
literal|"ConcurrentUpdateSolrClient did not report an error"
argument_list|,
operator|(
operator|(
name|Throwable
operator|)
name|getConcurrentClientExceptionField
argument_list|(
name|client
argument_list|)
operator|.
name|get
argument_list|(
name|client
argument_list|)
operator|)
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Conflict"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrException
name|se
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"No identifiable error message"
argument_list|,
name|se
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"version conflict for unique"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//update "price", use correct version (optimistic locking)
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"unique"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"_version_"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price_f"
argument_list|,
name|oper
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|resp
operator|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Doc count does not match"
argument_list|,
literal|1
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"price was not updated?"
argument_list|,
literal|100.0f
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstValue
argument_list|(
literal|"price_f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no name?"
argument_list|,
literal|"gadget"
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
comment|//update "price", no version
name|oper
operator|.
name|put
argument_list|(
literal|"set"
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"unique"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"price_f"
argument_list|,
name|oper
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|resp
operator|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Doc count does not match"
argument_list|,
literal|1
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"price was not updated?"
argument_list|,
literal|200.0f
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstValue
argument_list|(
literal|"price_f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no name?"
argument_list|,
literal|"gadget"
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateMultiValuedField
specifier|public
name|void
name|testUpdateMultiValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|solrClient
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|solrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:123"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to add doc to cloud server"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|operation
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|operation
operator|.
name|put
argument_list|(
literal|"set"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"first"
argument_list|,
literal|"second"
argument_list|,
literal|"third"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"multi_ss"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|solrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Multi-valued field did not return a collection"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"multi_ss"
argument_list|)
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"multi_ss"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Field values was not updated with all values via atomic update"
argument_list|,
literal|3
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|operation
operator|.
name|clear
argument_list|()
expr_stmt|;
name|operation
operator|.
name|put
argument_list|(
literal|"add"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fourth"
argument_list|,
literal|"fifth"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|removeField
argument_list|(
literal|"multi_ss"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"multi_ss"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|solrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:123"
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"multi_ss"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Field values was not updated with all values via atomic update"
argument_list|,
literal|5
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetNullUpdates
specifier|public
name|void
name|testSetNullUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|solrClient
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"testSetNullUpdates"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"single_s"
argument_list|,
literal|"test-value"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"multi_ss"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"first"
argument_list|,
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|removeField
argument_list|(
literal|"single_s"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|removeField
argument_list|(
literal|"multi_ss"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"set"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"multi_ss"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|solrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testSetNullUpdates"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Entire doc was replaced because null update was not written"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"single_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Null update failed. Value still exists in document"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"multi_ss"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetNullUpdateOrder
specifier|public
name|void
name|testSetNullUpdateOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|solrClient
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"testSetNullUpdateOrder"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"single_s"
argument_list|,
literal|"test-value"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"multi_ss"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"first"
argument_list|,
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"set"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"multi_ss"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"testSetNullUpdateOrder"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"single_s"
argument_list|,
literal|"test-value2"
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|QueryResponse
name|response
init|=
name|solrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testSetNullUpdateOrder"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Field included after set null=true not updated via atomic update"
argument_list|,
literal|"test-value2"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"single_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryWithParams
specifier|public
name|void
name|testQueryWithParams
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"debug"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryResponse
name|resp
init|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"server didn't respond with debug=true, didn't we pass in the parameter?"
argument_list|,
literal|"true"
argument_list|,
operator|(
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"debug"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildDoctransformer
specifier|public
name|void
name|testChildDoctransformer
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|int
name|numRootDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|maxDepth
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SolrInputDocument
argument_list|>
name|allDocs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRootDocs
condition|;
name|i
operator|++
control|)
block|{
name|client
operator|.
name|add
argument_list|(
name|genNestedDocuments
argument_list|(
name|allDocs
argument_list|,
literal|0
argument_list|,
name|maxDepth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// sanity check
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|QueryResponse
name|resp
init|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Doc count does not match"
argument_list|,
name|allDocs
operator|.
name|size
argument_list|()
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// base check - we know there is an exact number of these root docs
name|q
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"level_i:0"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFields
argument_list|(
literal|"*"
argument_list|,
literal|"[child parentFilter=\"level_i:0\"]"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topLevel count does not match"
argument_list|,
name|numRootDocs
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrDocument
name|outDoc
range|:
name|resp
operator|.
name|getResults
argument_list|()
control|)
block|{
name|String
name|docId
init|=
operator|(
name|String
operator|)
name|outDoc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|origDoc
init|=
name|allDocs
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"docId not found: "
operator|+
name|docId
argument_list|,
name|origDoc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kids mismatch"
argument_list|,
name|origDoc
operator|.
name|hasChildDocuments
argument_list|()
argument_list|,
name|outDoc
operator|.
name|hasChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outDoc
operator|.
name|hasChildDocuments
argument_list|()
condition|)
block|{
for|for
control|(
name|SolrDocument
name|kid
range|:
name|outDoc
operator|.
name|getChildDocuments
argument_list|()
control|)
block|{
name|String
name|kidId
init|=
operator|(
name|String
operator|)
name|kid
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|origChild
init|=
name|findDecendent
argument_list|(
name|origDoc
argument_list|,
name|kidId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docId
operator|+
literal|" doesn't have decendent "
operator|+
name|kidId
argument_list|,
name|origChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// simple check: direct verification of direct children on random docs
block|{
name|int
name|parentLevel
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxDepth
argument_list|)
decl_stmt|;
name|int
name|kidLevel
init|=
name|parentLevel
operator|+
literal|1
decl_stmt|;
name|String
name|parentFilter
init|=
literal|"level_i:"
operator|+
name|parentLevel
decl_stmt|;
name|String
name|childFilter
init|=
literal|"level_i:"
operator|+
name|kidLevel
decl_stmt|;
name|int
name|maxKidCount
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|37
argument_list|)
decl_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFilterQueries
argument_list|(
name|parentFilter
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFields
argument_list|(
literal|"id,[child parentFilter=\""
operator|+
name|parentFilter
operator|+
literal|"\" childFilter=\""
operator|+
name|childFilter
operator|+
literal|"\" limit=\""
operator|+
name|maxKidCount
operator|+
literal|"\"]"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrDocument
name|outDoc
range|:
name|resp
operator|.
name|getResults
argument_list|()
control|)
block|{
name|String
name|docId
init|=
operator|(
name|String
operator|)
name|outDoc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|origDoc
init|=
name|allDocs
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"docId not found: "
operator|+
name|docId
argument_list|,
name|origDoc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kids mismatch"
argument_list|,
name|origDoc
operator|.
name|hasChildDocuments
argument_list|()
argument_list|,
name|outDoc
operator|.
name|hasChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outDoc
operator|.
name|hasChildDocuments
argument_list|()
condition|)
block|{
comment|// since we know we are looking at our direct children
comment|// we can verify the count
name|int
name|numOrigKids
init|=
name|origDoc
operator|.
name|getChildDocuments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numOutKids
init|=
name|outDoc
operator|.
name|getChildDocuments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Num kids mismatch: "
operator|+
name|numOrigKids
operator|+
literal|"/"
operator|+
name|maxKidCount
argument_list|,
operator|(
name|maxKidCount
operator|<
name|numOrigKids
condition|?
name|maxKidCount
else|:
name|numOrigKids
operator|)
argument_list|,
name|numOutKids
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrDocument
name|kid
range|:
name|outDoc
operator|.
name|getChildDocuments
argument_list|()
control|)
block|{
name|String
name|kidId
init|=
operator|(
name|String
operator|)
name|kid
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"kid is the wrong level"
argument_list|,
name|kidLevel
argument_list|,
operator|(
name|int
operator|)
name|kid
operator|.
name|getFieldValue
argument_list|(
literal|"level_i"
argument_list|)
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|origChild
init|=
name|findDecendent
argument_list|(
name|origDoc
argument_list|,
name|kidId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docId
operator|+
literal|" doesn't have decendent "
operator|+
name|kidId
argument_list|,
name|origChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// fully randomized
comment|// verifications are driven only by the results
block|{
name|int
name|parentLevel
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|kidLevelMin
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|parentLevel
operator|+
literal|1
argument_list|,
name|maxDepth
argument_list|)
decl_stmt|;
name|int
name|kidLevelMax
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|kidLevelMin
argument_list|,
name|maxDepth
argument_list|)
decl_stmt|;
name|String
name|parentFilter
init|=
literal|"level_i:"
operator|+
name|parentLevel
decl_stmt|;
name|String
name|childFilter
init|=
literal|"level_i:["
operator|+
name|kidLevelMin
operator|+
literal|" TO "
operator|+
name|kidLevelMax
operator|+
literal|"]"
decl_stmt|;
name|int
name|maxKidCount
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|names
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|names
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"name:"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|q
operator|.
name|setFilterQueries
argument_list|(
name|parentFilter
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFields
argument_list|(
literal|"id,[child parentFilter=\""
operator|+
name|parentFilter
operator|+
literal|"\" childFilter=\""
operator|+
name|childFilter
operator|+
literal|"\" limit=\""
operator|+
name|maxKidCount
operator|+
literal|"\"]"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrDocument
name|outDoc
range|:
name|resp
operator|.
name|getResults
argument_list|()
control|)
block|{
name|String
name|docId
init|=
operator|(
name|String
operator|)
name|outDoc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|origDoc
init|=
name|allDocs
operator|.
name|get
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"docId not found: "
operator|+
name|docId
argument_list|,
name|origDoc
argument_list|)
expr_stmt|;
comment|// we can't always assert origHasKids==outHasKids, original kids
comment|// might not go deep enough for childFilter...
if|if
condition|(
name|outDoc
operator|.
name|hasChildDocuments
argument_list|()
condition|)
block|{
comment|// ...however if there are out kids, there *have* to be orig kids
name|assertTrue
argument_list|(
literal|"orig doc had no kids at all"
argument_list|,
name|origDoc
operator|.
name|hasChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrDocument
name|kid
range|:
name|outDoc
operator|.
name|getChildDocuments
argument_list|()
control|)
block|{
name|String
name|kidId
init|=
operator|(
name|String
operator|)
name|kid
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|int
name|kidLevel
init|=
operator|(
name|int
operator|)
name|kid
operator|.
name|getFieldValue
argument_list|(
literal|"level_i"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"kid level to high: "
operator|+
name|kidLevelMax
operator|+
literal|"<"
operator|+
name|kidLevel
argument_list|,
name|kidLevel
operator|<=
name|kidLevelMax
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"kid level to low: "
operator|+
name|kidLevelMin
operator|+
literal|">"
operator|+
name|kidLevel
argument_list|,
name|kidLevelMin
operator|<=
name|kidLevel
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|origChild
init|=
name|findDecendent
argument_list|(
name|origDoc
argument_list|,
name|kidId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docId
operator|+
literal|" doesn't have decendent "
operator|+
name|kidId
argument_list|,
name|origChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFieldGlobbing
specifier|public
name|void
name|testFieldGlobbing
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"testFieldGlobbing"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"x_s"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"y_s"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"z_s"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// id and glob
name|QueryResponse
name|response
init|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"*_s"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|4
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// just globs
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"*_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|3
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// just id
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// id and pseudo field and glob
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"[docid]"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"*_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|5
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// pseudo field and glob
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"[docid]"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"*_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|4
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// just a pseudo field
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"[docid]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only score
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"score"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// pseudo field and score
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"score"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"[docid]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|2
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// score and globs
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"id:testFieldGlobbing"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"score"
argument_list|)
operator|.
name|addField
argument_list|(
literal|"*_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document not found"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All requested fields were not returned"
argument_list|,
literal|4
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThis
specifier|public
name|void
name|testMoreLikeThis
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|getSolrClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"testMoreLikeThis"
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"x_s"
argument_list|,
literal|"x_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"y_s"
argument_list|,
literal|"y_"
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"z_s"
argument_list|,
literal|"z_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// test with mlt.fl having comma separated values
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setRows
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"mlt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"mlt.mintf"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"mlt.count"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"mlt.fl"
argument_list|,
literal|"x_s,y_s,z_s"
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|moreLikeThis
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"moreLikeThis"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"MoreLikeThis response should not have been null"
argument_list|,
name|moreLikeThis
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
literal|"testMoreLikeThis"
operator|+
name|i
decl_stmt|;
name|SolrDocumentList
name|mltResp
init|=
operator|(
name|SolrDocumentList
operator|)
name|moreLikeThis
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"MoreLikeThis response for id="
operator|+
name|id
operator|+
literal|" should not be null"
argument_list|,
name|mltResp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MoreLikeThis response for id="
operator|+
name|id
operator|+
literal|" had numFound=0"
argument_list|,
name|mltResp
operator|.
name|getNumFound
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// now test with multiple mlt.fl parameters
name|q
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setRows
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"mlt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"mlt.mintf"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"mlt.count"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"mlt.fl"
argument_list|,
literal|"x_s"
argument_list|,
literal|"y_s"
argument_list|,
literal|"z_s"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|moreLikeThis
operator|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"moreLikeThis"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"MoreLikeThis response should not have been null"
argument_list|,
name|moreLikeThis
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
literal|"testMoreLikeThis"
operator|+
name|i
decl_stmt|;
name|SolrDocumentList
name|mltResp
init|=
operator|(
name|SolrDocumentList
operator|)
name|moreLikeThis
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"MoreLikeThis response for id="
operator|+
name|id
operator|+
literal|" should not be null"
argument_list|,
name|mltResp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MoreLikeThis response for id="
operator|+
name|id
operator|+
literal|" had numFound=0"
argument_list|,
name|mltResp
operator|.
name|getNumFound
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Depth first search of a SolrInputDocument looking for a decendent by id,     * returns null if it's not a decendent     */
DECL|method|findDecendent
specifier|private
name|SolrInputDocument
name|findDecendent
parameter_list|(
name|SolrInputDocument
name|parent
parameter_list|,
name|String
name|childId
parameter_list|)
block|{
if|if
condition|(
name|childId
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|parent
return|;
block|}
if|if
condition|(
operator|!
name|parent
operator|.
name|hasChildDocuments
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|SolrInputDocument
name|kid
range|:
name|parent
operator|.
name|getChildDocuments
argument_list|()
control|)
block|{
name|SolrInputDocument
name|result
init|=
name|findDecendent
argument_list|(
name|kid
argument_list|,
name|childId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|result
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** used by genNestedDocuments */
DECL|field|idCounter
specifier|private
name|int
name|idCounter
init|=
literal|0
decl_stmt|;
comment|/** used by genNestedDocuments */
DECL|field|names
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[]
block|{
literal|"java"
block|,
literal|"python"
block|,
literal|"scala"
block|,
literal|"ruby"
block|,
literal|"clojure"
block|}
decl_stmt|;
comment|/**    * recursive method for generating a document, which may also have child documents;    * adds all documents constructed (including decendents) to allDocs via their id     */
DECL|method|genNestedDocuments
specifier|private
name|SolrInputDocument
name|genNestedDocuments
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SolrInputDocument
argument_list|>
name|allDocs
parameter_list|,
name|int
name|thisLevel
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
name|String
name|id
init|=
literal|""
operator|+
operator|(
name|idCounter
operator|++
operator|)
decl_stmt|;
name|SolrInputDocument
name|sdoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|allDocs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|sdoc
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|addField
argument_list|(
literal|"level_i"
argument_list|,
name|thisLevel
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
name|names
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|names
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|maxDepth
condition|)
block|{
comment|// NOTE: range include negative to increase odds of no kids
name|int
name|numKids
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|2
argument_list|,
literal|7
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKids
condition|;
name|i
operator|++
control|)
block|{
name|sdoc
operator|.
name|addChildDocument
argument_list|(
name|genNestedDocuments
argument_list|(
name|allDocs
argument_list|,
name|thisLevel
operator|+
literal|1
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sdoc
return|;
block|}
block|}
end_class
end_unit
