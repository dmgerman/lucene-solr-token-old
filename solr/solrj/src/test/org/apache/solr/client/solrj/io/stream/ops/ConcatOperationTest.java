begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream.ops
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|ops
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|HashedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|ConcatOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|ReplaceOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|StreamOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  **/
end_comment
begin_class
DECL|class|ConcatOperationTest
specifier|public
class|class
name|ConcatOperationTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|factory
name|StreamFactory
name|factory
decl_stmt|;
DECL|field|values
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
decl_stmt|;
DECL|method|ConcatOperationTest
specifier|public
name|ConcatOperationTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withFunctionName
argument_list|(
literal|"concat"
argument_list|,
name|ConcatOperation
operator|.
name|class
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|HashedMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|concatSingleField
specifier|public
name|void
name|concatSingleField
parameter_list|()
throws|throws
name|Exception
block|{
name|Tuple
name|tuple
decl_stmt|;
name|StreamOperation
name|operation
decl_stmt|;
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"fieldA"
block|}
argument_list|,
literal|"fieldAConcat"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldAConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldAConcat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|concatMultipleFields
specifier|public
name|void
name|concatMultipleFields
parameter_list|()
throws|throws
name|Exception
block|{
name|Tuple
name|tuple
decl_stmt|;
name|StreamOperation
name|operation
decl_stmt|;
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"fieldA"
block|,
literal|"fieldB"
block|}
argument_list|,
literal|"fieldABConcat"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldB"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar-baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the same in oposite order
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"fieldB"
block|,
literal|"fieldA"
block|}
argument_list|,
literal|"fieldABConcat"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz-bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|concatMultipleFieldsWithIgnoredFields
specifier|public
name|void
name|concatMultipleFieldsWithIgnoredFields
parameter_list|()
throws|throws
name|Exception
block|{
name|Tuple
name|tuple
decl_stmt|;
name|StreamOperation
name|operation
decl_stmt|;
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"fieldA"
block|,
literal|"fieldB"
block|}
argument_list|,
literal|"fieldABConcat"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldB"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldC"
argument_list|,
literal|"bab"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldD"
argument_list|,
literal|"bat"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldC"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bab"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldC"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldD"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bat"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldD"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar-baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the same in oposite order
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"fieldB"
block|,
literal|"fieldA"
block|}
argument_list|,
literal|"fieldABConcat"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz-bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|concatWithNullValues
specifier|public
name|void
name|concatWithNullValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Tuple
name|tuple
decl_stmt|;
name|StreamOperation
name|operation
decl_stmt|;
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"fieldA"
block|,
literal|"fieldB"
block|}
argument_list|,
literal|"fieldABConcat"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar-null"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|///////////////////////////
annotation|@
name|Test
DECL|method|concatSingleFieldExpression
specifier|public
name|void
name|concatSingleFieldExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|Tuple
name|tuple
decl_stmt|;
name|StreamOperation
name|operation
decl_stmt|;
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"concat(fields=\"fieldA\", as=\"fieldAConcat\", delim=\"-\")"
argument_list|)
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldAConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldAConcat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|concatMultipleFieldsExpression
specifier|public
name|void
name|concatMultipleFieldsExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|Tuple
name|tuple
decl_stmt|;
name|StreamOperation
name|operation
decl_stmt|;
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"concat(fields=\"fieldA,fieldB\", as=\"fieldABConcat\", delim=\"-\")"
argument_list|)
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldB"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar-baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the same in oposite order
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"concat(fields=\"fieldB,fieldA\", as=\"fieldABConcat\", delim=\"-\")"
argument_list|)
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz-bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|concatMultipleFieldsWithIgnoredFieldsExpression
specifier|public
name|void
name|concatMultipleFieldsWithIgnoredFieldsExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|Tuple
name|tuple
decl_stmt|;
name|StreamOperation
name|operation
decl_stmt|;
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"concat(fields=\"fieldA,fieldB\", as=\"fieldABConcat\", delim=\"-\")"
argument_list|)
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldB"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldC"
argument_list|,
literal|"bab"
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldD"
argument_list|,
literal|"bat"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldC"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bab"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldC"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldD"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bat"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldD"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar-baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the same in oposite order
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"concat(fields=\"fieldB,fieldA\", as=\"fieldABConcat\", delim=\"-\")"
argument_list|)
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"baz-bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|concatWithNullValuesExpression
specifier|public
name|void
name|concatWithNullValuesExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|Tuple
name|tuple
decl_stmt|;
name|StreamOperation
name|operation
decl_stmt|;
name|operation
operator|=
operator|new
name|ConcatOperation
argument_list|(
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"concat(fields=\"fieldA,fieldB\", as=\"fieldABConcat\", delim=\"-\")"
argument_list|)
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"fieldA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|operation
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar-null"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"fieldABConcat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
