begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_comment
comment|/**  * A simple container class for modeling an ordered list of name/value pairs.  *  *<p>  * Unlike Maps:  *</p>  *<ul>  *<li>Names may be repeated</li>  *<li>Order of elements is maintained</li>  *<li>Elements may be accessed by numeric index</li>  *<li>Names and Values can both be null</li>  *</ul>  *  *<p>  * A NamedList provides fast access by element number, but not by name.  *</p>  *<p>  * When a NamedList is serialized, order is considered more important than access  * by key, so ResponseWriters that output to a format such as JSON will normally  * choose a data structure that allows order to be easily preserved in various  * clients (i.e. not a straight map).  * If access by key is more important for serialization, see {@link SimpleOrderedMap},  * or simply use a regular {@link Map}  *</p>  *  */
end_comment
begin_class
DECL|class|NamedList
specifier|public
class|class
name|NamedList
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Cloneable
implements|,
name|Serializable
implements|,
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1957981902839867821L
decl_stmt|;
DECL|field|nvPairs
specifier|protected
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|nvPairs
decl_stmt|;
comment|/** Creates an empty instance */
DECL|method|NamedList
specifier|public
name|NamedList
parameter_list|()
block|{
name|nvPairs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a NamedList instance containing the "name,value" pairs contained in the    * Entry[].    *    *<p>    * Modifying the contents of the Entry[] after calling this constructor may change    * the NamedList (in future versions of Solr), but this is not guaranteed and should    * not be relied upon.  To modify the NamedList, refer to {@link #add(String, Object)}    * or {@link #remove(String)}.    *</p>    *    * @param nameValuePairs the name value pairs    */
DECL|method|NamedList
specifier|public
name|NamedList
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|T
argument_list|>
index|[]
name|nameValuePairs
parameter_list|)
block|{
name|nvPairs
operator|=
name|nameValueMapToList
argument_list|(
name|nameValuePairs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a NamedList instance containing the "name,value" pairs contained in the    * Map.    *    *<p>    * Modifying the contents of the Map after calling this constructor may change    * the NamedList (in future versions of Solr), but this is not guaranteed and should    * not be relied upon.  To modify the NamedList, refer to {@link #add(String, Object)}    * or {@link #remove(String)}.    *</p>    *    * @param nameValueMap the name value pairs    */
DECL|method|NamedList
specifier|public
name|NamedList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|T
argument_list|>
name|nameValueMap
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|nameValueMap
condition|)
block|{
name|nvPairs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nvPairs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nameValueMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|T
argument_list|>
name|ent
range|:
name|nameValueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nvPairs
operator|.
name|add
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|nvPairs
operator|.
name|add
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates an instance backed by an explicitly specified list of    * pairwise names/values.    *    *<p>    * When using this constructor, runtime type safety is only guaranteed if    * all even numbered elements of the input list are of type "T".    *</p>    *    * @param nameValuePairs underlying List which should be used to implement a NamedList    * @deprecated Use {@link #NamedList(java.util.Map.Entry[])} for the NamedList instantiation    */
annotation|@
name|Deprecated
DECL|method|NamedList
specifier|public
name|NamedList
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|nameValuePairs
parameter_list|)
block|{
name|nvPairs
operator|=
name|nameValuePairs
expr_stmt|;
block|}
comment|/**    * Method to serialize Map.Entry&lt;String, ?&gt; to a List in which the even    * indexed elements (0,2,4. ..etc) are Strings and odd elements (1,3,5,) are of    * the type "T".    *    * @return Modified List as per the above description    * @deprecated This a temporary placeholder method until the guts of the class    * are actually replaced by List&lt;String, ?&gt;.    * @see<a href="https://issues.apache.org/jira/browse/SOLR-912">SOLR-912</a>    */
annotation|@
name|Deprecated
DECL|method|nameValueMapToList
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|nameValueMapToList
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|T
argument_list|>
index|[]
name|nameValuePairs
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|ent
range|:
name|nameValuePairs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** The total number of name/value pairs */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|nvPairs
operator|.
name|size
argument_list|()
operator|>>
literal|1
return|;
block|}
comment|/**    * The name of the pair at the specified List index    *    * @return null if no name exists    */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|nvPairs
operator|.
name|get
argument_list|(
name|idx
operator|<<
literal|1
argument_list|)
return|;
block|}
comment|/**    * The value of the pair at the specified List index    *    * @return may be null    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getVal
specifier|public
name|T
name|getVal
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|nvPairs
operator|.
name|get
argument_list|(
operator|(
name|idx
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**    * Adds a name/value pair to the end of the list.    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|val
parameter_list|)
block|{
name|nvPairs
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|nvPairs
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modifies the name of the pair at the specified index.    */
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|int
name|idx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|nvPairs
operator|.
name|set
argument_list|(
name|idx
operator|<<
literal|1
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modifies the value of the pair at the specified index.    *    * @return the value that used to be at index    */
DECL|method|setVal
specifier|public
name|T
name|setVal
parameter_list|(
name|int
name|idx
parameter_list|,
name|T
name|val
parameter_list|)
block|{
name|int
name|index
init|=
operator|(
name|idx
operator|<<
literal|1
operator|)
operator|+
literal|1
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|old
init|=
operator|(
name|T
operator|)
name|nvPairs
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|nvPairs
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
comment|/**    * Removes the name/value pair at the specified index.    *    * @return the value at the index removed    */
DECL|method|remove
specifier|public
name|T
name|remove
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|int
name|index
init|=
operator|(
name|idx
operator|<<
literal|1
operator|)
decl_stmt|;
name|nvPairs
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|result
init|=
operator|(
name|T
operator|)
name|nvPairs
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|// same index, as things shifted in previous remove
return|return
name|result
return|;
block|}
comment|/**    * Scans the list sequentially beginning at the specified index and    * returns the index of the first pair with the specified name.    *    * @param name name to look for, may be null    * @param start index to begin searching from    * @return The index of the first matching pair, -1 if no match    */
DECL|method|indexOf
specifier|public
name|int
name|indexOf
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|n
init|=
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
return|return
name|i
return|;
comment|// matched null
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Gets the value for the first instance of the specified name    * found.    *<p>    * NOTE: this runs in linear time (it scans starting at the    * beginning of the list until it finds the first pair with    * the specified name).    *    * @return null if not found or if the value stored was null.    * @see #indexOf    * @see #get(String,int)    *    */
DECL|method|get
specifier|public
name|T
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Gets the value for the first instance of the specified name    * found starting at the specified index.    *<p>    * NOTE: this runs in linear time (it scans starting at the    * specified position until it finds the first pair with    * the specified name).    *    * @return null if not found or if the value stored was null.    * @see #indexOf    */
DECL|method|get
specifier|public
name|T
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|n
init|=
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
return|return
name|getVal
argument_list|(
name|i
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
return|return
name|getVal
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Gets the values for the the specified name    *    * @param name Name    * @return List of values    */
DECL|method|getAll
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getAll
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|n
init|=
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|n
operator|||
operator|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|n
argument_list|)
operator|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Removes all values matching the specified name    *    * @param name Name    */
DECL|method|killAll
specifier|private
name|void
name|killAll
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
comment|// Go through the list backwards, removing matches as found.
for|for
control|(
name|int
name|i
init|=
name|sz
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|n
init|=
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|n
operator|||
operator|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|n
argument_list|)
operator|)
condition|)
block|{
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Recursively parses the NamedList structure to arrive at a specific element.    * As you descend the NamedList tree, the last element can be any type,    * including NamedList, but the previous elements MUST be NamedList objects    * themselves. A null value is returned if the indicated hierarchy doesn't    * exist, but NamedList allows null values so that could be the actual value    * at the end of the path.    *     * This method is particularly useful for parsing the response from Solr's    * /admin/mbeans handler, but it also works for any complex structure.    *     * Explicitly casting the return value is recommended. An even safer option is    * to accept the return value as an object and then check its type.    *     * Usage examples:    *     * String coreName = (String) response.findRecursive    * ("solr-mbeans", "CORE", "core", "stats", "coreName");    * long numDoc = (long) response.findRecursive    * ("solr-mbeans", "CORE", "searcher", "stats", "numDocs");    *     * @param args    *          One or more strings specifying the tree to navigate.    * @return the last entry in the given path hierarchy, null if not found.    */
DECL|method|findRecursive
specifier|public
name|Object
name|findRecursive
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
name|NamedList
argument_list|<
name|?
argument_list|>
name|currentList
init|=
literal|null
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
comment|/*        * The first time through the loop, the current list is null, so we assign        * it to this list. Then we retrieve the first key from this list and        * assign it to value.        *         * On the next loop, we check whether the retrieved value is a NamedList.        * If it is, then we drop down to that NamedList, grab the value of the        * next key, and start the loop over. If it is not a NamedList, then we        * assign the value to null and break out of the loop.        *         * Assigning the value to null and then breaking out of the loop seems        * like the wrong thing to do, but there's a very simple reason that it        * works: If we have reached the last key, then the loop ends naturally        * after we retrieve the value, and that code is never executed.        */
if|if
condition|(
name|currentList
operator|==
literal|null
condition|)
block|{
name|currentList
operator|=
name|this
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|instanceof
name|NamedList
condition|)
block|{
name|currentList
operator|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
comment|/*        * We do not need to do a null check on currentList for the following        * assignment. The instanceof check above will fail if the current list is        * null, and if that happens, the loop will end before this point.        */
name|value
operator|=
name|currentList
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|int
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    *     * Helper class implementing Map.Entry&lt;String, T&gt; to store the key-value    * relationship in NamedList (the keys of which are String-s)    */
DECL|class|NamedListEntry
specifier|public
specifier|static
specifier|final
class|class
name|NamedListEntry
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
block|{
DECL|method|NamedListEntry
specifier|public
name|NamedListEntry
parameter_list|()
block|{      }
DECL|method|NamedListEntry
specifier|public
name|NamedListEntry
parameter_list|(
name|String
name|_key
parameter_list|,
name|T
name|_value
parameter_list|)
block|{
name|key
operator|=
name|_key
expr_stmt|;
name|value
operator|=
name|_value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|T
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|setValue
specifier|public
name|T
name|setValue
parameter_list|(
name|T
name|_value
parameter_list|)
block|{
name|T
name|oldValue
init|=
name|value
decl_stmt|;
name|value
operator|=
name|_value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|T
name|value
decl_stmt|;
block|}
comment|/**    * Iterates over the Map and sequentially adds it's key/value pairs    */
DECL|method|addAll
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|args
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|entry
range|:
name|args
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/** Appends the elements of the given NamedList to this one. */
DECL|method|addAll
specifier|public
name|boolean
name|addAll
parameter_list|(
name|NamedList
argument_list|<
name|T
argument_list|>
name|nl
parameter_list|)
block|{
name|nvPairs
operator|.
name|addAll
argument_list|(
name|nl
operator|.
name|nvPairs
argument_list|)
expr_stmt|;
return|return
name|nl
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**    * Makes a<i>shallow copy</i> of the named list.    */
annotation|@
name|Override
DECL|method|clone
specifier|public
name|NamedList
argument_list|<
name|T
argument_list|>
name|clone
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nvPairs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|newList
operator|.
name|addAll
argument_list|(
name|nvPairs
argument_list|)
expr_stmt|;
return|return
operator|new
name|NamedList
argument_list|<>
argument_list|(
name|newList
argument_list|)
return|;
block|}
comment|//----------------------------------------------------------------------------
comment|// Iterable interface
comment|//----------------------------------------------------------------------------
comment|/**    * Support the Iterable interface    */
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|NamedList
argument_list|<
name|T
argument_list|>
name|list
init|=
name|this
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|iter
init|=
operator|new
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|idx
operator|<
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|next
parameter_list|()
block|{
specifier|final
name|int
name|index
init|=
name|idx
operator|++
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|nv
init|=
operator|new
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|list
operator|.
name|getName
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|getValue
parameter_list|()
block|{
return|return
name|list
operator|.
name|getVal
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|setValue
parameter_list|(
name|T
name|value
parameter_list|)
block|{
return|return
name|list
operator|.
name|setVal
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|nv
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
return|return
name|iter
return|;
block|}
comment|/**    * NOTE: this runs in linear time (it scans starting at the    * beginning of the list until it finds the first pair with    * the specified name).    */
DECL|method|remove
specifier|public
name|T
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|idx
init|=
name|indexOf
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
return|return
name|remove
argument_list|(
name|idx
argument_list|)
return|;
return|return
literal|null
return|;
block|}
comment|/**    * Removes and returns all values for the specified name.  Returns null if    * no matches found.  This method will return all matching objects,    * regardless of data type.  If you are parsing Solr config options, the    * {@link #removeConfigArgs(String)} or {@link #removeBooleanArg(String)}    * methods will probably work better.    *    * @param name Name    * @return List of values    */
DECL|method|removeAll
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|removeAll
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|=
name|getAll
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|killAll
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Used for getting a boolean argument from a NamedList object.  If the name    * is not present, returns null.  If there is more than one value with that    * name, or if the value found is not a Boolean or a String, throws an    * exception.  If there is only one value present and it is a Boolean or a    * String, the value is removed and returned as a Boolean. If an exception    * is thrown, the NamedList is not modified. See {@link #removeAll(String)}    * and {@link #removeConfigArgs(String)} for additional ways of gathering    * configuration information from a NamedList.    *     * @param name    *          The key to look up in the NamedList.    * @return The boolean value found.    * @throws SolrException    *           If multiple values are found for the name or the value found is    *           not a Boolean or a String.    */
DECL|method|removeBooleanArg
specifier|public
name|Boolean
name|removeBooleanArg
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|Boolean
name|bool
init|=
name|getBooleanArg
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|bool
condition|)
block|{
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|bool
return|;
block|}
comment|/**    * Used for getting a boolean argument from a NamedList object.  If the name    * is not present, returns null.  If there is more than one value with that    * name, or if the value found is not a Boolean or a String, throws an    * exception.  If there is only one value present and it is a Boolean or a    * String, the value is returned as a Boolean.  The NamedList is not    * modified. See {@link #remove(String)}, {@link #removeAll(String)}    * and {@link #removeConfigArgs(String)} for additional ways of gathering    * configuration information from a NamedList.    *    * @param name The key to look up in the NamedList.    * @return The boolean value found.    * @throws SolrException    *           If multiple values are found for the name or the value found is    *           not a Boolean or a String.    */
DECL|method|getBooleanArg
specifier|public
name|Boolean
name|getBooleanArg
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|Boolean
name|bool
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|values
init|=
name|getAll
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|values
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Only one '"
operator|+
name|name
operator|+
literal|"' is allowed"
argument_list|)
throw|;
block|}
name|Object
name|o
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Boolean
condition|)
block|{
name|bool
operator|=
operator|(
name|Boolean
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|CharSequence
condition|)
block|{
name|bool
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"'"
operator|+
name|name
operator|+
literal|"' must have type Boolean or CharSequence; found "
operator|+
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|bool
return|;
block|}
comment|/**    * Used for getting one or many arguments from NamedList objects that hold    * configuration parameters. Finds all entries in the NamedList that match    * the given name. If they are all strings or arrays of strings, remove them    * from the NamedList and return the individual elements as a {@link Collection}.    * Parameter order will be preserved if the returned collection is handled as    * an {@link ArrayList}. Throws SolrException if any of the values associated    * with the name are not strings or arrays of strings.  If exception is    * thrown, the NamedList is not modified.  Returns an empty collection if no    * matches found.  If you need to remove and retrieve all matching items from    * the NamedList regardless of data type, use {@link #removeAll(String)} instead.    * The {@link #removeBooleanArg(String)} method can be used for retrieving a    * boolean argument.    *     * @param name    *          The key to look up in the NamedList.    * @return A collection of the values found.    * @throws SolrException    *           If values are found for the input key that are not strings or    *           arrays of strings.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|removeConfigArgs
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|removeConfigArgs
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|SolrException
block|{
name|List
argument_list|<
name|T
argument_list|>
name|objects
init|=
name|getAll
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collection
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|err
init|=
literal|"init arg '"
operator|+
name|name
operator|+
literal|"' must be a string "
operator|+
literal|"(ie: 'str'), or an array (ie: 'arr') containing strings; found: "
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|objects
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|collection
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// If it's an array, convert to List (which is a Collection).
if|if
condition|(
name|o
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|o
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
comment|// If it's a Collection, collect each value.
if|if
condition|(
name|o
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Object
name|item
range|:
operator|(
name|Collection
operator|)
name|o
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|item
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|err
operator|+
name|item
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|collection
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|item
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|err
operator|+
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|collection
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|killAll
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|collection
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|nvPairs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|nvPairs
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|NamedList
operator|)
condition|)
return|return
literal|false
return|;
name|NamedList
argument_list|<
name|?
argument_list|>
name|nl
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|nvPairs
operator|.
name|equals
argument_list|(
name|nl
operator|.
name|nvPairs
argument_list|)
return|;
block|}
block|}
end_class
end_unit
