begin_unit
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|RetryUtil
specifier|public
class|class
name|RetryUtil
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|interface|RetryCmd
specifier|public
specifier|static
interface|interface
name|RetryCmd
block|{
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Throwable
function_decl|;
block|}
DECL|interface|BooleanRetryCmd
specifier|public
specifier|static
interface|interface
name|BooleanRetryCmd
block|{
DECL|method|execute
specifier|public
name|boolean
name|execute
parameter_list|()
function_decl|;
block|}
DECL|method|retryOnThrowable
specifier|public
specifier|static
name|void
name|retryOnThrowable
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|long
name|timeoutms
parameter_list|,
name|long
name|intervalms
parameter_list|,
name|RetryCmd
name|cmd
parameter_list|)
throws|throws
name|Throwable
block|{
name|retryOnThrowable
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|timeoutms
argument_list|,
name|intervalms
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|retryOnThrowable
specifier|public
specifier|static
name|void
name|retryOnThrowable
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|>
name|classes
parameter_list|,
name|long
name|timeoutms
parameter_list|,
name|long
name|intervalms
parameter_list|,
name|RetryCmd
name|cmd
parameter_list|)
throws|throws
name|Throwable
block|{
name|long
name|timeout
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|timeoutms
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|cmd
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|isInstanceOf
argument_list|(
name|classes
argument_list|,
name|t
argument_list|)
operator|&&
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Retry due to Throwable, "
operator|+
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|intervalms
argument_list|)
expr_stmt|;
continue|continue;
block|}
throw|throw
name|t
throw|;
block|}
comment|// success
break|break;
block|}
block|}
DECL|method|isInstanceOf
specifier|private
specifier|static
name|boolean
name|isInstanceOf
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|>
name|classes
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
for|for
control|(
name|Class
name|c
range|:
name|classes
control|)
block|{
if|if
condition|(
name|c
operator|.
name|isInstance
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|retryOnBoolean
specifier|public
specifier|static
name|void
name|retryOnBoolean
parameter_list|(
name|long
name|timeoutms
parameter_list|,
name|long
name|intervalms
parameter_list|,
name|BooleanRetryCmd
name|cmd
parameter_list|)
block|{
name|long
name|timeout
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|timeoutms
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|resp
init|=
name|cmd
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resp
operator|&&
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|timeout
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|>=
name|timeout
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Timed out while retrying operation"
argument_list|)
throw|;
block|}
comment|// success
break|break;
block|}
block|}
block|}
end_class
end_unit
