begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/** Chain several Iterators, so that this iterates  *  over all of them in sequence.  */
end_comment
begin_class
DECL|class|IteratorChain
specifier|public
class|class
name|IteratorChain
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|iterators
specifier|private
specifier|final
name|List
argument_list|<
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|>
name|iterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|itit
specifier|private
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|>
name|itit
decl_stmt|;
DECL|field|current
specifier|private
name|Iterator
argument_list|<
name|E
argument_list|>
name|current
decl_stmt|;
DECL|method|addIterator
specifier|public
name|void
name|addIterator
parameter_list|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
name|itit
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"all Iterators must be added before calling hasNext()"
argument_list|)
throw|;
name|iterators
operator|.
name|add
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|itit
operator|==
literal|null
condition|)
name|itit
operator|=
name|iterators
operator|.
name|iterator
argument_list|()
expr_stmt|;
return|return
name|recursiveHasNext
argument_list|()
return|;
block|}
comment|/** test if current iterator hasNext(), and if not try the next    *  one in sequence, recursively    */
DECL|method|recursiveHasNext
specifier|private
name|boolean
name|recursiveHasNext
parameter_list|()
block|{
comment|// return false if we have no more iterators
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|itit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|itit
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|result
init|=
name|current
operator|.
name|hasNext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
name|result
operator|=
name|recursiveHasNext
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** hasNext() must ALWAYS be called before calling this    *  otherwise it's a bit hard to keep track of what's happening    */
annotation|@
name|Override
DECL|method|next
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"For an IteratorChain, hasNext() MUST be called before calling next()"
argument_list|)
throw|;
block|}
return|return
name|current
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// we just need this class
comment|// to iterate in readonly mode
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class
end_unit
