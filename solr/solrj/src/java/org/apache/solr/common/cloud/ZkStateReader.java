begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|EventType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|ZkStateReader
specifier|public
class|class
name|ZkStateReader
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZkStateReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|COLLECTIONS_ZKNODE
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTIONS_ZKNODE
init|=
literal|"/collections"
decl_stmt|;
DECL|field|URL_PROP
specifier|public
specifier|static
specifier|final
name|String
name|URL_PROP
init|=
literal|"url"
decl_stmt|;
DECL|field|NODE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|NODE_NAME
init|=
literal|"node_name"
decl_stmt|;
DECL|field|SHARDS_ZKNODE
specifier|public
specifier|static
specifier|final
name|String
name|SHARDS_ZKNODE
init|=
literal|"/shards"
decl_stmt|;
DECL|field|LIVE_NODES_ZKNODE
specifier|public
specifier|static
specifier|final
name|String
name|LIVE_NODES_ZKNODE
init|=
literal|"/live_nodes"
decl_stmt|;
DECL|field|cloudState
specifier|private
specifier|volatile
name|CloudState
name|cloudState
init|=
operator|new
name|CloudState
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|CLOUD_UPDATE_DELAY
specifier|private
specifier|static
specifier|final
name|long
name|CLOUD_UPDATE_DELAY
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"CLOUD_UPDATE_DELAY"
argument_list|,
literal|"5000"
argument_list|)
argument_list|)
decl_stmt|;
DECL|class|ZKTF
specifier|private
specifier|static
class|class
name|ZKTF
implements|implements
name|ThreadFactory
block|{
DECL|field|tg
specifier|private
specifier|static
name|ThreadGroup
name|tg
init|=
operator|new
name|ThreadGroup
argument_list|(
literal|"ZkStateReader"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|newThread
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|td
init|=
operator|new
name|Thread
argument_list|(
name|tg
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|td
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|td
return|;
block|}
block|}
DECL|field|updateCloudExecutor
specifier|private
name|ScheduledExecutorService
name|updateCloudExecutor
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ZKTF
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|cloudStateUpdateScheduled
specifier|private
name|boolean
name|cloudStateUpdateScheduled
decl_stmt|;
DECL|field|zkClient
specifier|private
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|closeClient
specifier|private
name|boolean
name|closeClient
init|=
literal|false
decl_stmt|;
DECL|method|ZkStateReader
specifier|public
name|ZkStateReader
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|this
operator|.
name|zkClient
operator|=
name|zkClient
expr_stmt|;
block|}
DECL|method|ZkStateReader
specifier|public
name|ZkStateReader
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|zkClientConnectTimeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
name|closeClient
operator|=
literal|true
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|zkClientConnectTimeout
argument_list|,
comment|// on reconnect, reload cloud info
operator|new
name|OnReconnect
argument_list|()
block|{
specifier|public
name|void
name|command
parameter_list|()
block|{
try|try
block|{
name|makeCollectionsNodeWatches
argument_list|()
expr_stmt|;
name|makeShardsWatches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateCloudState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// load and publish a new CollectionInfo
DECL|method|updateCloudState
specifier|public
name|void
name|updateCloudState
parameter_list|(
name|boolean
name|immediate
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|updateCloudState
argument_list|(
name|immediate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// load and publish a new CollectionInfo
DECL|method|updateLiveNodes
specifier|public
name|void
name|updateLiveNodes
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|updateCloudState
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// load and publish a new CollectionInfo
DECL|method|updateCloudState
specifier|private
specifier|synchronized
name|void
name|updateCloudState
parameter_list|(
name|boolean
name|immediate
parameter_list|,
specifier|final
name|boolean
name|onlyLiveNodes
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
comment|// TODO: - possibly: incremental update rather than reread everything
comment|// build immutable CloudInfo
if|if
condition|(
name|immediate
condition|)
block|{
if|if
condition|(
operator|!
name|onlyLiveNodes
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Updating cloud state from ZooKeeper... "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Updating live nodes from ZooKeeper... "
argument_list|)
expr_stmt|;
block|}
name|CloudState
name|cloudState
decl_stmt|;
name|cloudState
operator|=
name|CloudState
operator|.
name|buildCloudState
argument_list|(
name|zkClient
argument_list|,
name|this
operator|.
name|cloudState
argument_list|,
name|onlyLiveNodes
argument_list|)
expr_stmt|;
comment|// update volatile
name|this
operator|.
name|cloudState
operator|=
name|cloudState
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cloudStateUpdateScheduled
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cloud state update for ZooKeeper already scheduled"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Scheduling cloud state update from ZooKeeper..."
argument_list|)
expr_stmt|;
name|cloudStateUpdateScheduled
operator|=
literal|true
expr_stmt|;
name|updateCloudExecutor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Updating cloud state from ZooKeeper..."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|getUpdateLock
argument_list|()
init|)
block|{
name|cloudStateUpdateScheduled
operator|=
literal|false
expr_stmt|;
name|CloudState
name|cloudState
decl_stmt|;
try|try
block|{
name|cloudState
operator|=
name|CloudState
operator|.
name|buildCloudState
argument_list|(
name|zkClient
argument_list|,
name|ZkStateReader
operator|.
name|this
operator|.
name|cloudState
argument_list|,
name|onlyLiveNodes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// update volatile
name|ZkStateReader
operator|.
name|this
operator|.
name|cloudState
operator|=
name|cloudState
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|CLOUD_UPDATE_DELAY
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeShardZkNodeWatches
specifier|public
name|void
name|makeShardZkNodeWatches
parameter_list|(
name|boolean
name|makeWatchesForReconnect
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|CloudState
name|cloudState
init|=
name|getCloudState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|knownCollections
init|=
name|cloudState
operator|.
name|getCollections
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|COLLECTIONS_ZKNODE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|collection
range|:
name|collections
control|)
block|{
if|if
condition|(
name|makeWatchesForReconnect
operator|||
operator|!
name|knownCollections
operator|.
name|contains
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Found new collection:"
operator|+
name|collection
argument_list|)
expr_stmt|;
name|Watcher
name|watcher
init|=
operator|new
name|Watcher
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Detected changed ShardId in collection:"
operator|+
name|collection
argument_list|)
expr_stmt|;
try|try
block|{
name|makeShardsWatches
argument_list|(
name|collection
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateCloudState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|boolean
name|madeWatch
init|=
literal|true
decl_stmt|;
name|String
name|shardZkNode
init|=
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
name|SHARDS_ZKNODE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|zkClient
operator|.
name|getChildren
argument_list|(
name|shardZkNode
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// most likely, the collections node has been created, but not the
comment|// shards node yet -- pause and try again
name|madeWatch
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|4
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not set shards zknode watch, because the zknode does not exist:"
operator|+
name|shardZkNode
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|madeWatch
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Made shard watch:"
operator|+
name|shardZkNode
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
DECL|method|makeShardsWatches
specifier|public
name|void
name|makeShardsWatches
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|,
name|boolean
name|makeWatchesForReconnect
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|zkClient
operator|.
name|exists
argument_list|(
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
name|SHARDS_ZKNODE
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|shardIds
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
name|SHARDS_ZKNODE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CloudState
name|cloudState
init|=
name|getCloudState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|knownShardIds
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|cloudState
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
name|knownShardIds
operator|=
name|slices
operator|.
name|keySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|knownShardIds
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|shardId
range|:
name|shardIds
control|)
block|{
if|if
condition|(
name|makeWatchesForReconnect
operator|||
operator|!
name|knownShardIds
operator|.
name|contains
argument_list|(
name|shardId
argument_list|)
condition|)
block|{
name|zkClient
operator|.
name|getChildren
argument_list|(
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
name|SHARDS_ZKNODE
operator|+
literal|"/"
operator|+
name|shardId
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Detected a shard change under ShardId:"
operator|+
name|shardId
operator|+
literal|" in collection:"
operator|+
name|collection
argument_list|)
expr_stmt|;
try|try
block|{
name|updateCloudState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|makeShardsWatches
specifier|public
name|void
name|makeShardsWatches
parameter_list|(
name|boolean
name|makeWatchesForReconnect
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|COLLECTIONS_ZKNODE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|collection
range|:
name|collections
control|)
block|{
name|makeShardsWatches
argument_list|(
name|collection
argument_list|,
name|makeWatchesForReconnect
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return information about the cluster from ZooKeeper    */
DECL|method|getCloudState
specifier|public
name|CloudState
name|getCloudState
parameter_list|()
block|{
return|return
name|cloudState
return|;
block|}
DECL|method|getUpdateLock
specifier|public
name|Object
name|getUpdateLock
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closeClient
condition|)
block|{
try|try
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|makeCollectionsNodeWatches
specifier|public
name|void
name|makeCollectionsNodeWatches
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Start watching collections zk node for changes"
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Detected a new or removed collection"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|getUpdateLock
argument_list|()
init|)
block|{
name|makeShardZkNodeWatches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updateCloudState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// re-watch
name|String
name|path
init|=
name|event
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|!=
name|EventType
operator|.
name|NodeDataChanged
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Notified of CloudState change"
argument_list|)
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|getUpdateLock
argument_list|()
init|)
block|{
name|makeShardZkNodeWatches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updateCloudState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|zkClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
