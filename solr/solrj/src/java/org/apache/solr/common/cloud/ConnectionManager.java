begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|KeeperState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|ConnectionManager
specifier|public
class|class
name|ConnectionManager
implements|implements
name|Watcher
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConnectionManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|connected
specifier|private
specifier|volatile
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
DECL|field|connectionStrategy
specifier|private
specifier|final
name|ZkClientConnectionStrategy
name|connectionStrategy
decl_stmt|;
DECL|field|zkServerAddress
specifier|private
specifier|final
name|String
name|zkServerAddress
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|SolrZkClient
name|client
decl_stmt|;
DECL|field|onReconnect
specifier|private
specifier|final
name|OnReconnect
name|onReconnect
decl_stmt|;
DECL|field|beforeReconnect
specifier|private
specifier|final
name|BeforeReconnect
name|beforeReconnect
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|volatile
name|boolean
name|isClosed
init|=
literal|false
decl_stmt|;
DECL|field|likelyExpired
specifier|private
specifier|volatile
name|boolean
name|likelyExpired
init|=
literal|true
decl_stmt|;
DECL|field|disconnectedTimer
specifier|private
specifier|volatile
name|Timer
name|disconnectedTimer
decl_stmt|;
DECL|method|ConnectionManager
specifier|public
name|ConnectionManager
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrZkClient
name|client
parameter_list|,
name|String
name|zkServerAddress
parameter_list|,
name|ZkClientConnectionStrategy
name|strat
parameter_list|,
name|OnReconnect
name|onConnect
parameter_list|,
name|BeforeReconnect
name|beforeReconnect
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|connectionStrategy
operator|=
name|strat
expr_stmt|;
name|this
operator|.
name|zkServerAddress
operator|=
name|zkServerAddress
expr_stmt|;
name|this
operator|.
name|onReconnect
operator|=
name|onConnect
expr_stmt|;
name|this
operator|.
name|beforeReconnect
operator|=
name|beforeReconnect
expr_stmt|;
block|}
DECL|method|connected
specifier|private
specifier|synchronized
name|void
name|connected
parameter_list|()
block|{
name|cancelTimer
argument_list|()
expr_stmt|;
name|connected
operator|=
literal|true
expr_stmt|;
name|likelyExpired
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
DECL|method|disconnected
specifier|private
specifier|synchronized
name|void
name|disconnected
parameter_list|()
block|{
name|cancelTimer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isClosed
condition|)
block|{
name|Timer
name|newDcTimer
init|=
operator|new
name|Timer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|newDcTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|likelyExpired
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|,
call|(
name|long
call|)
argument_list|(
name|client
operator|.
name|getZkClientTimeout
argument_list|()
operator|*
literal|0.90
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isClosed
condition|)
block|{
comment|// we might have closed after getting by isClosed
comment|// and before starting the new timer
name|newDcTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|disconnectedTimer
operator|=
name|newDcTimer
expr_stmt|;
if|if
condition|(
name|isClosed
condition|)
block|{
comment|// now deal with we may have been closed after getting
comment|// by isClosed but before setting disconnectedTimer -
comment|// if close happens after isClosed check this time, it
comment|// will handle stopping the timer
name|cancelTimer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|connected
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
DECL|method|cancelTimer
specifier|private
name|void
name|cancelTimer
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|disconnectedTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// fine
block|}
finally|finally
block|{
name|this
operator|.
name|disconnectedTimer
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Watcher "
operator|+
name|this
operator|+
literal|" name:"
operator|+
name|name
operator|+
literal|" got event "
operator|+
name|event
operator|+
literal|" path:"
operator|+
name|event
operator|.
name|getPath
argument_list|()
operator|+
literal|" type:"
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isClosed
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Client->ZooKeeper status change trigger but we are already closed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|KeeperState
name|state
init|=
name|event
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|KeeperState
operator|.
name|SyncConnected
condition|)
block|{
name|connected
argument_list|()
expr_stmt|;
name|connectionStrategy
operator|.
name|connected
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|KeeperState
operator|.
name|Expired
condition|)
block|{
comment|// we don't call disconnected because there
comment|// is no need to start the timer - if we are expired
comment|// likelyExpired can just be set to true
name|cancelTimer
argument_list|()
expr_stmt|;
name|connected
operator|=
literal|false
expr_stmt|;
name|likelyExpired
operator|=
literal|true
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Our previous ZooKeeper session was expired. Attempting to reconnect to recover relationship with ZooKeeper..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|beforeReconnect
operator|!=
literal|null
condition|)
block|{
name|beforeReconnect
operator|.
name|command
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|connectionStrategy
operator|.
name|reconnect
argument_list|(
name|zkServerAddress
argument_list|,
name|client
operator|.
name|getZkClientTimeout
argument_list|()
argument_list|,
name|this
argument_list|,
operator|new
name|ZkClientConnectionStrategy
operator|.
name|ZkUpdate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|SolrZooKeeper
name|keeper
parameter_list|)
block|{
try|try
block|{
name|waitForConnected
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|closeKeeper
argument_list|(
name|keeper
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Connection with ZooKeeper reestablished."
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|updateKeeper
argument_list|(
name|keeper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|closeKeeper
argument_list|(
name|keeper
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// we must have been asked to stop
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|closeKeeper
argument_list|(
name|keeper
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
comment|// The new event thread will call connected
comment|// we just start the reconnect thread and
comment|// do nothing else
if|if
condition|(
name|onReconnect
operator|!=
literal|null
condition|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|onReconnect
operator|.
name|command
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception running onReconnect command"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Connected:"
operator|+
name|connected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|KeeperState
operator|.
name|Disconnected
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"zkClient has disconnected"
argument_list|)
expr_stmt|;
name|disconnected
argument_list|()
expr_stmt|;
name|connectionStrategy
operator|.
name|disconnected
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|KeeperState
operator|.
name|AuthFailed
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"zkClient received AuthFailed"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isConnected
specifier|public
specifier|synchronized
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
operator|!
name|isClosed
operator|&&
name|connected
return|;
block|}
comment|// we use a volatile rather than sync
comment|// to avoid possible deadlock on shutdown
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|likelyExpired
operator|=
literal|true
expr_stmt|;
name|cancelTimer
argument_list|()
expr_stmt|;
block|}
DECL|method|isLikelyExpired
specifier|public
name|boolean
name|isLikelyExpired
parameter_list|()
block|{
return|return
name|likelyExpired
return|;
block|}
DECL|method|waitForConnected
specifier|public
specifier|synchronized
name|void
name|waitForConnected
parameter_list|(
name|long
name|waitForConnection
parameter_list|)
throws|throws
name|TimeoutException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waiting for client to connect to ZooKeeper"
argument_list|)
expr_stmt|;
name|long
name|expire
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|waitForConnection
decl_stmt|;
name|long
name|left
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|connected
operator|&&
name|left
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
break|break;
block|}
try|try
block|{
name|wait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
name|left
operator|=
name|expire
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|connected
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Could not connect to ZooKeeper "
operator|+
name|zkServerAddress
operator|+
literal|" within "
operator|+
name|waitForConnection
operator|+
literal|" ms"
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Client is connected to ZooKeeper"
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForDisconnected
specifier|public
specifier|synchronized
name|void
name|waitForDisconnected
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|long
name|expire
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
name|long
name|left
init|=
name|timeout
decl_stmt|;
while|while
condition|(
name|connected
operator|&&
name|left
operator|>
literal|0
condition|)
block|{
name|wait
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|left
operator|=
name|expire
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connected
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Did not disconnect"
argument_list|)
throw|;
block|}
block|}
DECL|method|closeKeeper
specifier|private
name|void
name|closeKeeper
parameter_list|(
name|SolrZooKeeper
name|keeper
parameter_list|)
block|{
try|try
block|{
name|keeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
