begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_class
DECL|class|Aliases
specifier|public
class|class
name|Aliases
block|{
DECL|field|aliasMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|aliasMap
decl_stmt|;
DECL|method|Aliases
specifier|public
name|Aliases
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|aliasMap
parameter_list|)
block|{
name|this
operator|.
name|aliasMap
operator|=
name|aliasMap
expr_stmt|;
block|}
DECL|method|Aliases
specifier|public
name|Aliases
parameter_list|()
block|{
name|this
operator|.
name|aliasMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getCollectionAliasMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCollectionAliasMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cam
init|=
name|aliasMap
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cam
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|cam
argument_list|)
return|;
block|}
DECL|method|getAliasMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getAliasMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|aliasMap
argument_list|)
return|;
block|}
DECL|method|collectionAliasSize
specifier|public
name|int
name|collectionAliasSize
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cam
init|=
name|aliasMap
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cam
operator|==
literal|null
condition|)
return|return
literal|0
return|;
return|return
name|cam
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Aliases [aliasMap="
operator|+
name|aliasMap
operator|+
literal|"]"
return|;
block|}
DECL|method|getCollectionAlias
specifier|public
name|String
name|getCollectionAlias
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cam
init|=
name|aliasMap
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cam
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|cam
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
return|;
block|}
block|}
end_class
end_unit
