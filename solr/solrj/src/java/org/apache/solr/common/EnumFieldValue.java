begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_comment
comment|/**  * Represents a Enum field value, which includes integer value (indicating the sort order) and string (displayed) value.  * Note: this class has a natural ordering that is inconsistent with equals  */
end_comment
begin_class
DECL|class|EnumFieldValue
specifier|public
specifier|final
class|class
name|EnumFieldValue
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|EnumFieldValue
argument_list|>
block|{
DECL|field|intValue
specifier|private
specifier|final
name|Integer
name|intValue
decl_stmt|;
DECL|field|stringValue
specifier|private
specifier|final
name|String
name|stringValue
decl_stmt|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|intValue
operator|!=
literal|null
condition|?
name|intValue
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|stringValue
operator|!=
literal|null
condition|?
name|stringValue
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|EnumFieldValue
specifier|public
name|EnumFieldValue
parameter_list|(
name|Integer
name|intValue
parameter_list|,
name|String
name|stringValue
parameter_list|)
block|{
name|this
operator|.
name|intValue
operator|=
name|intValue
expr_stmt|;
name|this
operator|.
name|stringValue
operator|=
name|stringValue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|EnumFieldValue
operator|)
condition|)
return|return
literal|false
return|;
name|EnumFieldValue
name|otherEnumFieldValue
init|=
operator|(
name|EnumFieldValue
operator|)
name|obj
decl_stmt|;
return|return
name|equalsIntegers
argument_list|(
name|intValue
argument_list|,
name|otherEnumFieldValue
operator|.
name|intValue
argument_list|)
operator|&&
name|equalStrings
argument_list|(
name|stringValue
argument_list|,
name|otherEnumFieldValue
operator|.
name|stringValue
argument_list|)
return|;
block|}
comment|/**    * @return string (displayed) value    */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|stringValue
return|;
block|}
comment|/**    * @return integer value (indicating the sort order)    */
DECL|method|toInt
specifier|public
name|Integer
name|toInt
parameter_list|()
block|{
return|return
name|intValue
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|EnumFieldValue
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|1
return|;
return|return
name|compareIntegers
argument_list|(
name|intValue
argument_list|,
name|o
operator|.
name|intValue
argument_list|)
return|;
block|}
DECL|method|equalStrings
specifier|private
name|boolean
name|equalStrings
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|str1
operator|==
literal|null
operator|)
operator|&&
operator|(
name|str2
operator|==
literal|null
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|str1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|str2
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|str1
operator|.
name|equals
argument_list|(
name|str2
argument_list|)
return|;
block|}
DECL|method|equalsIntegers
specifier|private
name|boolean
name|equalsIntegers
parameter_list|(
name|Integer
name|int1
parameter_list|,
name|Integer
name|int2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|int1
operator|==
literal|null
operator|)
operator|&&
operator|(
name|int2
operator|==
literal|null
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|int1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|int2
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|int1
operator|.
name|equals
argument_list|(
name|int2
argument_list|)
return|;
block|}
DECL|method|compareIntegers
specifier|private
name|int
name|compareIntegers
parameter_list|(
name|Integer
name|int1
parameter_list|,
name|Integer
name|int2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|int1
operator|==
literal|null
operator|)
operator|&&
operator|(
name|int2
operator|==
literal|null
operator|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|int1
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|int2
operator|==
literal|null
condition|)
return|return
literal|1
return|;
return|return
name|int1
operator|.
name|compareTo
argument_list|(
name|int2
argument_list|)
return|;
block|}
block|}
end_class
end_unit
