begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|noggit
operator|.
name|JSONUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|noggit
operator|.
name|JSONWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Models a Collection in zookeeper (but that Java name is obviously taken, hence "DocCollection")  */
end_comment
begin_class
DECL|class|DocCollection
specifier|public
class|class
name|DocCollection
extends|extends
name|ZkNodeProps
block|{
DECL|field|PROPERTIES
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTIES
init|=
literal|"properties"
decl_stmt|;
DECL|field|DOC_ROUTER
specifier|public
specifier|static
specifier|final
name|String
name|DOC_ROUTER
init|=
literal|"router"
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|slices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
decl_stmt|;
DECL|field|router
specifier|private
specifier|final
name|DocRouter
name|router
decl_stmt|;
DECL|method|DocCollection
specifier|public
name|DocCollection
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|DocRouter
name|router
parameter_list|)
block|{
name|super
argument_list|(
name|props
operator|==
literal|null
condition|?
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
else|:
name|props
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|slices
operator|=
name|slices
expr_stmt|;
name|this
operator|.
name|router
operator|=
name|router
expr_stmt|;
assert|assert
name|name
operator|!=
literal|null
operator|&&
name|slices
operator|!=
literal|null
assert|;
block|}
comment|/**    * Return collection name.    */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getSlice
specifier|public
name|Slice
name|getSlice
parameter_list|(
name|String
name|sliceName
parameter_list|)
block|{
return|return
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
return|;
block|}
comment|/**    * Gets the list of slices for this collection.    */
DECL|method|getSlices
specifier|public
name|Collection
argument_list|<
name|Slice
argument_list|>
name|getSlices
parameter_list|()
block|{
return|return
name|slices
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**    * Get the map of slices (sliceName->Slice) for this collection.    */
DECL|method|getSlicesMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|getSlicesMap
parameter_list|()
block|{
return|return
name|slices
return|;
block|}
DECL|method|getRouter
specifier|public
name|DocRouter
name|getRouter
parameter_list|()
block|{
return|return
name|router
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DocCollection("
operator|+
name|name
operator|+
literal|")="
operator|+
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|JSONWriter
name|jsonWriter
parameter_list|)
block|{
comment|// write out the properties under "properties"
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|all
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|slices
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|all
operator|.
name|put
argument_list|(
name|PROPERTIES
argument_list|,
name|propMap
argument_list|)
expr_stmt|;
name|all
operator|.
name|putAll
argument_list|(
name|slices
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|write
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
