begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_class
DECL|class|ByteUtils
specifier|public
class|class
name|ByteUtils
block|{
comment|/** Maximum number of UTF8 bytes per UTF16 character. */
DECL|field|MAX_UTF8_BYTES_PER_CHAR
specifier|public
specifier|static
specifier|final
name|int
name|MAX_UTF8_BYTES_PER_CHAR
init|=
literal|3
decl_stmt|;
comment|/** Converts utf8 to utf16 and returns the number of 16 bit Java chars written.    * Full characters are read, even if this reads past the length passed (and can result in    * an ArrayOutOfBoundsException if invalid UTF8 is passed).  Explicit checks for valid UTF8 are not performed.    * The char[] out should probably have enough room to hold the worst case of each byte becoming a Java char.    */
DECL|method|UTF8toUTF16
specifier|public
specifier|static
name|int
name|UTF8toUTF16
parameter_list|(
name|byte
index|[]
name|utf8
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|char
index|[]
name|out
parameter_list|,
name|int
name|out_offset
parameter_list|)
block|{
name|int
name|out_start
init|=
name|out_offset
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|offset
operator|+
name|len
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|limit
condition|)
block|{
name|int
name|b
init|=
name|utf8
index|[
name|offset
operator|++
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|b
operator|<
literal|0xc0
condition|)
block|{
assert|assert
name|b
operator|<
literal|0x80
assert|;
name|out
index|[
name|out_offset
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|b
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|<
literal|0xe0
condition|)
block|{
name|out
index|[
name|out_offset
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|b
operator|&
literal|0x1f
operator|)
operator|<<
literal|6
operator|)
operator|+
operator|(
name|utf8
index|[
name|offset
operator|++
index|]
operator|&
literal|0x3f
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|<
literal|0xf0
condition|)
block|{
name|out
index|[
name|out_offset
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|b
operator|&
literal|0xf
operator|)
operator|<<
literal|12
operator|)
operator|+
operator|(
operator|(
name|utf8
index|[
name|offset
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|6
operator|)
operator|+
operator|(
name|utf8
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0x3f
operator|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|b
operator|<
literal|0xf8
assert|;
name|int
name|ch
init|=
operator|(
operator|(
name|b
operator|&
literal|0x7
operator|)
operator|<<
literal|18
operator|)
operator|+
operator|(
operator|(
name|utf8
index|[
name|offset
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|12
operator|)
operator|+
operator|(
operator|(
name|utf8
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|6
operator|)
operator|+
operator|(
name|utf8
index|[
name|offset
operator|+
literal|2
index|]
operator|&
literal|0x3f
operator|)
decl_stmt|;
name|offset
operator|+=
literal|3
expr_stmt|;
if|if
condition|(
name|ch
operator|<
literal|0xffff
condition|)
block|{
name|out
index|[
name|out_offset
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|ch
expr_stmt|;
block|}
else|else
block|{
name|int
name|chHalf
init|=
name|ch
operator|-
literal|0x0010000
decl_stmt|;
name|out
index|[
name|out_offset
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|chHalf
operator|>>
literal|10
operator|)
operator|+
literal|0xD800
argument_list|)
expr_stmt|;
name|out
index|[
name|out_offset
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|chHalf
operator|&
literal|0x3FFL
operator|)
operator|+
literal|0xDC00
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|out_offset
operator|-
name|out_start
return|;
block|}
comment|/** Convert UTF8 bytes into UTF16 characters. */
DECL|method|UTF8toUTF16
specifier|public
specifier|static
name|void
name|UTF8toUTF16
parameter_list|(
name|byte
index|[]
name|utf8
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|CharArr
name|out
parameter_list|)
block|{
comment|// TODO: do in chunks if the input is large
name|out
operator|.
name|reserve
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|UTF8toUTF16
argument_list|(
name|utf8
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|out
operator|.
name|getArray
argument_list|()
argument_list|,
name|out
operator|.
name|getEnd
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|setEnd
argument_list|(
name|out
operator|.
name|getEnd
argument_list|()
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
comment|/** Convert UTF8 bytes into a String */
DECL|method|UTF8toUTF16
specifier|public
specifier|static
name|String
name|UTF8toUTF16
parameter_list|(
name|byte
index|[]
name|utf8
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|char
index|[]
name|out
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
name|int
name|n
init|=
name|UTF8toUTF16
argument_list|(
name|utf8
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|out
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/** Writes UTF8 into the byte array, starting at offset.  The caller should ensure that    * there is enough space for the worst-case scenario.    * @return the number of bytes written    */
DECL|method|UTF16toUTF8
specifier|public
specifier|static
name|int
name|UTF16toUTF8
parameter_list|(
name|CharSequence
name|s
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
index|[]
name|result
parameter_list|,
name|int
name|resultOffset
parameter_list|)
block|{
specifier|final
name|int
name|end
init|=
name|offset
operator|+
name|len
decl_stmt|;
name|int
name|upto
init|=
name|resultOffset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|code
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|<
literal|0x80
condition|)
name|result
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|code
expr_stmt|;
elseif|else
if|if
condition|(
name|code
operator|<
literal|0x800
condition|)
block|{
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xC0
operator||
operator|(
name|code
operator|>>
literal|6
operator|)
argument_list|)
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|code
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
argument_list|<
literal|0xD800
operator|||
name|code
argument_list|>
literal|0xDFFF
condition|)
block|{
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xE0
operator||
operator|(
name|code
operator|>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|code
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|code
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// surrogate pair
comment|// confirm valid high surrogate
if|if
condition|(
name|code
operator|<
literal|0xDC00
operator|&&
operator|(
name|i
operator|<
name|end
operator|-
literal|1
operator|)
condition|)
block|{
name|int
name|utf32
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// confirm valid low surrogate and write pair
if|if
condition|(
name|utf32
operator|>=
literal|0xDC00
operator|&&
name|utf32
operator|<=
literal|0xDFFF
condition|)
block|{
name|utf32
operator|=
operator|(
operator|(
name|code
operator|-
literal|0xD7C0
operator|)
operator|<<
literal|10
operator|)
operator|+
operator|(
name|utf32
operator|&
literal|0x3FF
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xF0
operator||
operator|(
name|utf32
operator|>>
literal|18
operator|)
argument_list|)
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|utf32
operator|>>
literal|12
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|utf32
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|utf32
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// replace unpaired surrogate or out-of-order low surrogate
comment|// with substitution character
name|result
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xEF
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xBF
expr_stmt|;
name|result
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xBD
expr_stmt|;
block|}
block|}
return|return
name|upto
operator|-
name|resultOffset
return|;
block|}
comment|/** Writes UTF8 into the given OutputStream by first writing to the given scratch array    * and then writing the contents of the scratch array to the OutputStream. The given scratch byte array    * is used to buffer intermediate data before it is written to the output stream.    *    * @return the number of bytes written    */
DECL|method|writeUTF16toUTF8
specifier|public
specifier|static
name|int
name|writeUTF16toUTF8
parameter_list|(
name|CharSequence
name|s
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|OutputStream
name|fos
parameter_list|,
name|byte
index|[]
name|scratch
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|end
init|=
name|offset
operator|+
name|len
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|,
name|totalBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|code
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|upto
operator|>
name|scratch
operator|.
name|length
operator|-
literal|4
condition|)
block|{
comment|// a code point may take upto 4 bytes and we don't have enough space, so reset
name|totalBytes
operator|+=
name|upto
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
expr_stmt|;
name|upto
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|code
operator|<
literal|0x80
condition|)
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|code
expr_stmt|;
elseif|else
if|if
condition|(
name|code
operator|<
literal|0x800
condition|)
block|{
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xC0
operator||
operator|(
name|code
operator|>>
literal|6
operator|)
argument_list|)
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|code
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
argument_list|<
literal|0xD800
operator|||
name|code
argument_list|>
literal|0xDFFF
condition|)
block|{
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xE0
operator||
operator|(
name|code
operator|>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|code
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|code
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// surrogate pair
comment|// confirm valid high surrogate
if|if
condition|(
name|code
operator|<
literal|0xDC00
operator|&&
operator|(
name|i
operator|<
name|end
operator|-
literal|1
operator|)
condition|)
block|{
name|int
name|utf32
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// confirm valid low surrogate and write pair
if|if
condition|(
name|utf32
operator|>=
literal|0xDC00
operator|&&
name|utf32
operator|<=
literal|0xDFFF
condition|)
block|{
name|utf32
operator|=
operator|(
operator|(
name|code
operator|-
literal|0xD7C0
operator|)
operator|<<
literal|10
operator|)
operator|+
operator|(
name|utf32
operator|&
literal|0x3FF
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xF0
operator||
operator|(
name|utf32
operator|>>
literal|18
operator|)
argument_list|)
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|utf32
operator|>>
literal|12
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|utf32
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|utf32
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// replace unpaired surrogate or out-of-order low surrogate
comment|// with substitution character
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xEF
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xBF
expr_stmt|;
name|scratch
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xBD
expr_stmt|;
block|}
block|}
name|totalBytes
operator|+=
name|upto
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
expr_stmt|;
return|return
name|totalBytes
return|;
block|}
comment|/**    * Calculates the number of UTF8 bytes necessary to write a UTF16 string.    *    * @return the number of bytes written    */
DECL|method|calcUTF16toUTF8Length
specifier|public
specifier|static
name|int
name|calcUTF16toUTF8Length
parameter_list|(
name|CharSequence
name|s
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|final
name|int
name|end
init|=
name|offset
operator|+
name|len
decl_stmt|;
name|int
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|code
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|<
literal|0x80
condition|)
name|res
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
name|code
operator|<
literal|0x800
condition|)
block|{
name|res
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
argument_list|<
literal|0xD800
operator|||
name|code
argument_list|>
literal|0xDFFF
condition|)
block|{
name|res
operator|+=
literal|3
expr_stmt|;
block|}
else|else
block|{
comment|// surrogate pair
comment|// confirm valid high surrogate
if|if
condition|(
name|code
operator|<
literal|0xDC00
operator|&&
operator|(
name|i
operator|<
name|end
operator|-
literal|1
operator|)
condition|)
block|{
name|int
name|utf32
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// confirm valid low surrogate and write pair
if|if
condition|(
name|utf32
operator|>=
literal|0xDC00
operator|&&
name|utf32
operator|<=
literal|0xDFFF
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|res
operator|+=
literal|4
expr_stmt|;
continue|continue;
block|}
block|}
name|res
operator|+=
literal|3
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
block|}
end_class
end_unit
