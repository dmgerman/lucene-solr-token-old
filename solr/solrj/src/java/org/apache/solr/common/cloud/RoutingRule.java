begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONUtil
import|;
end_import
begin_comment
comment|/**  * Used for routing docs with particular keys into another collection  */
end_comment
begin_class
DECL|class|RoutingRule
specifier|public
class|class
name|RoutingRule
extends|extends
name|ZkNodeProps
block|{
DECL|field|routeRanges
specifier|private
specifier|final
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|routeRanges
decl_stmt|;
DECL|field|routeRangesStr
specifier|private
specifier|final
name|String
name|routeRangesStr
decl_stmt|;
DECL|field|targetCollectionName
specifier|private
specifier|final
name|String
name|targetCollectionName
decl_stmt|;
DECL|field|expireAt
specifier|private
specifier|final
name|Long
name|expireAt
decl_stmt|;
DECL|method|RoutingRule
specifier|public
name|RoutingRule
parameter_list|(
name|String
name|routeKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
parameter_list|)
block|{
name|super
argument_list|(
name|propMap
argument_list|)
expr_stmt|;
name|this
operator|.
name|routeRangesStr
operator|=
operator|(
name|String
operator|)
name|propMap
operator|.
name|get
argument_list|(
literal|"routeRanges"
argument_list|)
expr_stmt|;
name|String
index|[]
name|rangesArr
init|=
name|this
operator|.
name|routeRangesStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangesArr
operator|!=
literal|null
operator|&&
name|rangesArr
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|routeRanges
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|r
range|:
name|rangesArr
control|)
block|{
name|routeRanges
operator|.
name|add
argument_list|(
name|DocRouter
operator|.
name|DEFAULT
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|routeRanges
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|targetCollectionName
operator|=
operator|(
name|String
operator|)
name|propMap
operator|.
name|get
argument_list|(
literal|"targetCollection"
argument_list|)
expr_stmt|;
name|this
operator|.
name|expireAt
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|propMap
operator|.
name|get
argument_list|(
literal|"expireAt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouteRanges
specifier|public
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|getRouteRanges
parameter_list|()
block|{
return|return
name|routeRanges
return|;
block|}
DECL|method|getTargetCollectionName
specifier|public
name|String
name|getTargetCollectionName
parameter_list|()
block|{
return|return
name|targetCollectionName
return|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"For currentTimeMillis, expiry time depends on external data (should it?)"
argument_list|)
DECL|method|makeExpiryAt
specifier|public
specifier|static
name|String
name|makeExpiryAt
parameter_list|(
name|long
name|timeMsFromNow
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeMsFromNow
argument_list|)
return|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"For currentTimeMillis, expiry time depends on external data (should it?)"
argument_list|)
DECL|method|isExpired
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
return|return
operator|(
name|expireAt
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|)
return|;
block|}
DECL|method|getRouteRangesStr
specifier|public
name|String
name|getRouteRangesStr
parameter_list|()
block|{
return|return
name|routeRangesStr
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|propMap
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
end_class
end_unit
