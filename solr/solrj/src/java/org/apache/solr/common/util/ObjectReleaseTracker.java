begin_unit
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|ObjectReleaseTracker
specifier|public
class|class
name|ObjectReleaseTracker
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|OBJECTS
specifier|public
specifier|static
name|Map
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|OBJECTS
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|track
specifier|public
specifier|static
name|boolean
name|track
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
operator|new
name|ObjectTrackerException
argument_list|()
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|OBJECTS
operator|.
name|put
argument_list|(
name|object
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|release
specifier|public
specifier|static
name|boolean
name|release
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|OBJECTS
operator|.
name|remove
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|clear
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|OBJECTS
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return null if ok else error message    */
DECL|method|clearObjectTrackerAndCheckEmpty
specifier|public
specifier|static
name|String
name|clearObjectTrackerAndCheckEmpty
parameter_list|()
block|{
name|String
name|result
init|=
name|checkEmpty
argument_list|()
decl_stmt|;
name|OBJECTS
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @return null if ok else error message    */
DECL|method|checkEmpty
specifier|public
specifier|static
name|String
name|checkEmpty
parameter_list|()
block|{
name|String
name|error
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|OBJECTS
operator|.
name|entrySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|error
operator|=
literal|"ObjectTracker found "
operator|+
name|entries
operator|.
name|size
argument_list|()
operator|+
literal|" object(s) that were not released!!! "
operator|+
name|objects
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|error
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|error
return|;
block|}
DECL|method|tryClose
specifier|public
specifier|static
name|void
name|tryClose
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|OBJECTS
operator|.
name|entrySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|instanceof
name|ExecutorService
condition|)
block|{
try|try
block|{
name|ExecutorUtil
operator|.
name|shutdownAndAwaitTermination
argument_list|(
operator|(
name|ExecutorService
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|ObjectTrackerException
specifier|private
specifier|static
class|class
name|ObjectTrackerException
extends|extends
name|RuntimeException
block|{        }
block|}
end_class
end_unit
