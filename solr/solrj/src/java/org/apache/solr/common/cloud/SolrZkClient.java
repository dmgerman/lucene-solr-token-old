begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkClientConnectionStrategy
operator|.
name|ZkUpdate
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ObjectReleaseTracker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SolrjNamedThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NotEmptyException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_comment
comment|/**  *   * All Solr ZooKeeper interactions should go through this class rather than  * ZooKeeper. This class handles synchronous connects and reconnections.  *  */
end_comment
begin_class
DECL|class|SolrZkClient
specifier|public
class|class
name|SolrZkClient
implements|implements
name|Closeable
block|{
DECL|field|NEWL
specifier|static
specifier|final
name|String
name|NEWL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_CLIENT_CONNECT_TIMEOUT
specifier|static
specifier|final
name|int
name|DEFAULT_CLIENT_CONNECT_TIMEOUT
init|=
literal|30000
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrZkClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connManager
specifier|private
name|ConnectionManager
name|connManager
decl_stmt|;
DECL|field|keeper
specifier|private
specifier|volatile
name|SolrZooKeeper
name|keeper
decl_stmt|;
DECL|field|zkCmdExecutor
specifier|private
name|ZkCmdExecutor
name|zkCmdExecutor
decl_stmt|;
DECL|field|zkCallbackExecutor
specifier|private
specifier|final
name|ExecutorService
name|zkCallbackExecutor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"zkCallback"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|volatile
name|boolean
name|isClosed
init|=
literal|false
decl_stmt|;
DECL|field|zkClientConnectionStrategy
specifier|private
name|ZkClientConnectionStrategy
name|zkClientConnectionStrategy
decl_stmt|;
DECL|field|zkClientTimeout
specifier|private
name|int
name|zkClientTimeout
decl_stmt|;
DECL|field|zkACLProvider
specifier|private
name|ZkACLProvider
name|zkACLProvider
decl_stmt|;
DECL|field|zkServerAddress
specifier|private
name|String
name|zkServerAddress
decl_stmt|;
DECL|method|getZkClientTimeout
specifier|public
name|int
name|getZkClientTimeout
parameter_list|()
block|{
return|return
name|zkClientTimeout
return|;
block|}
comment|// expert: for tests
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|()
block|{        }
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|)
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
operator|new
name|DefaultConnectionStrategy
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|zkClientConnectTimeout
parameter_list|)
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|zkClientConnectTimeout
argument_list|,
operator|new
name|DefaultConnectionStrategy
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|zkClientConnectTimeout
parameter_list|,
name|OnReconnect
name|onReonnect
parameter_list|)
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|zkClientConnectTimeout
argument_list|,
operator|new
name|DefaultConnectionStrategy
argument_list|()
argument_list|,
name|onReonnect
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|ZkClientConnectionStrategy
name|strat
parameter_list|,
specifier|final
name|OnReconnect
name|onReconnect
parameter_list|)
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|DEFAULT_CLIENT_CONNECT_TIMEOUT
argument_list|,
name|strat
argument_list|,
name|onReconnect
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|clientConnectTimeout
parameter_list|,
name|ZkClientConnectionStrategy
name|strat
parameter_list|,
specifier|final
name|OnReconnect
name|onReconnect
parameter_list|)
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|clientConnectTimeout
argument_list|,
name|strat
argument_list|,
name|onReconnect
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|clientConnectTimeout
parameter_list|,
name|ZkClientConnectionStrategy
name|strat
parameter_list|,
specifier|final
name|OnReconnect
name|onReconnect
parameter_list|,
name|BeforeReconnect
name|beforeReconnect
parameter_list|)
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|clientConnectTimeout
argument_list|,
name|strat
argument_list|,
name|onReconnect
argument_list|,
name|beforeReconnect
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|clientConnectTimeout
parameter_list|,
name|ZkClientConnectionStrategy
name|strat
parameter_list|,
specifier|final
name|OnReconnect
name|onReconnect
parameter_list|,
name|BeforeReconnect
name|beforeReconnect
parameter_list|,
name|ZkACLProvider
name|zkACLProvider
parameter_list|)
block|{
name|this
operator|.
name|zkClientConnectionStrategy
operator|=
name|strat
expr_stmt|;
name|this
operator|.
name|zkServerAddress
operator|=
name|zkServerAddress
expr_stmt|;
if|if
condition|(
name|strat
operator|==
literal|null
condition|)
block|{
name|strat
operator|=
operator|new
name|DefaultConnectionStrategy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|strat
operator|.
name|hasZkCredentialsToAddAutomatically
argument_list|()
condition|)
block|{
name|ZkCredentialsProvider
name|zkCredentialsToAddAutomatically
init|=
name|createZkCredentialsToAddAutomatically
argument_list|()
decl_stmt|;
name|strat
operator|.
name|setZkCredentialsToAddAutomatically
argument_list|(
name|zkCredentialsToAddAutomatically
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|zkClientTimeout
operator|=
name|zkClientTimeout
expr_stmt|;
comment|// we must retry at least as long as the session timeout
name|zkCmdExecutor
operator|=
operator|new
name|ZkCmdExecutor
argument_list|(
name|zkClientTimeout
argument_list|)
expr_stmt|;
name|connManager
operator|=
operator|new
name|ConnectionManager
argument_list|(
literal|"ZooKeeperConnection Watcher:"
operator|+
name|zkServerAddress
argument_list|,
name|this
argument_list|,
name|zkServerAddress
argument_list|,
name|strat
argument_list|,
name|onReconnect
argument_list|,
name|beforeReconnect
argument_list|)
expr_stmt|;
try|try
block|{
name|strat
operator|.
name|connect
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|wrapWatcher
argument_list|(
name|connManager
argument_list|)
argument_list|,
operator|new
name|ZkUpdate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|SolrZooKeeper
name|zooKeeper
parameter_list|)
block|{
name|SolrZooKeeper
name|oldKeeper
init|=
name|keeper
decl_stmt|;
name|keeper
operator|=
name|zooKeeper
expr_stmt|;
try|try
block|{
name|closeKeeper
argument_list|(
name|oldKeeper
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
comment|// we may have been closed
name|closeKeeper
argument_list|(
name|SolrZkClient
operator|.
name|this
operator|.
name|keeper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|connManager
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|keeper
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|keeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|connManager
operator|.
name|waitForConnected
argument_list|(
name|clientConnectTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|connManager
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|keeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
assert|assert
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|this
argument_list|)
assert|;
if|if
condition|(
name|zkACLProvider
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|zkACLProvider
operator|=
name|createZkACLProvider
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|zkACLProvider
operator|=
name|zkACLProvider
expr_stmt|;
block|}
block|}
DECL|method|getConnectionManager
specifier|public
name|ConnectionManager
name|getConnectionManager
parameter_list|()
block|{
return|return
name|connManager
return|;
block|}
DECL|method|getZkClientConnectionStrategy
specifier|public
name|ZkClientConnectionStrategy
name|getZkClientConnectionStrategy
parameter_list|()
block|{
return|return
name|zkClientConnectionStrategy
return|;
block|}
DECL|field|ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME
init|=
literal|"zkCredentialsProvider"
decl_stmt|;
DECL|method|createZkCredentialsToAddAutomatically
specifier|protected
name|ZkCredentialsProvider
name|createZkCredentialsToAddAutomatically
parameter_list|()
block|{
name|String
name|zkCredentialsProviderClassName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|zkCredentialsProviderClassName
argument_list|)
condition|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using ZkCredentialsProvider: "
operator|+
name|zkCredentialsProviderClassName
argument_list|)
expr_stmt|;
return|return
operator|(
name|ZkCredentialsProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|zkCredentialsProviderClassName
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// just ignore - go default
name|log
operator|.
name|warn
argument_list|(
literal|"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Using default ZkCredentialsProvider"
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultZkCredentialsProvider
argument_list|()
return|;
block|}
DECL|field|ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME
init|=
literal|"zkACLProvider"
decl_stmt|;
DECL|method|createZkACLProvider
specifier|protected
name|ZkACLProvider
name|createZkACLProvider
parameter_list|()
block|{
name|String
name|zkACLProviderClassName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|zkACLProviderClassName
argument_list|)
condition|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using ZkACLProvider: "
operator|+
name|zkACLProviderClassName
argument_list|)
expr_stmt|;
return|return
operator|(
name|ZkACLProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|zkACLProviderClassName
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// just ignore - go default
name|log
operator|.
name|warn
argument_list|(
literal|"VM param zkACLProvider does not point to a class implementing ZkACLProvider and with a non-arg constructor"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Using default ZkACLProvider"
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultZkACLProvider
argument_list|()
return|;
block|}
comment|/**    * Returns true if client is connected    */
DECL|method|isConnected
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|keeper
operator|!=
literal|null
operator|&&
name|keeper
operator|.
name|getState
argument_list|()
operator|==
name|ZooKeeper
operator|.
name|States
operator|.
name|CONNECTED
return|;
block|}
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|int
name|version
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
if|if
condition|(
name|retryOnConnLoss
condition|)
block|{
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Stat
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|keeper
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keeper
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|wrapWatcher
specifier|private
name|Watcher
name|wrapWatcher
parameter_list|(
specifier|final
name|Watcher
name|watcher
parameter_list|)
block|{
if|if
condition|(
name|watcher
operator|==
literal|null
condition|)
return|return
name|watcher
return|;
comment|// wrap the watcher so that it doesn't fire off ZK's event queue
return|return
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|WatchedEvent
name|event
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Submitting job to respond to event "
operator|+
name|event
argument_list|)
expr_stmt|;
name|zkCallbackExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|watcher
operator|.
name|process
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Return the stat of the node of the given path. Return null if no such a    * node exists.    *<p>    * If the watch is non-null and the call is successful (no exception is thrown),    * a watch will be left on the node with the given path. The watch will be    * triggered by a successful operation that creates/delete the node or sets    * the data on the node.    *    * @param path the node path    * @param watcher explicit watcher    * @return the stat of the node of the given path; return null if no such a    *         node exists.    * @throws KeeperException If the server signals an error    * @throws InterruptedException If the server transaction is interrupted.    * @throws IllegalArgumentException if an invalid path is specified    */
DECL|method|exists
specifier|public
name|Stat
name|exists
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Watcher
name|watcher
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|retryOnConnLoss
condition|)
block|{
return|return
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Stat
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
name|wrapWatcher
argument_list|(
name|watcher
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|keeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
name|wrapWatcher
argument_list|(
name|watcher
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns true if path exists    */
DECL|method|exists
specifier|public
name|Boolean
name|exists
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|retryOnConnLoss
condition|)
block|{
return|return
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|keeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
comment|/**    * Returns children of the node at the path    */
DECL|method|getChildren
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getChildren
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Watcher
name|watcher
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|retryOnConnLoss
condition|)
block|{
return|return
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
name|wrapWatcher
argument_list|(
name|watcher
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|keeper
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
name|wrapWatcher
argument_list|(
name|watcher
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns node's data    */
DECL|method|getData
specifier|public
name|byte
index|[]
name|getData
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Watcher
name|watcher
parameter_list|,
specifier|final
name|Stat
name|stat
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|retryOnConnLoss
condition|)
block|{
return|return
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|wrapWatcher
argument_list|(
name|watcher
argument_list|)
argument_list|,
name|stat
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|keeper
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|wrapWatcher
argument_list|(
name|watcher
argument_list|)
argument_list|,
name|stat
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns node's state    */
DECL|method|setData
specifier|public
name|Stat
name|setData
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
name|data
index|[]
parameter_list|,
specifier|final
name|int
name|version
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|retryOnConnLoss
condition|)
block|{
return|return
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Stat
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|keeper
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns path of created node    */
DECL|method|create
specifier|public
name|String
name|create
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|CreateMode
name|createMode
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|retryOnConnLoss
condition|)
block|{
return|return
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|zkACLProvider
operator|.
name|getACLsToAdd
argument_list|(
name|path
argument_list|)
argument_list|,
name|createMode
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
init|=
name|zkACLProvider
operator|.
name|getACLsToAdd
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|keeper
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|acls
argument_list|,
name|createMode
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * e.g. If<code>path=/solr/group/node</code> and none of the nodes, solr,    * group, node exist, each will be created.    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|failOnExists
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|,
name|failOnExists
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file
parameter_list|,
name|boolean
name|failOnExists
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|file
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|,
name|failOnExists
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|file
argument_list|)
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|createMode
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * @param data to set on the last zkNode    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * e.g. If<code>path=/solr/group/node</code> and none of the nodes, solr,    * group, node exist, each will be created.    *     * @param data to set on the last zkNode    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|createMode
argument_list|,
literal|null
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * e.g. If<code>path=/solr/group/node</code> and none of the nodes, solr,    * group, node exist, each will be created.    *     * @param data to set on the last zkNode    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|Watcher
name|watcher
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|createMode
argument_list|,
name|watcher
argument_list|,
literal|true
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * e.g. If<code>path=/solr/group/node</code> and none of the nodes, solr,    * group, node exist, each will be created.    *     * Note: retryOnConnLoss is only respected for the final node - nodes    * before that are always retried on connection loss.    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|Watcher
name|watcher
parameter_list|,
name|boolean
name|failOnExists
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"makePath: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|boolean
name|retry
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|path
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|paths
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sbPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
name|String
name|pathPiece
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
name|sbPath
operator|.
name|append
argument_list|(
literal|"/"
operator|+
name|pathPiece
argument_list|)
expr_stmt|;
specifier|final
name|String
name|currentPath
init|=
name|sbPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|exists
init|=
name|exists
argument_list|(
name|currentPath
argument_list|,
name|watcher
argument_list|,
name|retryOnConnLoss
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
operator|==
literal|null
operator|||
operator|(
operator|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
operator|)
operator|&&
name|failOnExists
operator|)
condition|)
block|{
name|CreateMode
name|mode
init|=
name|CreateMode
operator|.
name|PERSISTENT
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|mode
operator|=
name|createMode
expr_stmt|;
name|bytes
operator|=
name|data
expr_stmt|;
if|if
condition|(
operator|!
name|retryOnConnLoss
condition|)
name|retry
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|retry
condition|)
block|{
specifier|final
name|CreateMode
name|finalMode
init|=
name|mode
decl_stmt|;
specifier|final
name|byte
index|[]
name|finalBytes
init|=
name|bytes
decl_stmt|;
name|zkCmdExecutor
operator|.
name|retryOperation
argument_list|(
operator|new
name|ZkOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|keeper
operator|.
name|create
argument_list|(
name|currentPath
argument_list|,
name|finalBytes
argument_list|,
name|zkACLProvider
operator|.
name|getACLsToAdd
argument_list|(
name|currentPath
argument_list|)
argument_list|,
name|finalMode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keeper
operator|.
name|create
argument_list|(
name|currentPath
argument_list|,
name|bytes
argument_list|,
name|zkACLProvider
operator|.
name|getACLsToAdd
argument_list|(
name|currentPath
argument_list|)
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|failOnExists
condition|)
block|{
comment|// TODO: version ? for now, don't worry about race
name|setData
argument_list|(
name|currentPath
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
comment|// set new watch
name|exists
argument_list|(
name|currentPath
argument_list|,
name|watcher
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// ignore unless it's the last node in the path
if|if
condition|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// set new watch
name|exists
argument_list|(
name|currentPath
argument_list|,
name|watcher
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// TODO: version ? for now, don't worry about race
name|setData
argument_list|(
name|currentPath
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
comment|// set new watch
name|exists
argument_list|(
name|currentPath
argument_list|,
name|watcher
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|zkPath
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|Watcher
name|watcher
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
name|createMode
argument_list|,
name|watcher
argument_list|,
name|retryOnConnLoss
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write data to ZooKeeper.    */
DECL|method|setData
specifier|public
name|Stat
name|setData
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|,
name|retryOnConnLoss
argument_list|)
return|;
block|}
comment|/**    * Write file to ZooKeeper - default system encoding used.    *     * @param path path to upload file to e.g. /solr/conf/solrconfig.xml    * @param file path to file to be uploaded    */
DECL|method|setData
specifier|public
name|Stat
name|setData
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Write to ZooKeepeer "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" to "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|retryOnConnLoss
argument_list|)
return|;
block|}
comment|/**    * Fills string with printout of current ZooKeeper layout.    */
DECL|method|printLayout
specifier|public
name|void
name|printLayout
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|indent
parameter_list|,
name|StringBuilder
name|string
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|getChildren
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|StringBuilder
name|dent
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
name|i
operator|++
control|)
block|{
name|dent
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|string
operator|.
name|append
argument_list|(
name|dent
operator|+
name|path
operator|+
literal|" ("
operator|+
name|children
operator|.
name|size
argument_list|()
operator|+
literal|")"
operator|+
name|NEWL
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|String
name|dataString
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|".txt"
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
operator|)
operator|||
name|path
operator|.
name|endsWith
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_STATE
argument_list|)
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
comment|// this is the cluster state in xml format - lets pretty print
name|dataString
operator|=
name|prettyPrint
argument_list|(
name|dataString
argument_list|)
expr_stmt|;
block|}
name|string
operator|.
name|append
argument_list|(
name|dent
operator|+
literal|"DATA:\n"
operator|+
name|dent
operator|+
literal|"    "
operator|+
name|dataString
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\n"
operator|+
name|dent
operator|+
literal|"    "
argument_list|)
operator|+
name|NEWL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|string
operator|.
name|append
argument_list|(
name|dent
operator|+
literal|"DATA: ...supressed..."
operator|+
name|NEWL
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|equals
argument_list|(
literal|"quota"
argument_list|)
condition|)
block|{
try|try
block|{
name|printLayout
argument_list|(
name|path
operator|+
operator|(
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|+
name|child
argument_list|,
name|indent
operator|+
literal|1
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// must have gone away
block|}
block|}
block|}
block|}
comment|/**    * Prints current ZooKeeper layout to stdout.    */
DECL|method|printLayoutToStdOut
specifier|public
name|void
name|printLayoutToStdOut
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|printLayout
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|prettyPrint
specifier|public
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
try|try
block|{
name|Source
name|xmlInput
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|xmlOutput
init|=
operator|new
name|StreamResult
argument_list|(
name|stringWriter
argument_list|)
decl_stmt|;
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|transformerFactory
operator|.
name|setAttribute
argument_list|(
literal|"indent-number"
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|Transformer
name|transformer
init|=
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|xmlInput
argument_list|,
name|xmlOutput
argument_list|)
expr_stmt|;
return|return
name|xmlOutput
operator|.
name|getWriter
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem pretty printing XML"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|prettyPrint
specifier|private
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|prettyPrint
argument_list|(
name|input
argument_list|,
literal|2
argument_list|)
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|isClosed
condition|)
return|return;
comment|// it's okay if we over close - same as solrcore
name|isClosed
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|closeKeeper
argument_list|(
name|keeper
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connManager
operator|.
name|close
argument_list|()
expr_stmt|;
name|closeCallbackExecutor
argument_list|()
expr_stmt|;
block|}
assert|assert
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
name|this
argument_list|)
assert|;
block|}
DECL|method|isClosed
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|isClosed
return|;
block|}
comment|/**    * Allows package private classes to update volatile ZooKeeper.    */
DECL|method|updateKeeper
name|void
name|updateKeeper
parameter_list|(
name|SolrZooKeeper
name|keeper
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|SolrZooKeeper
name|oldKeeper
init|=
name|this
operator|.
name|keeper
decl_stmt|;
name|this
operator|.
name|keeper
operator|=
name|keeper
expr_stmt|;
if|if
condition|(
name|oldKeeper
operator|!=
literal|null
condition|)
block|{
name|oldKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// we might have been closed already
if|if
condition|(
name|isClosed
condition|)
name|this
operator|.
name|keeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getSolrZooKeeper
specifier|public
name|SolrZooKeeper
name|getSolrZooKeeper
parameter_list|()
block|{
return|return
name|keeper
return|;
block|}
DECL|method|closeKeeper
specifier|private
name|void
name|closeKeeper
parameter_list|(
name|SolrZooKeeper
name|keeper
parameter_list|)
block|{
if|if
condition|(
name|keeper
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|keeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|closeCallbackExecutor
specifier|private
name|void
name|closeCallbackExecutor
parameter_list|()
block|{
try|try
block|{
name|ExecutorUtil
operator|.
name|shutdownAndAwaitTermination
argument_list|(
name|zkCallbackExecutor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// yeah, it's recursive :(
DECL|method|clean
specifier|public
name|void
name|clean
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
decl_stmt|;
try|try
block|{
name|children
operator|=
name|getChildren
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|r
parameter_list|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|string
range|:
name|children
control|)
block|{
comment|// we can't clean the built-in zookeeper node
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|string
operator|.
name|equals
argument_list|(
literal|"zookeeper"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|clean
argument_list|(
name|path
operator|+
name|string
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clean
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|string
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
try|try
block|{
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotEmptyException
name|e
parameter_list|)
block|{
name|clean
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|r
parameter_list|)
block|{
return|return;
block|}
block|}
comment|/**    * Validates if zkHost contains a chroot. See http://zookeeper.apache.org/doc/r3.2.2/zookeeperProgrammers.html#ch_zkSessions    */
DECL|method|containsChroot
specifier|public
specifier|static
name|boolean
name|containsChroot
parameter_list|(
name|String
name|zkHost
parameter_list|)
block|{
return|return
name|zkHost
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
comment|/**    * Check to see if a Throwable is an InterruptedException, and if it is, set the thread interrupt flag    * @param e the Throwable    * @return the Throwable    */
DECL|method|checkInterrupted
specifier|public
specifier|static
name|Throwable
name|checkInterrupted
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
block|}
end_class
end_unit
