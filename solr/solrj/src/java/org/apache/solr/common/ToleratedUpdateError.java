begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_comment
comment|/**  * Models the basic information related to a single "tolerated" error that occured during updates.    * This class is only useful when the<code>ToleranteUpdateProcessorFactory</code> is used in an update   * processor chain  */
end_comment
begin_class
DECL|class|ToleratedUpdateError
specifier|public
specifier|final
class|class
name|ToleratedUpdateError
block|{
DECL|field|META_PRE
specifier|private
specifier|final
specifier|static
name|String
name|META_PRE
init|=
name|ToleratedUpdateError
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"--"
decl_stmt|;
DECL|field|META_PRE_LEN
specifier|private
specifier|final
specifier|static
name|int
name|META_PRE_LEN
init|=
name|META_PRE
operator|.
name|length
argument_list|()
decl_stmt|;
comment|/**    * Given a 'maxErrors' value such that<code>-1&lt;= maxErrors&lt;= {@link Integer#MAX_VALUE}</code>     * this method returns the original input unless it is<code>-1</code> in which case the effective value of    * {@link Integer#MAX_VALUE}  is returned.    * Input of<code>maxErrors&lt; -1</code> will trip an assertion and otherwise have undefined behavior.    * @see #getUserFriendlyMaxErrors    */
DECL|method|getEffectiveMaxErrors
specifier|public
specifier|static
name|int
name|getEffectiveMaxErrors
parameter_list|(
name|int
name|maxErrors
parameter_list|)
block|{
assert|assert
operator|-
literal|1
operator|<=
name|maxErrors
assert|;
return|return
operator|-
literal|1
operator|==
name|maxErrors
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxErrors
return|;
block|}
comment|/**    * Given a 'maxErrors' value such that<code>-1&lt;= maxErrors&lt;= {@link Integer#MAX_VALUE}</code>     * this method returns the original input unless it is {@link Integer#MAX_VALUE} in which case     *<code>-1</code> is returned for user convinience.    * Input of<code>maxErrors&lt; -1</code> will trip an assertion and otherwise have undefined behavior.    * @see #getEffectiveMaxErrors    */
DECL|method|getUserFriendlyMaxErrors
specifier|public
specifier|static
name|int
name|getUserFriendlyMaxErrors
parameter_list|(
name|int
name|maxErrors
parameter_list|)
block|{
assert|assert
operator|-
literal|1
operator|<=
name|maxErrors
assert|;
return|return
name|Integer
operator|.
name|MAX_VALUE
operator|==
name|maxErrors
condition|?
operator|-
literal|1
else|:
name|maxErrors
return|;
block|}
comment|/**     * returns a list of maps of simple objects suitable for putting in a SolrQueryResponse header     * @see #getSimpleMap    * @see #parseMap    */
DECL|method|formatForResponseHeader
specifier|public
specifier|static
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|>
name|formatForResponseHeader
parameter_list|(
name|List
argument_list|<
name|ToleratedUpdateError
argument_list|>
name|errs
parameter_list|)
block|{
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|errs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ToleratedUpdateError
name|e
range|:
name|errs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|e
operator|.
name|getSimpleMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**     * returns a ToleratedUpdateError instance from the data in this Map     * @see #getSimpleMap    */
DECL|method|parseMap
specifier|public
specifier|static
name|ToleratedUpdateError
name|parseMap
parameter_list|(
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
name|data
parameter_list|)
block|{
specifier|final
name|String
name|id
init|=
name|data
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|message
init|=
name|data
operator|.
name|get
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|t
init|=
name|data
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|t
operator|||
literal|null
operator|==
name|id
operator|||
literal|null
operator|==
name|message
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Map does not represent a ToleratedUpdateError, must contain 'type', 'id', and 'message'"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|valueOf
argument_list|(
name|t
argument_list|)
argument_list|,
name|id
argument_list|,
name|message
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid type for ToleratedUpdateError: "
operator|+
name|t
argument_list|,
name|iae
argument_list|)
throw|;
block|}
block|}
comment|/**     * returns a ToleratedUpdateError instance if this metadataKey is one we care about, else null     * @see #getMetadataKey    * @see #getMetadataValue    */
DECL|method|parseMetadataIfToleratedUpdateError
specifier|public
specifier|static
name|ToleratedUpdateError
name|parseMetadataIfToleratedUpdateError
parameter_list|(
name|String
name|metadataKey
parameter_list|,
name|String
name|metadataVal
parameter_list|)
block|{
if|if
condition|(
operator|!
name|metadataKey
operator|.
name|startsWith
argument_list|(
name|META_PRE
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|// not a key we care about
block|}
specifier|final
name|int
name|typeEnd
init|=
name|metadataKey
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|,
name|META_PRE_LEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeEnd
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// has our prefix, but not our format -- must not be a key we (actually) care about
block|}
return|return
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|valueOf
argument_list|(
name|metadataKey
operator|.
name|substring
argument_list|(
name|META_PRE_LEN
argument_list|,
name|typeEnd
argument_list|)
argument_list|)
argument_list|,
name|metadataKey
operator|.
name|substring
argument_list|(
name|typeEnd
operator|+
literal|1
argument_list|)
argument_list|,
name|metadataVal
argument_list|)
return|;
block|}
DECL|field|type
specifier|private
specifier|final
name|CmdType
name|type
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
DECL|method|ToleratedUpdateError
specifier|public
name|ToleratedUpdateError
parameter_list|(
name|CmdType
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|message
parameter_list|)
block|{
assert|assert
literal|null
operator|!=
name|type
assert|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
assert|assert
literal|null
operator|!=
name|id
assert|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
assert|assert
literal|null
operator|!=
name|message
assert|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
DECL|method|getType
specifier|public
name|CmdType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
comment|/**    * returns a string suitable for use as a key in {@link SolrException#setMetadata}    *    * @see #parseMetadataIfToleratedUpdateError    */
DECL|method|getMetadataKey
specifier|public
name|String
name|getMetadataKey
parameter_list|()
block|{
return|return
name|META_PRE
operator|+
name|type
operator|+
literal|":"
operator|+
name|id
return|;
block|}
comment|/**    * returns a string suitable for use as a value in {@link SolrException#setMetadata}    *    * @see #parseMetadataIfToleratedUpdateError    */
DECL|method|getMetadataValue
specifier|public
name|String
name|getMetadataValue
parameter_list|()
block|{
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**     * returns a map of simple objects suitable for putting in a SolrQueryResponse header     * @see #formatForResponseHeader    * @see #parseMap    */
DECL|method|getSimpleMap
specifier|public
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
name|getSimpleMap
parameter_list|()
block|{
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
name|entry
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getMetadataKey
argument_list|()
operator|+
literal|"=>"
operator|+
name|getMetadataValue
argument_list|()
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
name|h
operator|*
literal|31
operator|+
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|=
name|h
operator|*
literal|31
operator|+
name|id
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|=
name|h
operator|*
literal|31
operator|+
name|message
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|ToleratedUpdateError
condition|)
block|{
name|ToleratedUpdateError
name|that
init|=
operator|(
name|ToleratedUpdateError
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|type
operator|.
name|equals
argument_list|(
name|this
operator|.
name|type
argument_list|)
operator|&&
name|that
operator|.
name|id
operator|.
name|equals
argument_list|(
name|this
operator|.
name|id
argument_list|)
operator|&&
name|that
operator|.
name|message
operator|.
name|equals
argument_list|(
name|this
operator|.
name|message
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Helper class for dealing with SolrException metadata (String) keys     */
DECL|enum|CmdType
specifier|public
specifier|static
enum|enum
name|CmdType
block|{
DECL|enum constant|ADD
DECL|enum constant|DELID
DECL|enum constant|DELQ
name|ADD
block|,
name|DELID
block|,
name|DELQ
block|;
comment|// if we add support for things like commit, parsing/toString/hashCode logic
comment|// needs to be smarter to account for 'id' being null ... "usesId" should be a prop of enum instances
block|}
block|}
end_class
end_unit
