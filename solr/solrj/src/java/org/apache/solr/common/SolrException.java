begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharArrayWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_comment
comment|/**  *  */
end_comment
begin_class
DECL|class|SolrException
specifier|public
class|class
name|SolrException
extends|extends
name|RuntimeException
block|{
comment|/**    * @since solr 1.2    */
DECL|enum|ErrorCode
specifier|public
enum|enum
name|ErrorCode
block|{
DECL|enum constant|BAD_REQUEST
name|BAD_REQUEST
argument_list|(
literal|400
argument_list|)
block|,
DECL|enum constant|UNAUTHORIZED
name|UNAUTHORIZED
argument_list|(
literal|401
argument_list|)
block|,
DECL|enum constant|FORBIDDEN
name|FORBIDDEN
argument_list|(
literal|403
argument_list|)
block|,
DECL|enum constant|NOT_FOUND
name|NOT_FOUND
argument_list|(
literal|404
argument_list|)
block|,
DECL|enum constant|CONFLICT
name|CONFLICT
argument_list|(
literal|409
argument_list|)
block|,
DECL|enum constant|SERVER_ERROR
name|SERVER_ERROR
argument_list|(
literal|500
argument_list|)
block|,
DECL|enum constant|SERVICE_UNAVAILABLE
name|SERVICE_UNAVAILABLE
argument_list|(
literal|503
argument_list|)
block|,
DECL|enum constant|UNKNOWN
name|UNKNOWN
argument_list|(
literal|0
argument_list|)
block|;
DECL|field|code
specifier|public
specifier|final
name|int
name|code
decl_stmt|;
DECL|method|ErrorCode
specifier|private
name|ErrorCode
parameter_list|(
name|int
name|c
parameter_list|)
block|{
name|code
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getErrorCode
specifier|public
specifier|static
name|ErrorCode
name|getErrorCode
parameter_list|(
name|int
name|c
parameter_list|)
block|{
for|for
control|(
name|ErrorCode
name|err
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|err
operator|.
name|code
operator|==
name|c
condition|)
return|return
name|err
return|;
block|}
return|return
name|UNKNOWN
return|;
block|}
block|}
empty_stmt|;
DECL|method|SolrException
specifier|public
name|SolrException
parameter_list|(
name|ErrorCode
name|code
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|code
operator|=
name|code
operator|.
name|code
expr_stmt|;
block|}
DECL|method|SolrException
specifier|public
name|SolrException
parameter_list|(
name|ErrorCode
name|code
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|th
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|this
operator|.
name|code
operator|=
name|code
operator|.
name|code
expr_stmt|;
block|}
DECL|method|SolrException
specifier|public
name|SolrException
parameter_list|(
name|ErrorCode
name|code
parameter_list|,
name|Throwable
name|th
parameter_list|)
block|{
name|super
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|this
operator|.
name|code
operator|=
name|code
operator|.
name|code
expr_stmt|;
block|}
DECL|field|code
name|int
name|code
init|=
literal|0
decl_stmt|;
DECL|method|code
specifier|public
name|int
name|code
parameter_list|()
block|{
return|return
name|code
return|;
block|}
DECL|method|log
specifier|public
name|void
name|log
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|log
argument_list|(
name|log
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|log
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|Logger
name|log
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|String
name|stackTrace
init|=
name|toStr
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|String
name|ignore
init|=
name|doIgnore
argument_list|(
name|e
argument_list|,
name|stackTrace
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignore
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|ignore
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
name|stackTrace
argument_list|)
expr_stmt|;
block|}
DECL|method|log
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|Logger
name|log
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|String
name|stackTrace
init|=
name|msg
operator|+
literal|':'
operator|+
name|toStr
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|String
name|ignore
init|=
name|doIgnore
argument_list|(
name|e
argument_list|,
name|stackTrace
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignore
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|ignore
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
name|stackTrace
argument_list|)
expr_stmt|;
block|}
DECL|method|log
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|Logger
name|log
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|String
name|stackTrace
init|=
name|msg
decl_stmt|;
name|String
name|ignore
init|=
name|doIgnore
argument_list|(
literal|null
argument_list|,
name|stackTrace
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignore
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|ignore
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
name|stackTrace
argument_list|)
expr_stmt|;
block|}
comment|// public String toString() { return toStr(this); }  // oops, inf loop
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toStr
specifier|public
specifier|static
name|String
name|toStr
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|CharArrayWriter
name|cw
init|=
operator|new
name|CharArrayWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|cw
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|cw
operator|.
name|toString
argument_list|()
return|;
comment|/** This doesn't work for some reason!!!!!     StringWriter sw = new StringWriter();     PrintWriter pw = new PrintWriter(sw);     e.printStackTrace(pw);     pw.flush();     System.out.println("The STRING:" + sw.toString());     return sw.toString(); **/
block|}
comment|/** For test code - do not log exceptions that match any of the regular expressions in ignorePatterns */
DECL|field|ignorePatterns
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|ignorePatterns
decl_stmt|;
comment|/** Returns null if this exception does not match any ignore patterns, or a message string to use if it does. */
DECL|method|doIgnore
specifier|public
specifier|static
name|String
name|doIgnore
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|String
name|m
parameter_list|)
block|{
if|if
condition|(
name|ignorePatterns
operator|==
literal|null
operator|||
name|m
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|instanceof
name|AssertionError
condition|)
return|return
literal|null
return|;
for|for
control|(
name|String
name|regex
range|:
name|ignorePatterns
control|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
return|return
literal|"Ignoring exception matching "
operator|+
name|regex
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRootCause
specifier|public
specifier|static
name|Throwable
name|getRootCause
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Throwable
name|cause
init|=
name|t
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
name|cause
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|t
return|;
block|}
block|}
end_class
end_unit
