begin_unit
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_class
DECL|class|Utils
specifier|public
class|class
name|Utils
block|{
DECL|method|getDeepCopy
specifier|public
specifier|static
name|Map
name|getDeepCopy
parameter_list|(
name|Map
name|map
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
name|Map
name|copy
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
name|Object
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|Map
operator|&&
name|maxDepth
operator|>
literal|0
condition|)
block|{
name|v
operator|=
name|getDeepCopy
argument_list|(
operator|(
name|Map
operator|)
name|v
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Set
condition|)
block|{
name|v
operator|=
operator|new
name|HashSet
argument_list|(
operator|(
name|Set
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|List
condition|)
block|{
name|v
operator|=
operator|new
name|ArrayList
argument_list|(
operator|(
name|List
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
name|copy
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
comment|//
comment|// convenience methods... should these go somewhere else?
comment|//
DECL|method|toJSON
specifier|public
specifier|static
name|byte
index|[]
name|toJSON
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|JSONWriter
argument_list|(
name|out
argument_list|,
literal|2
argument_list|)
operator|.
name|write
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|// indentation by default
return|return
name|toUTF8
argument_list|(
name|out
argument_list|)
return|;
block|}
DECL|method|toJSONString
specifier|public
specifier|static
name|String
name|toJSONString
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|toJSON
argument_list|(
name|o
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
DECL|method|toUTF8
specifier|public
specifier|static
name|byte
index|[]
name|toUTF8
parameter_list|(
name|CharArr
name|out
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
name|out
operator|.
name|size
argument_list|()
operator|<<
literal|2
index|]
decl_stmt|;
comment|// is 4x the real worst-case upper-bound?
name|int
name|nBytes
init|=
name|ByteUtils
operator|.
name|UTF16toUTF8
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|,
name|arr
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|arr
argument_list|,
name|nBytes
argument_list|)
return|;
block|}
DECL|method|fromJSON
specifier|public
specifier|static
name|Object
name|fromJSON
parameter_list|(
name|byte
index|[]
name|utf8
parameter_list|)
block|{
comment|// convert directly from bytes to chars
comment|// and parse directly from that instead of going through
comment|// intermediate strings or readers
name|CharArr
name|chars
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
name|ByteUtils
operator|.
name|UTF8toUTF16
argument_list|(
name|utf8
argument_list|,
literal|0
argument_list|,
name|utf8
operator|.
name|length
argument_list|,
name|chars
argument_list|)
expr_stmt|;
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|(
name|chars
operator|.
name|getArray
argument_list|()
argument_list|,
name|chars
operator|.
name|getStart
argument_list|()
argument_list|,
name|chars
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
name|parser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
comment|// should never happen w/o using real IO
block|}
block|}
DECL|method|makeMap
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|makeMap
parameter_list|(
name|Object
modifier|...
name|keyVals
parameter_list|)
block|{
if|if
condition|(
operator|(
name|keyVals
operator|.
name|length
operator|&
literal|0x01
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"arguments should be key,value"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|keyVals
operator|.
name|length
operator|>>
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyVals
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|keyVals
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|keyVals
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|propMap
return|;
block|}
DECL|method|getObjectByPath
specifier|public
specifier|static
name|Object
name|getObjectByPath
parameter_list|(
name|Map
name|root
parameter_list|,
name|boolean
name|onlyPrimitive
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|hierarchy
parameter_list|)
block|{
name|Map
name|obj
init|=
name|root
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|hierarchy
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|instanceof
name|Map
operator|)
condition|)
return|return
literal|null
return|;
name|obj
operator|=
operator|(
name|Map
operator|)
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|null
return|;
block|}
else|else
block|{
name|Object
name|val
init|=
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlyPrimitive
operator|&&
name|val
operator|instanceof
name|Map
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|val
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
