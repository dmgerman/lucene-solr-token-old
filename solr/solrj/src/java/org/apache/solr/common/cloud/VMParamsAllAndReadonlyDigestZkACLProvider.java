begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Id
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|auth
operator|.
name|DigestAuthenticationProvider
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|VMParamsAllAndReadonlyDigestZkACLProvider
specifier|public
class|class
name|VMParamsAllAndReadonlyDigestZkACLProvider
extends|extends
name|DefaultZkACLProvider
block|{
DECL|field|DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME
init|=
literal|"zkDigestReadonlyUsername"
decl_stmt|;
DECL|field|DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME
init|=
literal|"zkDigestReadonlyPassword"
decl_stmt|;
DECL|field|zkDigestAllUsernameVMParamName
specifier|final
name|String
name|zkDigestAllUsernameVMParamName
decl_stmt|;
DECL|field|zkDigestAllPasswordVMParamName
specifier|final
name|String
name|zkDigestAllPasswordVMParamName
decl_stmt|;
DECL|field|zkDigestReadonlyUsernameVMParamName
specifier|final
name|String
name|zkDigestReadonlyUsernameVMParamName
decl_stmt|;
DECL|field|zkDigestReadonlyPasswordVMParamName
specifier|final
name|String
name|zkDigestReadonlyPasswordVMParamName
decl_stmt|;
DECL|method|VMParamsAllAndReadonlyDigestZkACLProvider
specifier|public
name|VMParamsAllAndReadonlyDigestZkACLProvider
parameter_list|()
block|{
name|this
argument_list|(
name|VMParamsSingleSetCredentialsDigestZkCredentialsProvider
operator|.
name|DEFAULT_DIGEST_USERNAME_VM_PARAM_NAME
argument_list|,
name|VMParamsSingleSetCredentialsDigestZkCredentialsProvider
operator|.
name|DEFAULT_DIGEST_PASSWORD_VM_PARAM_NAME
argument_list|,
name|DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME
argument_list|,
name|DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|VMParamsAllAndReadonlyDigestZkACLProvider
specifier|public
name|VMParamsAllAndReadonlyDigestZkACLProvider
parameter_list|(
name|String
name|zkDigestAllUsernameVMParamName
parameter_list|,
name|String
name|zkDigestAllPasswordVMParamName
parameter_list|,
name|String
name|zkDigestReadonlyUsernameVMParamName
parameter_list|,
name|String
name|zkDigestReadonlyPasswordVMParamName
parameter_list|)
block|{
name|this
operator|.
name|zkDigestAllUsernameVMParamName
operator|=
name|zkDigestAllUsernameVMParamName
expr_stmt|;
name|this
operator|.
name|zkDigestAllPasswordVMParamName
operator|=
name|zkDigestAllPasswordVMParamName
expr_stmt|;
name|this
operator|.
name|zkDigestReadonlyUsernameVMParamName
operator|=
name|zkDigestReadonlyUsernameVMParamName
expr_stmt|;
name|this
operator|.
name|zkDigestReadonlyPasswordVMParamName
operator|=
name|zkDigestReadonlyPasswordVMParamName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createGlobalACLsToAdd
specifier|protected
name|List
argument_list|<
name|ACL
argument_list|>
name|createGlobalACLsToAdd
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ACL
argument_list|>
argument_list|()
decl_stmt|;
comment|// Not to have to provide too much credentials and ACL information to the process it is assumed that you want "ALL"-acls
comment|// added to the user you are using to connect to ZK (if you are using VMParamsSingleSetCredentialsDigestZkCredentialsProvider)
name|String
name|digestAllUsername
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|zkDigestAllUsernameVMParamName
argument_list|)
decl_stmt|;
name|String
name|digestAllPassword
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|zkDigestAllPasswordVMParamName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|digestAllUsername
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|digestAllPassword
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ACL
argument_list|(
name|ZooDefs
operator|.
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"digest"
argument_list|,
name|DigestAuthenticationProvider
operator|.
name|generateDigest
argument_list|(
name|digestAllUsername
operator|+
literal|":"
operator|+
name|digestAllPassword
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Besides that support for adding additional "READONLY"-acls for another user
name|String
name|digestReadonlyUsername
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|zkDigestReadonlyUsernameVMParamName
argument_list|)
decl_stmt|;
name|String
name|digestReadonlyPassword
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|zkDigestReadonlyPasswordVMParamName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|digestReadonlyUsername
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|digestReadonlyPassword
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ACL
argument_list|(
name|ZooDefs
operator|.
name|Perms
operator|.
name|READ
argument_list|,
operator|new
name|Id
argument_list|(
literal|"digest"
argument_list|,
name|DigestAuthenticationProvider
operator|.
name|generateDigest
argument_list|(
name|digestReadonlyUsername
operator|+
literal|":"
operator|+
name|digestReadonlyPassword
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
name|super
operator|.
name|createGlobalACLsToAdd
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
