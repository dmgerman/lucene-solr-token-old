begin_unit
begin_package
DECL|package|org.apache.solr.common
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|SolrDocumentBase
specifier|public
specifier|abstract
class|class
name|SolrDocumentBase
parameter_list|<
name|T
parameter_list|,
name|K
parameter_list|>
implements|implements
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
implements|,
name|Serializable
block|{
comment|/** Get all field names.   */
DECL|method|getFieldNames
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|()
function_decl|;
comment|/** Set a field with implied null value for boost.    * @param name name of the field to set    * @param value value of the field    */
DECL|method|setField
specifier|public
specifier|abstract
name|void
name|setField
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
function_decl|;
comment|/**     * Add a field to the document.    * @param name Name of the field, should match one of the field names defined under "fields" tag in schema.xml.    * @param value Value of the field, should be of same class type as defined by "type" attribute of the corresponding field in schema.xml.     */
DECL|method|addField
specifier|public
specifier|abstract
name|void
name|addField
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
function_decl|;
comment|/**    * Get the first value or collection of values for a given field.    */
DECL|method|getFieldValue
specifier|public
specifier|abstract
name|Object
name|getFieldValue
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/**    * Get a collection of values for a given field name    */
DECL|method|getFieldValues
specifier|public
specifier|abstract
name|Collection
name|getFieldValues
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
DECL|method|addChildDocument
specifier|public
specifier|abstract
name|void
name|addChildDocument
parameter_list|(
name|K
name|child
parameter_list|)
function_decl|;
DECL|method|addChildDocuments
specifier|public
specifier|abstract
name|void
name|addChildDocuments
parameter_list|(
name|Collection
argument_list|<
name|K
argument_list|>
name|children
parameter_list|)
function_decl|;
DECL|method|getChildDocuments
specifier|public
specifier|abstract
name|List
argument_list|<
name|K
argument_list|>
name|getChildDocuments
parameter_list|()
function_decl|;
DECL|method|hasChildDocuments
specifier|public
specifier|abstract
name|boolean
name|hasChildDocuments
parameter_list|()
function_decl|;
DECL|method|getChildDocumentCount
specifier|public
specifier|abstract
name|int
name|getChildDocumentCount
parameter_list|()
function_decl|;
block|}
end_class
end_unit
