begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_comment
comment|/**  * Class that manages named configs in Zookeeper  */
end_comment
begin_class
DECL|class|ZkConfigManager
specifier|public
class|class
name|ZkConfigManager
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/** ZkNode where named configs are stored */
DECL|field|CONFIGS_ZKNODE
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGS_ZKNODE
init|=
literal|"/configs"
decl_stmt|;
DECL|field|UPLOAD_FILENAME_EXCLUDE_REGEX
specifier|public
specifier|static
specifier|final
name|String
name|UPLOAD_FILENAME_EXCLUDE_REGEX
init|=
literal|"^\\..*$"
decl_stmt|;
DECL|field|UPLOAD_FILENAME_EXCLUDE_PATTERN
specifier|public
specifier|static
specifier|final
name|Pattern
name|UPLOAD_FILENAME_EXCLUDE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|UPLOAD_FILENAME_EXCLUDE_REGEX
argument_list|)
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
comment|/**    * Creates a new ZkConfigManager    * @param zkClient the {@link SolrZkClient} to use    */
DECL|method|ZkConfigManager
specifier|public
name|ZkConfigManager
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|this
operator|.
name|zkClient
operator|=
name|zkClient
expr_stmt|;
block|}
DECL|method|uploadToZK
specifier|private
name|void
name|uploadToZK
parameter_list|(
specifier|final
name|Path
name|rootPath
parameter_list|,
specifier|final
name|String
name|zkPath
parameter_list|,
specifier|final
name|Pattern
name|filenameExclusions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|rootPath
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path "
operator|+
name|rootPath
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|Files
operator|.
name|walkFileTree
argument_list|(
name|rootPath
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|filename
init|=
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|filenameExclusions
operator|!=
literal|null
operator|&&
name|filenameExclusions
operator|.
name|matcher
argument_list|(
name|filename
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"uploadToZK skipping '{}' due to filenameExclusions '{}'"
argument_list|,
name|filename
argument_list|,
name|filenameExclusions
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
name|String
name|zkNode
init|=
name|createZkNodeName
argument_list|(
name|zkPath
argument_list|,
name|rootPath
argument_list|,
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
name|zkNode
argument_list|,
name|file
operator|.
name|toFile
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error uploading file "
operator|+
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|" to zookeeper path "
operator|+
name|zkNode
argument_list|,
name|SolrZkClient
operator|.
name|checkInterrupted
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|dir
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|)
condition|?
name|FileVisitResult
operator|.
name|SKIP_SUBTREE
else|:
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|createZkNodeName
specifier|private
specifier|static
name|String
name|createZkNodeName
parameter_list|(
name|String
name|zkRoot
parameter_list|,
name|Path
name|root
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
name|String
name|relativePath
init|=
name|root
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Windows shenanigans
name|String
name|separator
init|=
name|root
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getSeparator
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"\\"
operator|.
name|equals
argument_list|(
name|separator
argument_list|)
condition|)
name|relativePath
operator|=
name|relativePath
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
return|return
name|zkRoot
operator|+
literal|"/"
operator|+
name|relativePath
return|;
block|}
DECL|method|downloadFromZK
specifier|private
name|void
name|downloadFromZK
parameter_list|(
name|String
name|zkPath
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dir
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Path
name|filename
init|=
name|dir
operator|.
name|resolve
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Writing file {}"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|filename
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|downloadFromZK
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error downloading files from zookeeper path "
operator|+
name|zkPath
operator|+
literal|" to "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|SolrZkClient
operator|.
name|checkInterrupted
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Upload files from a given path to a config in Zookeeper    * @param dir         {@link java.nio.file.Path} to the files    * @param configName  the name to give the config    * @throws IOException    *                    if an I/O error occurs or the path does not exist    */
DECL|method|uploadConfigDir
specifier|public
name|void
name|uploadConfigDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
block|{
name|uploadToZK
argument_list|(
name|dir
argument_list|,
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
name|UPLOAD_FILENAME_EXCLUDE_PATTERN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Upload matching files from a given path to a config in Zookeeper    * @param dir         {@link java.nio.file.Path} to the files    * @param configName  the name to give the config    * @param filenameExclusions  files matching this pattern will not be uploaded    * @throws IOException    *                    if an I/O error occurs or the path does not exist    */
DECL|method|uploadConfigDir
specifier|public
name|void
name|uploadConfigDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|configName
parameter_list|,
name|Pattern
name|filenameExclusions
parameter_list|)
throws|throws
name|IOException
block|{
name|uploadToZK
argument_list|(
name|dir
argument_list|,
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
name|filenameExclusions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Download a config from Zookeeper and write it to the filesystem    * @param configName  the config to download    * @param dir         the {@link Path} to write files under    * @throws IOException    *                    if an I/O error occurs or the config does not exist    */
DECL|method|downloadConfigDir
specifier|public
name|void
name|downloadConfigDir
parameter_list|(
name|String
name|configName
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|downloadFromZK
argument_list|(
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|listConfigs
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listConfigs
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error listing configs"
argument_list|,
name|SolrZkClient
operator|.
name|checkInterrupted
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check whether a config exists in Zookeeper    *    * @param configName the config to check existance on    * @return whether the config exists or not    * @throws IOException if an I/O error occurs    */
DECL|method|configExists
specifier|public
name|Boolean
name|configExists
parameter_list|(
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|zkClient
operator|.
name|exists
argument_list|(
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error checking whether config exists"
argument_list|,
name|SolrZkClient
operator|.
name|checkInterrupted
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Delete a config in ZooKeeper    *    * @param configName the config to delete    * @throws IOException if an I/O error occurs    */
DECL|method|deleteConfigDir
specifier|public
name|void
name|deleteConfigDir
parameter_list|(
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|zkClient
operator|.
name|clean
argument_list|(
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error checking whether config exists"
argument_list|,
name|SolrZkClient
operator|.
name|checkInterrupted
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|copyConfigDirFromZk
specifier|private
name|void
name|copyConfigDirFromZk
parameter_list|(
name|String
name|fromZkPath
parameter_list|,
name|String
name|toZkPath
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|copiedToZkPaths
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|fromZkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|fromZkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
specifier|final
name|String
name|toZkFilePath
init|=
name|toZkPath
operator|+
literal|"/"
operator|+
name|file
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying zk node {} to {}"
argument_list|,
name|fromZkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
name|toZkFilePath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|fromZkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|toZkFilePath
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|copiedToZkPaths
operator|!=
literal|null
condition|)
name|copiedToZkPaths
operator|.
name|add
argument_list|(
name|toZkFilePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyConfigDirFromZk
argument_list|(
name|fromZkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
name|toZkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
name|copiedToZkPaths
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error copying nodes from zookeeper path "
operator|+
name|fromZkPath
operator|+
literal|" to "
operator|+
name|toZkPath
argument_list|,
name|SolrZkClient
operator|.
name|checkInterrupted
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Copy a config in ZooKeeper    *    * @param fromConfig the config to copy from    * @param toConfig the config to copy to    * @throws IOException if an I/O error occurs    */
DECL|method|copyConfigDir
specifier|public
name|void
name|copyConfigDir
parameter_list|(
name|String
name|fromConfig
parameter_list|,
name|String
name|toConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|copyConfigDir
argument_list|(
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|fromConfig
argument_list|,
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|toConfig
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy a config in ZooKeeper    *    * @param fromConfig the config to copy from    * @param toConfig the config to copy to    * @param copiedToZkPaths should be an empty Set, will be filled in by function                             with the paths that were actually copied to.    * @throws IOException if an I/O error occurs    */
DECL|method|copyConfigDir
specifier|public
name|void
name|copyConfigDir
parameter_list|(
name|String
name|fromConfig
parameter_list|,
name|String
name|toConfig
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|copiedToZkPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|copyConfigDirFromZk
argument_list|(
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|fromConfig
argument_list|,
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|toConfig
argument_list|,
name|copiedToZkPaths
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
