begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|noggit
operator|.
name|JSONWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Hash
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Class to partition int range into n ranges.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|DocRouter
specifier|public
specifier|abstract
class|class
name|DocRouter
block|{
DECL|field|DEFAULT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NAME
init|=
name|CompositeIdRouter
operator|.
name|NAME
decl_stmt|;
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|DocRouter
name|DEFAULT
init|=
operator|new
name|CompositeIdRouter
argument_list|()
decl_stmt|;
DECL|method|getDocRouter
specifier|public
specifier|static
name|DocRouter
name|getDocRouter
parameter_list|(
name|Object
name|routerSpec
parameter_list|)
block|{
name|DocRouter
name|router
init|=
name|routerMap
operator|.
name|get
argument_list|(
name|routerSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|router
operator|!=
literal|null
condition|)
return|return
name|router
return|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown document router '"
operator|+
name|routerSpec
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// currently just an implementation detail...
DECL|field|routerMap
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|DocRouter
argument_list|>
name|routerMap
decl_stmt|;
static|static
block|{
name|routerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DocRouter
argument_list|>
argument_list|()
expr_stmt|;
name|PlainIdRouter
name|plain
init|=
operator|new
name|PlainIdRouter
argument_list|()
decl_stmt|;
comment|// instead of doing back compat this way, we could always convert the clusterstate on first read to "plain" if it doesn't have any properties.
name|routerMap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|plain
argument_list|)
expr_stmt|;
comment|// back compat with 4.0
name|routerMap
operator|.
name|put
argument_list|(
name|PlainIdRouter
operator|.
name|NAME
argument_list|,
name|plain
argument_list|)
expr_stmt|;
name|routerMap
operator|.
name|put
argument_list|(
name|CompositeIdRouter
operator|.
name|NAME
argument_list|,
name|DEFAULT_NAME
operator|.
name|equals
argument_list|(
name|CompositeIdRouter
operator|.
name|NAME
argument_list|)
condition|?
name|DEFAULT
else|:
operator|new
name|CompositeIdRouter
argument_list|()
argument_list|)
expr_stmt|;
name|routerMap
operator|.
name|put
argument_list|(
name|ImplicitDocRouter
operator|.
name|NAME
argument_list|,
operator|new
name|ImplicitDocRouter
argument_list|()
argument_list|)
expr_stmt|;
comment|// NOTE: careful that the map keys (the static .NAME members) are filled in by making them final
block|}
comment|// Hash ranges can't currently "wrap" - i.e. max must be greater or equal to min.
comment|// TODO: ranges may not be all contiguous in the future (either that or we will
comment|// need an extra class to model a collection of ranges)
DECL|class|Range
specifier|public
specifier|static
class|class
name|Range
implements|implements
name|JSONWriter
operator|.
name|Writable
block|{
DECL|field|min
specifier|public
name|int
name|min
decl_stmt|;
comment|// inclusive
DECL|field|max
specifier|public
name|int
name|max
decl_stmt|;
comment|// inclusive
DECL|method|Range
specifier|public
name|Range
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
assert|assert
name|min
operator|<=
name|max
assert|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|includes
specifier|public
name|boolean
name|includes
parameter_list|(
name|int
name|hash
parameter_list|)
block|{
return|return
name|hash
operator|>=
name|min
operator|&&
name|hash
operator|<=
name|max
return|;
block|}
DECL|method|isSubsetOf
specifier|public
name|boolean
name|isSubsetOf
parameter_list|(
name|Range
name|superset
parameter_list|)
block|{
return|return
name|superset
operator|.
name|min
operator|<=
name|min
operator|&&
name|superset
operator|.
name|max
operator|>=
name|max
return|;
block|}
DECL|method|overlaps
specifier|public
name|boolean
name|overlaps
parameter_list|(
name|Range
name|other
parameter_list|)
block|{
return|return
name|includes
argument_list|(
name|other
operator|.
name|min
argument_list|)
operator|||
name|includes
argument_list|(
name|other
operator|.
name|max
argument_list|)
operator|||
name|isSubsetOf
argument_list|(
name|other
argument_list|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toHexString
argument_list|(
name|min
argument_list|)
operator|+
literal|'-'
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// difficult numbers to hash... only the highest bits will tend to differ.
comment|// ranges will only overlap during a split, so we can just hash the lower range.
return|return
operator|(
name|min
operator|>>
literal|28
operator|)
operator|+
operator|(
name|min
operator|>>
literal|25
operator|)
operator|+
operator|(
name|min
operator|>>
literal|21
operator|)
operator|+
name|min
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Range
name|other
init|=
operator|(
name|Range
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|min
operator|==
name|other
operator|.
name|min
operator|&&
name|this
operator|.
name|max
operator|==
name|other
operator|.
name|max
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|JSONWriter
name|writer
parameter_list|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fromString
specifier|public
name|Range
name|fromString
parameter_list|(
name|String
name|range
parameter_list|)
block|{
name|int
name|middle
init|=
name|range
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
name|String
name|minS
init|=
name|range
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|middle
argument_list|)
decl_stmt|;
name|String
name|maxS
init|=
name|range
operator|.
name|substring
argument_list|(
name|middle
operator|+
literal|1
argument_list|)
decl_stmt|;
name|long
name|min
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|minS
argument_list|,
literal|16
argument_list|)
decl_stmt|;
comment|// use long to prevent the parsing routines from potentially worrying about overflow
name|long
name|max
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|maxS
argument_list|,
literal|16
argument_list|)
decl_stmt|;
return|return
operator|new
name|Range
argument_list|(
operator|(
name|int
operator|)
name|min
argument_list|,
operator|(
name|int
operator|)
name|max
argument_list|)
return|;
block|}
DECL|method|fullRange
specifier|public
name|Range
name|fullRange
parameter_list|()
block|{
return|return
operator|new
name|Range
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
DECL|method|partitionRange
specifier|public
name|List
argument_list|<
name|Range
argument_list|>
name|partitionRange
parameter_list|(
name|int
name|partitions
parameter_list|,
name|Range
name|range
parameter_list|)
block|{
return|return
name|partitionRange
argument_list|(
name|partitions
argument_list|,
name|range
operator|.
name|min
argument_list|,
name|range
operator|.
name|max
argument_list|)
return|;
block|}
comment|/**    * Returns the range for each partition    */
DECL|method|partitionRange
specifier|public
name|List
argument_list|<
name|Range
argument_list|>
name|partitionRange
parameter_list|(
name|int
name|partitions
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
assert|assert
name|max
operator|>=
name|min
assert|;
if|if
condition|(
name|partitions
operator|==
literal|0
condition|)
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
name|long
name|range
init|=
operator|(
name|long
operator|)
name|max
operator|-
operator|(
name|long
operator|)
name|min
decl_stmt|;
name|long
name|srange
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|range
operator|/
name|partitions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|(
name|partitions
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|min
decl_stmt|;
name|long
name|end
init|=
name|start
decl_stmt|;
while|while
condition|(
name|end
operator|<
name|max
condition|)
block|{
name|end
operator|=
name|start
operator|+
name|srange
expr_stmt|;
comment|// make last range always end exactly on MAX_VALUE
if|if
condition|(
name|ranges
operator|.
name|size
argument_list|()
operator|==
name|partitions
operator|-
literal|1
condition|)
block|{
name|end
operator|=
name|max
expr_stmt|;
block|}
name|ranges
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
operator|(
name|int
operator|)
name|start
argument_list|,
operator|(
name|int
operator|)
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
operator|+
literal|1L
expr_stmt|;
block|}
return|return
name|ranges
return|;
block|}
DECL|method|getTargetSlice
specifier|public
specifier|abstract
name|Slice
name|getTargetSlice
parameter_list|(
name|String
name|id
parameter_list|,
name|SolrInputDocument
name|sdoc
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|DocCollection
name|collection
parameter_list|)
function_decl|;
comment|/** This method is consulted to determine what slices should be queried for a request when    *  an explicit shards parameter was not used.    *  shardKey (normally from shard.keys) and params may be null.    **/
DECL|method|getSearchSlices
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|Slice
argument_list|>
name|getSearchSlices
parameter_list|(
name|String
name|shardKey
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|DocCollection
name|collection
parameter_list|)
function_decl|;
block|}
end_class
begin_class
DECL|class|HashBasedRouter
specifier|abstract
class|class
name|HashBasedRouter
extends|extends
name|DocRouter
block|{
annotation|@
name|Override
DECL|method|getTargetSlice
specifier|public
name|Slice
name|getTargetSlice
parameter_list|(
name|String
name|id
parameter_list|,
name|SolrInputDocument
name|sdoc
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|DocCollection
name|collection
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
name|id
operator|=
name|getId
argument_list|(
name|sdoc
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|int
name|hash
init|=
name|sliceHash
argument_list|(
name|id
argument_list|,
name|sdoc
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|hashToSlice
argument_list|(
name|hash
argument_list|,
name|collection
argument_list|)
return|;
block|}
DECL|method|sliceHash
specifier|protected
name|int
name|sliceHash
parameter_list|(
name|String
name|id
parameter_list|,
name|SolrInputDocument
name|sdoc
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
return|return
name|Hash
operator|.
name|murmurhash3_x86_32
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|id
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|getId
specifier|protected
name|String
name|getId
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|Object
name|idObj
init|=
name|sdoc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
comment|// blech
name|String
name|id
init|=
name|idObj
operator|!=
literal|null
condition|?
name|idObj
operator|.
name|toString
argument_list|()
else|:
literal|"null"
decl_stmt|;
comment|// should only happen on client side
return|return
name|id
return|;
block|}
DECL|method|hashToSlice
specifier|protected
name|Slice
name|hashToSlice
parameter_list|(
name|int
name|hash
parameter_list|,
name|DocCollection
name|collection
parameter_list|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|collection
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|DocRouter
operator|.
name|Range
name|range
init|=
name|slice
operator|.
name|getRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
operator|&&
name|range
operator|.
name|includes
argument_list|(
name|hash
argument_list|)
condition|)
return|return
name|slice
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No slice servicing hash code "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|hash
argument_list|)
operator|+
literal|" in "
operator|+
name|collection
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getSearchSlices
specifier|public
name|Collection
argument_list|<
name|Slice
argument_list|>
name|getSearchSlices
parameter_list|(
name|String
name|shardKey
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|DocCollection
name|collection
parameter_list|)
block|{
if|if
condition|(
name|shardKey
operator|==
literal|null
condition|)
block|{
comment|// search across whole collection
comment|// TODO: this may need modification in the future when shard splitting could cause an overlap
return|return
name|collection
operator|.
name|getSlices
argument_list|()
return|;
block|}
comment|// use the shardKey as an id for plain hashing
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|getTargetSlice
argument_list|(
name|shardKey
argument_list|,
literal|null
argument_list|,
name|params
argument_list|,
name|collection
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
begin_class
DECL|class|PlainIdRouter
class|class
name|PlainIdRouter
extends|extends
name|HashBasedRouter
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"plain"
decl_stmt|;
block|}
end_class
begin_comment
comment|//
end_comment
begin_comment
comment|// user!uniqueid
end_comment
begin_comment
comment|// user/4!uniqueid
end_comment
begin_comment
comment|//
end_comment
begin_class
DECL|class|CompositeIdRouter
class|class
name|CompositeIdRouter
extends|extends
name|HashBasedRouter
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"compositeId"
decl_stmt|;
DECL|field|separator
specifier|private
name|int
name|separator
init|=
literal|'!'
decl_stmt|;
comment|// separator used to optionally specify number of bits to allocate toward first part.
DECL|field|bitsSepartor
specifier|private
name|int
name|bitsSepartor
init|=
literal|'/'
decl_stmt|;
DECL|field|bits
specifier|private
name|int
name|bits
init|=
literal|16
decl_stmt|;
DECL|field|mask1
specifier|private
name|int
name|mask1
init|=
literal|0xffff0000
decl_stmt|;
DECL|field|mask2
specifier|private
name|int
name|mask2
init|=
literal|0x0000ffff
decl_stmt|;
DECL|method|setBits
specifier|protected
name|void
name|setBits
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
name|this
operator|.
name|bits
operator|=
name|bits
expr_stmt|;
name|mask1
operator|=
operator|-
literal|1
operator|<<
operator|(
literal|32
operator|-
name|bits
operator|)
expr_stmt|;
name|mask2
operator|=
operator|-
literal|1
operator|>>>
name|bits
expr_stmt|;
block|}
DECL|method|getBits
specifier|protected
name|int
name|getBits
parameter_list|(
name|String
name|firstPart
parameter_list|,
name|int
name|commaIdx
parameter_list|)
block|{
name|int
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
name|commaIdx
operator|+
literal|1
init|;
name|idx
operator|<
name|firstPart
operator|.
name|length
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|char
name|ch
init|=
name|firstPart
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
argument_list|<
literal|'0'
operator|||
name|ch
argument_list|>
literal|'9'
condition|)
return|return
operator|-
literal|1
return|;
name|v
operator|*=
literal|10
operator|+
operator|(
name|ch
operator|-
literal|'0'
operator|)
expr_stmt|;
block|}
return|return
name|v
operator|>
literal|32
condition|?
operator|-
literal|1
else|:
name|v
return|;
block|}
annotation|@
name|Override
DECL|method|sliceHash
specifier|protected
name|int
name|sliceHash
parameter_list|(
name|String
name|id
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|int
name|idx
init|=
name|id
operator|.
name|indexOf
argument_list|(
name|separator
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
name|Hash
operator|.
name|murmurhash3_x86_32
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|id
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|int
name|m1
init|=
name|mask1
decl_stmt|;
name|int
name|m2
init|=
name|mask2
decl_stmt|;
name|String
name|part1
init|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|int
name|commaIdx
init|=
name|part1
operator|.
name|indexOf
argument_list|(
name|bitsSepartor
argument_list|)
decl_stmt|;
if|if
condition|(
name|commaIdx
operator|>
literal|0
condition|)
block|{
name|int
name|firstBits
init|=
name|getBits
argument_list|(
name|part1
argument_list|,
name|commaIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstBits
operator|>=
literal|0
condition|)
block|{
name|m1
operator|=
operator|-
literal|1
operator|<<
operator|(
literal|32
operator|-
name|firstBits
operator|)
expr_stmt|;
name|m2
operator|=
operator|-
literal|1
operator|>>>
name|firstBits
expr_stmt|;
name|part1
operator|=
name|part1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|commaIdx
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|part2
init|=
name|id
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|hash1
init|=
name|Hash
operator|.
name|murmurhash3_x86_32
argument_list|(
name|part1
argument_list|,
literal|0
argument_list|,
name|part1
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|hash2
init|=
name|Hash
operator|.
name|murmurhash3_x86_32
argument_list|(
name|part2
argument_list|,
literal|0
argument_list|,
name|part2
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|(
name|hash1
operator|&
name|m1
operator|)
operator||
operator|(
name|hash2
operator|&
name|m2
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSearchSlices
specifier|public
name|Collection
argument_list|<
name|Slice
argument_list|>
name|getSearchSlices
parameter_list|(
name|String
name|shardKey
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|DocCollection
name|collection
parameter_list|)
block|{
if|if
condition|(
name|shardKey
operator|==
literal|null
condition|)
block|{
comment|// search across whole collection
comment|// TODO: this may need modification in the future when shard splitting could cause an overlap
return|return
name|collection
operator|.
name|getSlices
argument_list|()
return|;
block|}
name|String
name|id
init|=
name|shardKey
decl_stmt|;
name|int
name|idx
init|=
name|shardKey
operator|.
name|indexOf
argument_list|(
name|separator
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
comment|// shardKey is a simple id, so don't do a range
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|hashToSlice
argument_list|(
name|Hash
operator|.
name|murmurhash3_x86_32
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|id
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|collection
argument_list|)
argument_list|)
return|;
block|}
name|int
name|m1
init|=
name|mask1
decl_stmt|;
name|int
name|m2
init|=
name|mask2
decl_stmt|;
name|String
name|part1
init|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|int
name|commaIdx
init|=
name|part1
operator|.
name|indexOf
argument_list|(
name|bitsSepartor
argument_list|)
decl_stmt|;
if|if
condition|(
name|commaIdx
operator|>
literal|0
condition|)
block|{
name|int
name|firstBits
init|=
name|getBits
argument_list|(
name|part1
argument_list|,
name|commaIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstBits
operator|>=
literal|0
condition|)
block|{
name|m1
operator|=
operator|-
literal|1
operator|<<
operator|(
literal|32
operator|-
name|firstBits
operator|)
expr_stmt|;
name|m2
operator|=
operator|-
literal|1
operator|>>>
name|firstBits
expr_stmt|;
name|part1
operator|=
name|part1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|commaIdx
argument_list|)
expr_stmt|;
block|}
block|}
comment|//  If the upper bits are 0xF0000000, the range we want to cover is
comment|//  0xF0000000 0xFfffffff
name|int
name|hash1
init|=
name|Hash
operator|.
name|murmurhash3_x86_32
argument_list|(
name|part1
argument_list|,
literal|0
argument_list|,
name|part1
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|upperBits
init|=
name|hash1
operator|&
name|m1
decl_stmt|;
name|int
name|lowerBound
init|=
name|upperBits
decl_stmt|;
name|int
name|upperBound
init|=
name|upperBits
operator||
name|m2
decl_stmt|;
name|Range
name|completeRange
init|=
operator|new
name|Range
argument_list|(
name|lowerBound
argument_list|,
name|upperBound
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Range
name|range
init|=
name|slice
operator|.
name|getRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
operator|&&
name|range
operator|.
name|overlaps
argument_list|(
name|completeRange
argument_list|)
condition|)
block|{
name|slices
operator|.
name|add
argument_list|(
name|slice
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|slices
return|;
block|}
block|}
end_class
end_unit
