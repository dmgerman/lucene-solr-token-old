begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.params
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_comment
comment|/**  *  */
end_comment
begin_class
DECL|class|DefaultSolrParams
specifier|public
class|class
name|DefaultSolrParams
extends|extends
name|SolrParams
block|{
DECL|field|params
specifier|protected
specifier|final
name|SolrParams
name|params
decl_stmt|;
DECL|field|defaults
specifier|protected
specifier|final
name|SolrParams
name|defaults
decl_stmt|;
comment|/**    * @deprecated (3.6) Use {@link SolrParams#wrapDefaults(SolrParams, SolrParams)} instead.    */
annotation|@
name|Deprecated
DECL|method|DefaultSolrParams
specifier|public
name|DefaultSolrParams
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|SolrParams
name|defaults
parameter_list|)
block|{
assert|assert
name|params
operator|!=
literal|null
operator|&&
name|defaults
operator|!=
literal|null
assert|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|defaults
operator|=
name|defaults
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|String
name|val
init|=
name|params
operator|.
name|get
argument_list|(
name|param
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|null
condition|?
name|val
else|:
name|defaults
operator|.
name|get
argument_list|(
name|param
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|String
index|[]
name|getParams
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|String
index|[]
name|vals
init|=
name|params
operator|.
name|getParams
argument_list|(
name|param
argument_list|)
decl_stmt|;
return|return
name|vals
operator|!=
literal|null
condition|?
name|vals
else|:
name|defaults
operator|.
name|getParams
argument_list|(
name|param
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getParameterNamesIterator
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getParameterNamesIterator
parameter_list|()
block|{
comment|// We need to compute the set of all param names in advance
comment|// So we don't wind up with an iterator that returns the same
comment|// String more then once (SOLR-6780)
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|allKeys
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
block|,
name|defaults
block|}
control|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|localKeys
init|=
name|p
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|localKeys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|allKeys
operator|.
name|add
argument_list|(
name|localKeys
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allKeys
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{params("
operator|+
name|params
operator|+
literal|"),defaults("
operator|+
name|defaults
operator|+
literal|")}"
return|;
block|}
block|}
end_class
end_unit
