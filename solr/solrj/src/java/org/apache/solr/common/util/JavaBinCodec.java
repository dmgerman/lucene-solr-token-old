begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|EnumFieldValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_comment
comment|/**  * Defines a space-efficient serialization/deserialization format for transferring data.  *<p>  * JavaBinCodec has built in support many commonly used types.  This includes primitive types (boolean, byte,  * short, double, int, long, float), common Java containers/utilities (Date, Map, Collection, Iterator, String,  * Object[], byte[]), and frequently used Solr types ({@link NamedList}, {@link SolrDocument},  * {@link SolrDocumentList}). Each of the above types has a pair of associated methods which read and write  * that type to a stream.  *<p>  * Classes that aren't supported natively can still be serialized/deserialized by providing  * an {@link JavaBinCodec.ObjectResolver} object that knows how to work with the unsupported class.  * This allows {@link JavaBinCodec} to be used to marshall/unmarshall arbitrary content.  *<p>  * NOTE -- {@link JavaBinCodec} instances cannot be reused for more than one marshall or unmarshall operation.  */
end_comment
begin_class
DECL|class|JavaBinCodec
specifier|public
class|class
name|JavaBinCodec
block|{
specifier|public
specifier|static
specifier|final
name|byte
DECL|field|NULL
name|NULL
init|=
literal|0
decl_stmt|,
DECL|field|BOOL_TRUE
name|BOOL_TRUE
init|=
literal|1
decl_stmt|,
DECL|field|BOOL_FALSE
name|BOOL_FALSE
init|=
literal|2
decl_stmt|,
DECL|field|BYTE
name|BYTE
init|=
literal|3
decl_stmt|,
DECL|field|SHORT
name|SHORT
init|=
literal|4
decl_stmt|,
DECL|field|DOUBLE
name|DOUBLE
init|=
literal|5
decl_stmt|,
DECL|field|INT
name|INT
init|=
literal|6
decl_stmt|,
DECL|field|LONG
name|LONG
init|=
literal|7
decl_stmt|,
DECL|field|FLOAT
name|FLOAT
init|=
literal|8
decl_stmt|,
DECL|field|DATE
name|DATE
init|=
literal|9
decl_stmt|,
DECL|field|MAP
name|MAP
init|=
literal|10
decl_stmt|,
DECL|field|SOLRDOC
name|SOLRDOC
init|=
literal|11
decl_stmt|,
DECL|field|SOLRDOCLST
name|SOLRDOCLST
init|=
literal|12
decl_stmt|,
DECL|field|BYTEARR
name|BYTEARR
init|=
literal|13
decl_stmt|,
DECL|field|ITERATOR
name|ITERATOR
init|=
literal|14
decl_stmt|,
comment|/**            * this is a special tag signals an end. No value is associated with it            */
DECL|field|END
name|END
init|=
literal|15
decl_stmt|,
DECL|field|SOLRINPUTDOC
name|SOLRINPUTDOC
init|=
literal|16
decl_stmt|,
DECL|field|SOLRINPUTDOC_CHILDS
name|SOLRINPUTDOC_CHILDS
init|=
literal|17
decl_stmt|,
DECL|field|ENUM_FIELD_VALUE
name|ENUM_FIELD_VALUE
init|=
literal|18
decl_stmt|,
DECL|field|MAP_ENTRY
name|MAP_ENTRY
init|=
literal|19
decl_stmt|,
comment|// types that combine tag + length (or other info) in a single byte
DECL|field|TAG_AND_LEN
name|TAG_AND_LEN
init|=
call|(
name|byte
call|)
argument_list|(
literal|1
operator|<<
literal|5
argument_list|)
decl_stmt|,
DECL|field|STR
name|STR
init|=
call|(
name|byte
call|)
argument_list|(
literal|1
operator|<<
literal|5
argument_list|)
decl_stmt|,
DECL|field|SINT
name|SINT
init|=
call|(
name|byte
call|)
argument_list|(
literal|2
operator|<<
literal|5
argument_list|)
decl_stmt|,
DECL|field|SLONG
name|SLONG
init|=
call|(
name|byte
call|)
argument_list|(
literal|3
operator|<<
literal|5
argument_list|)
decl_stmt|,
DECL|field|ARR
name|ARR
init|=
call|(
name|byte
call|)
argument_list|(
literal|4
operator|<<
literal|5
argument_list|)
decl_stmt|,
comment|//
DECL|field|ORDERED_MAP
name|ORDERED_MAP
init|=
call|(
name|byte
call|)
argument_list|(
literal|5
operator|<<
literal|5
argument_list|)
decl_stmt|,
comment|// SimpleOrderedMap (a NamedList subclass, and more common)
DECL|field|NAMED_LST
name|NAMED_LST
init|=
call|(
name|byte
call|)
argument_list|(
literal|6
operator|<<
literal|5
argument_list|)
decl_stmt|,
comment|// NamedList
DECL|field|EXTERN_STRING
name|EXTERN_STRING
init|=
call|(
name|byte
call|)
argument_list|(
literal|7
operator|<<
literal|5
argument_list|)
decl_stmt|;
DECL|field|MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY
specifier|private
specifier|static
specifier|final
name|int
name|MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY
init|=
literal|65536
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
name|byte
name|VERSION
init|=
literal|2
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|final
name|ObjectResolver
name|resolver
decl_stmt|;
DECL|field|daos
specifier|protected
name|FastOutputStream
name|daos
decl_stmt|;
DECL|field|stringCache
specifier|private
name|StringCache
name|stringCache
decl_stmt|;
DECL|field|writableDocFields
specifier|private
name|WritableDocFields
name|writableDocFields
decl_stmt|;
DECL|field|alreadyMarshalled
specifier|private
name|boolean
name|alreadyMarshalled
decl_stmt|;
DECL|field|alreadyUnmarshalled
specifier|private
name|boolean
name|alreadyUnmarshalled
decl_stmt|;
DECL|method|JavaBinCodec
specifier|public
name|JavaBinCodec
parameter_list|()
block|{
name|resolver
operator|=
literal|null
expr_stmt|;
name|writableDocFields
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|JavaBinCodec
specifier|public
name|JavaBinCodec
parameter_list|(
name|ObjectResolver
name|resolver
parameter_list|)
block|{
name|this
argument_list|(
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setWritableDocFields
specifier|public
name|JavaBinCodec
name|setWritableDocFields
parameter_list|(
name|WritableDocFields
name|writableDocFields
parameter_list|)
block|{
name|this
operator|.
name|writableDocFields
operator|=
name|writableDocFields
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|JavaBinCodec
specifier|public
name|JavaBinCodec
parameter_list|(
name|ObjectResolver
name|resolver
parameter_list|,
name|StringCache
name|stringCache
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|stringCache
operator|=
name|stringCache
expr_stmt|;
block|}
DECL|method|getResolver
specifier|public
name|ObjectResolver
name|getResolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
DECL|method|marshal
specifier|public
name|void
name|marshal
parameter_list|(
name|Object
name|nl
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|alreadyMarshalled
assert|;
name|init
argument_list|(
name|FastOutputStream
operator|.
name|wrap
argument_list|(
name|os
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|nl
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|daos
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
name|alreadyMarshalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** expert: sets a new output stream */
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|FastOutputStream
name|os
parameter_list|)
block|{
name|daos
operator|=
name|os
expr_stmt|;
block|}
DECL|field|version
name|byte
name|version
decl_stmt|;
DECL|method|unmarshal
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|alreadyUnmarshalled
assert|;
name|FastInputStream
name|dis
init|=
name|FastInputStream
operator|.
name|wrap
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|version
operator|=
name|dis
operator|.
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|VERSION
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid version (expected "
operator|+
name|VERSION
operator|+
literal|", but "
operator|+
name|version
operator|+
literal|") or the data in not in 'javabin' format"
argument_list|)
throw|;
block|}
name|alreadyUnmarshalled
operator|=
literal|true
expr_stmt|;
return|return
name|readVal
argument_list|(
name|dis
argument_list|)
return|;
block|}
DECL|method|readOrderedMap
specifier|public
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|readOrderedMap
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|nl
return|;
block|}
DECL|method|readNamedList
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|readNamedList
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|nl
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|nl
return|;
block|}
DECL|method|writeNamedList
specifier|public
name|void
name|writeNamedList
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|nl
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|nl
operator|instanceof
name|SimpleOrderedMap
condition|?
name|ORDERED_MAP
else|:
name|NAMED_LST
argument_list|,
name|nl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|nl
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writeExternString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|nl
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writeVal
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeVal
specifier|public
name|void
name|writeVal
parameter_list|(
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writeKnownType
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return;
block|}
else|else
block|{
name|ObjectResolver
name|resolver
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|ObjectResolver
condition|)
block|{
name|resolver
operator|=
operator|(
name|ObjectResolver
operator|)
name|val
expr_stmt|;
block|}
else|else
block|{
name|resolver
operator|=
name|this
operator|.
name|resolver
expr_stmt|;
block|}
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Object
name|tmpVal
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|val
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpVal
operator|==
literal|null
condition|)
return|return;
comment|// null means the resolver took care of it fully
if|if
condition|(
name|writeKnownType
argument_list|(
name|tmpVal
argument_list|)
condition|)
return|return;
block|}
block|}
name|writeVal
argument_list|(
name|val
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|':'
operator|+
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|END_OBJ
specifier|protected
specifier|static
specifier|final
name|Object
name|END_OBJ
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|tagByte
specifier|protected
name|byte
name|tagByte
decl_stmt|;
DECL|method|readVal
specifier|public
name|Object
name|readVal
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|tagByte
operator|=
name|dis
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// if ((tagByte& 0xe0) == 0) {
comment|// if top 3 bits are clear, this is a normal tag
comment|// OK, try type + size in single byte
switch|switch
condition|(
name|tagByte
operator|>>>
literal|5
condition|)
block|{
case|case
name|STR
operator|>>>
literal|5
case|:
return|return
name|readStr
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|SINT
operator|>>>
literal|5
case|:
return|return
name|readSmallInt
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|SLONG
operator|>>>
literal|5
case|:
return|return
name|readSmallLong
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|ARR
operator|>>>
literal|5
case|:
return|return
name|readArray
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|ORDERED_MAP
operator|>>>
literal|5
case|:
return|return
name|readOrderedMap
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|NAMED_LST
operator|>>>
literal|5
case|:
return|return
name|readNamedList
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|EXTERN_STRING
operator|>>>
literal|5
case|:
return|return
name|readExternString
argument_list|(
name|dis
argument_list|)
return|;
block|}
switch|switch
condition|(
name|tagByte
condition|)
block|{
case|case
name|NULL
case|:
return|return
literal|null
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|Date
argument_list|(
name|dis
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|dis
operator|.
name|readInt
argument_list|()
return|;
case|case
name|BOOL_TRUE
case|:
return|return
name|Boolean
operator|.
name|TRUE
return|;
case|case
name|BOOL_FALSE
case|:
return|return
name|Boolean
operator|.
name|FALSE
return|;
case|case
name|FLOAT
case|:
return|return
name|dis
operator|.
name|readFloat
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
name|dis
operator|.
name|readDouble
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
name|dis
operator|.
name|readLong
argument_list|()
return|;
case|case
name|BYTE
case|:
return|return
name|dis
operator|.
name|readByte
argument_list|()
return|;
case|case
name|SHORT
case|:
return|return
name|dis
operator|.
name|readShort
argument_list|()
return|;
case|case
name|MAP
case|:
return|return
name|readMap
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|SOLRDOC
case|:
return|return
name|readSolrDocument
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|SOLRDOCLST
case|:
return|return
name|readSolrDocumentList
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|BYTEARR
case|:
return|return
name|readByteArray
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|ITERATOR
case|:
return|return
name|readIterator
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|END
case|:
return|return
name|END_OBJ
return|;
case|case
name|SOLRINPUTDOC
case|:
return|return
name|readSolrInputDocument
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|ENUM_FIELD_VALUE
case|:
return|return
name|readEnumFieldValue
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|MAP_ENTRY
case|:
return|return
name|readMapEntry
argument_list|(
name|dis
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type "
operator|+
name|tagByte
argument_list|)
throw|;
block|}
DECL|method|writeKnownType
specifier|public
name|boolean
name|writeKnownType
parameter_list|(
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writePrimitive
argument_list|(
name|val
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|val
operator|instanceof
name|NamedList
condition|)
block|{
name|writeNamedList
argument_list|(
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|SolrDocumentList
condition|)
block|{
comment|// SolrDocumentList is a List, so must come before List check
name|writeSolrDocumentList
argument_list|(
operator|(
name|SolrDocumentList
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Collection
condition|)
block|{
name|writeArray
argument_list|(
operator|(
name|Collection
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|writeArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|SolrDocument
condition|)
block|{
comment|//this needs special treatment to know which fields are to be written
name|writeSolrDocument
argument_list|(
operator|(
name|SolrDocument
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|SolrInputDocument
condition|)
block|{
name|writeSolrInputDocument
argument_list|(
operator|(
name|SolrInputDocument
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Map
condition|)
block|{
name|writeMap
argument_list|(
operator|(
name|Map
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Iterator
condition|)
block|{
name|writeIterator
argument_list|(
operator|(
name|Iterator
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Path
condition|)
block|{
name|writeStr
argument_list|(
operator|(
operator|(
name|Path
operator|)
name|val
operator|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Iterable
condition|)
block|{
name|writeIterator
argument_list|(
operator|(
operator|(
name|Iterable
operator|)
name|val
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|EnumFieldValue
condition|)
block|{
name|writeEnumFieldValue
argument_list|(
operator|(
name|EnumFieldValue
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Map
operator|.
name|Entry
condition|)
block|{
name|writeMapEntry
argument_list|(
operator|(
name|Map
operator|.
name|Entry
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|writeTag
specifier|public
name|void
name|writeTag
parameter_list|(
name|byte
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTag
specifier|public
name|void
name|writeTag
parameter_list|(
name|byte
name|tag
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|tag
operator|&
literal|0xe0
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|size
operator|<
literal|0x1f
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|tag
operator||
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|tag
operator||
literal|0x1f
argument_list|)
expr_stmt|;
name|writeVInt
argument_list|(
name|size
operator|-
literal|0x1f
argument_list|,
name|daos
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeVInt
argument_list|(
name|size
argument_list|,
name|daos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeByteArray
specifier|public
name|void
name|writeByteArray
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|BYTEARR
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|daos
operator|.
name|write
argument_list|(
name|arr
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|readByteArray
specifier|public
name|byte
index|[]
name|readByteArray
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
name|readVInt
argument_list|(
name|dis
argument_list|)
index|]
decl_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|arr
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|//use this to ignore the writable interface because , child docs will ignore the fl flag
comment|// is it a good design?
DECL|field|ignoreWritable
specifier|private
name|boolean
name|ignoreWritable
init|=
literal|false
decl_stmt|;
DECL|method|writeSolrDocument
specifier|public
name|void
name|writeSolrDocument
parameter_list|(
name|SolrDocument
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|children
init|=
name|doc
operator|.
name|getChildDocuments
argument_list|()
decl_stmt|;
name|int
name|fieldsCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|writableDocFields
operator|==
literal|null
operator|||
name|writableDocFields
operator|.
name|wantsAllFields
argument_list|()
operator|||
name|ignoreWritable
condition|)
block|{
name|fieldsCount
operator|=
name|doc
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|doc
control|)
block|{
if|if
condition|(
name|toWrite
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
name|fieldsCount
operator|++
expr_stmt|;
block|}
block|}
name|int
name|sz
init|=
name|fieldsCount
operator|+
operator|(
name|children
operator|==
literal|null
condition|?
literal|0
else|:
name|children
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|writeTag
argument_list|(
name|SOLRDOC
argument_list|)
expr_stmt|;
name|writeTag
argument_list|(
name|ORDERED_MAP
argument_list|,
name|sz
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|doc
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|toWrite
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writeExternString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|writeVal
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ignoreWritable
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|SolrDocument
name|child
range|:
name|children
control|)
block|{
name|writeSolrDocument
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ignoreWritable
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
DECL|method|toWrite
specifier|protected
name|boolean
name|toWrite
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|writableDocFields
operator|==
literal|null
operator|||
name|ignoreWritable
operator|||
name|writableDocFields
operator|.
name|isWritable
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|readSolrDocument
specifier|public
name|SolrDocument
name|readSolrDocument
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|tagByte
operator|=
name|dis
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|SolrDocument
name|doc
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldName
decl_stmt|;
name|Object
name|obj
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
comment|// could be a field name, or a child document
if|if
condition|(
name|obj
operator|instanceof
name|SolrDocument
condition|)
block|{
name|doc
operator|.
name|addChildDocument
argument_list|(
operator|(
name|SolrDocument
operator|)
name|obj
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|fieldName
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
block|}
name|Object
name|fieldVal
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|fieldVal
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|readSolrDocumentList
specifier|public
name|SolrDocumentList
name|readSolrDocumentList
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrDocumentList
name|solrDocs
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|solrDocs
operator|.
name|setNumFound
argument_list|(
operator|(
name|Long
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|solrDocs
operator|.
name|setStart
argument_list|(
operator|(
name|Long
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|solrDocs
operator|.
name|setMaxScore
argument_list|(
operator|(
name|Float
operator|)
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|SolrDocument
argument_list|>
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|solrDocs
operator|.
name|addAll
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|solrDocs
return|;
block|}
DECL|method|writeSolrDocumentList
specifier|public
name|void
name|writeSolrDocumentList
parameter_list|(
name|SolrDocumentList
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|SOLRDOCLST
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|docs
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|writeArray
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|writeArray
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
DECL|method|readSolrInputDocument
specifier|public
name|SolrInputDocument
name|readSolrInputDocument
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readVInt
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|float
name|docBoost
init|=
operator|(
name|Float
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|sdoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|sdoc
operator|.
name|setDocumentBoost
argument_list|(
name|docBoost
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
name|String
name|fieldName
decl_stmt|;
name|Object
name|obj
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
comment|// could be a boost, a field name, or a child document
if|if
condition|(
name|obj
operator|instanceof
name|Float
condition|)
block|{
name|boost
operator|=
operator|(
name|Float
operator|)
name|obj
expr_stmt|;
name|fieldName
operator|=
operator|(
name|String
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|SolrInputDocument
condition|)
block|{
name|sdoc
operator|.
name|addChildDocument
argument_list|(
operator|(
name|SolrInputDocument
operator|)
name|obj
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|fieldName
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
block|}
name|Object
name|fieldVal
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|sdoc
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|fieldVal
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
return|return
name|sdoc
return|;
block|}
DECL|method|writeSolrInputDocument
specifier|public
name|void
name|writeSolrInputDocument
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|children
init|=
name|sdoc
operator|.
name|getChildDocuments
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|sdoc
operator|.
name|size
argument_list|()
operator|+
operator|(
name|children
operator|==
literal|null
condition|?
literal|0
else|:
name|children
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|writeTag
argument_list|(
name|SOLRINPUTDOC
argument_list|,
name|sz
argument_list|)
expr_stmt|;
name|writeFloat
argument_list|(
name|sdoc
operator|.
name|getDocumentBoost
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrInputField
name|inputField
range|:
name|sdoc
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|inputField
operator|.
name|getBoost
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
name|writeFloat
argument_list|(
name|inputField
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeExternString
argument_list|(
name|inputField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|inputField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolrInputDocument
name|child
range|:
name|children
control|)
block|{
name|writeSolrInputDocument
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readMap
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|readMap
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readVInt
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
DECL|method|writeIterator
specifier|public
name|void
name|writeIterator
parameter_list|(
name|Iterator
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|ITERATOR
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeVal
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeVal
argument_list|(
name|END_OBJ
argument_list|)
expr_stmt|;
block|}
DECL|method|readIterator
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|readIterator
parameter_list|(
name|DataInputInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|o
init|=
name|readVal
argument_list|(
name|fis
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|END_OBJ
condition|)
break|break;
name|l
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|List
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|ARR
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|writeVal
argument_list|(
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|Collection
name|coll
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|ARR
argument_list|,
name|coll
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|coll
control|)
block|{
name|writeVal
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|Object
index|[]
name|arr
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|ARR
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|arr
index|[
name|i
index|]
decl_stmt|;
name|writeVal
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readArray
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|readArray
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|readVal
argument_list|(
name|dis
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/**    * write {@link EnumFieldValue} as tag+int value+string value    * @param enumFieldValue to write    */
DECL|method|writeEnumFieldValue
specifier|public
name|void
name|writeEnumFieldValue
parameter_list|(
name|EnumFieldValue
name|enumFieldValue
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|ENUM_FIELD_VALUE
argument_list|)
expr_stmt|;
name|writeInt
argument_list|(
name|enumFieldValue
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|enumFieldValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeMapEntry
specifier|public
name|void
name|writeMapEntry
parameter_list|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|MAP_ENTRY
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|val
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * read {@link EnumFieldValue} (int+string) from input stream    * @param dis data input stream    * @return {@link EnumFieldValue}    */
DECL|method|readEnumFieldValue
specifier|public
name|EnumFieldValue
name|readEnumFieldValue
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|Integer
name|intValue
init|=
operator|(
name|Integer
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|String
name|stringValue
init|=
operator|(
name|String
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnumFieldValue
argument_list|(
name|intValue
argument_list|,
name|stringValue
argument_list|)
return|;
block|}
DECL|method|readMapEntry
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|readMapEntry
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Object
name|key
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
return|return
operator|new
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MapEntry["
operator|+
name|key
operator|+
literal|":"
operator|+
name|value
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|31
decl_stmt|;
name|result
operator|*=
literal|31
operator|+
name|getKey
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|*=
literal|31
operator|+
name|getValue
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Entry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * write the string as tag+length, with length being the number of UTF-8 bytes    */
DECL|method|writeStr
specifier|public
name|void
name|writeStr
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|writeTag
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|end
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|maxSize
init|=
name|end
operator|*
name|ByteUtils
operator|.
name|MAX_UTF8_BYTES_PER_CHAR
decl_stmt|;
if|if
condition|(
name|maxSize
operator|<=
name|MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY
condition|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|length
operator|<
name|maxSize
condition|)
name|bytes
operator|=
operator|new
name|byte
index|[
name|maxSize
index|]
expr_stmt|;
name|int
name|sz
init|=
name|ByteUtils
operator|.
name|UTF16toUTF8
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|end
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|writeTag
argument_list|(
name|STR
argument_list|,
name|sz
argument_list|)
expr_stmt|;
name|daos
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|sz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// double pass logic for large strings, see SOLR-7971
name|int
name|sz
init|=
name|ByteUtils
operator|.
name|calcUTF16toUTF8Length
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|writeTag
argument_list|(
name|STR
argument_list|,
name|sz
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|length
operator|<
literal|8192
condition|)
name|bytes
operator|=
operator|new
name|byte
index|[
literal|8192
index|]
expr_stmt|;
name|ByteUtils
operator|.
name|writeUTF16toUTF8
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|end
argument_list|,
name|daos
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|bytes
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|arr
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
DECL|field|bytesRef
specifier|private
name|StringBytes
name|bytesRef
init|=
operator|new
name|StringBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|method|readStr
specifier|public
name|String
name|readStr
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readStr
argument_list|(
name|dis
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|readStr
specifier|public
name|String
name|readStr
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|,
name|StringCache
name|stringCache
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|length
operator|<
name|sz
condition|)
name|bytes
operator|=
operator|new
name|byte
index|[
name|sz
index|]
expr_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|sz
argument_list|)
expr_stmt|;
if|if
condition|(
name|stringCache
operator|!=
literal|null
condition|)
block|{
return|return
name|stringCache
operator|.
name|get
argument_list|(
name|bytesRef
operator|.
name|reset
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|sz
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|arr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ByteUtils
operator|.
name|UTF8toUTF16
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|sz
argument_list|,
name|arr
argument_list|)
expr_stmt|;
return|return
name|arr
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|writeInt
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|>
literal|0
condition|)
block|{
name|int
name|b
init|=
name|SINT
operator||
operator|(
name|val
operator|&
literal|0x0f
operator|)
decl_stmt|;
if|if
condition|(
name|val
operator|>=
literal|0x0f
condition|)
block|{
name|b
operator||=
literal|0x10
expr_stmt|;
name|daos
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|writeVInt
argument_list|(
name|val
operator|>>>
literal|4
argument_list|,
name|daos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|INT
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readSmallInt
specifier|public
name|int
name|readSmallInt
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|v
init|=
name|tagByte
operator|&
literal|0x0F
decl_stmt|;
if|if
condition|(
operator|(
name|tagByte
operator|&
literal|0x10
operator|)
operator|!=
literal|0
condition|)
name|v
operator|=
operator|(
name|readVInt
argument_list|(
name|dis
argument_list|)
operator|<<
literal|4
operator|)
operator||
name|v
expr_stmt|;
return|return
name|v
return|;
block|}
DECL|method|writeLong
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|val
operator|&
literal|0xff00000000000000L
operator|)
operator|==
literal|0
condition|)
block|{
name|int
name|b
init|=
name|SLONG
operator||
operator|(
operator|(
name|int
operator|)
name|val
operator|&
literal|0x0f
operator|)
decl_stmt|;
if|if
condition|(
name|val
operator|>=
literal|0x0f
condition|)
block|{
name|b
operator||=
literal|0x10
expr_stmt|;
name|daos
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|writeVLong
argument_list|(
name|val
operator|>>>
literal|4
argument_list|,
name|daos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|LONG
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readSmallLong
specifier|public
name|long
name|readSmallLong
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|v
init|=
name|tagByte
operator|&
literal|0x0F
decl_stmt|;
if|if
condition|(
operator|(
name|tagByte
operator|&
literal|0x10
operator|)
operator|!=
literal|0
condition|)
name|v
operator|=
operator|(
name|readVLong
argument_list|(
name|dis
argument_list|)
operator|<<
literal|4
operator|)
operator||
name|v
expr_stmt|;
return|return
name|v
return|;
block|}
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|float
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|FLOAT
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeFloat
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|writePrimitive
specifier|public
name|boolean
name|writePrimitive
parameter_list|(
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|writeStr
argument_list|(
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Number
condition|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|Integer
condition|)
block|{
name|writeInt
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|val
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Long
condition|)
block|{
name|writeLong
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|val
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Float
condition|)
block|{
name|writeFloat
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|val
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Double
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|DOUBLE
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeDouble
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|val
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Byte
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|BYTE
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeByte
argument_list|(
operator|(
operator|(
name|Byte
operator|)
name|val
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Short
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|SHORT
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeShort
argument_list|(
operator|(
operator|(
name|Short
operator|)
name|val
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Date
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|val
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Boolean
condition|)
block|{
if|if
condition|(
operator|(
name|Boolean
operator|)
name|val
condition|)
name|daos
operator|.
name|writeByte
argument_list|(
name|BOOL_TRUE
argument_list|)
expr_stmt|;
else|else
name|daos
operator|.
name|writeByte
argument_list|(
name|BOOL_FALSE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|writeByteArray
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|val
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|byte
index|[]
operator|)
name|val
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|ByteBuffer
condition|)
block|{
name|ByteBuffer
name|buf
init|=
operator|(
name|ByteBuffer
operator|)
name|val
decl_stmt|;
name|writeByteArray
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|position
argument_list|()
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
operator|-
name|buf
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|==
name|END_OBJ
condition|)
block|{
name|writeTag
argument_list|(
name|END
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|MAP
argument_list|,
name|val
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|val
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|String
condition|)
block|{
name|writeExternString
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeVal
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|writeVal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readSize
specifier|public
name|int
name|readSize
parameter_list|(
name|DataInputInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|tagByte
operator|&
literal|0x1f
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0x1f
condition|)
name|sz
operator|+=
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
comment|/**    * Special method for variable length int (copied from lucene). Usually used for writing the length of a    * collection/array/map In most of the cases the length can be represented in one byte (length&lt; 127) so it saves 3    * bytes/object    *    * @throws IOException If there is a low-level I/O error.    */
DECL|method|writeVInt
specifier|public
specifier|static
name|void
name|writeVInt
parameter_list|(
name|int
name|i
parameter_list|,
name|FastOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0x7F
operator|)
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x7f
operator|)
operator||
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**    * The counterpart for {@link #writeVInt(int, FastOutputStream)}    *    * @throws IOException If there is a low-level I/O error.    */
DECL|method|readVInt
specifier|public
specifier|static
name|int
name|readVInt
parameter_list|(
name|DataInputInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|b
operator|&
literal|0x7F
decl_stmt|;
for|for
control|(
name|int
name|shift
init|=
literal|7
init|;
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|;
name|shift
operator|+=
literal|7
control|)
block|{
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
name|shift
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
DECL|method|writeVLong
specifier|public
specifier|static
name|void
name|writeVLong
parameter_list|(
name|long
name|i
parameter_list|,
name|FastOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0x7F
operator|)
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x7f
operator|)
operator||
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|readVLong
specifier|public
specifier|static
name|long
name|readVLong
parameter_list|(
name|DataInputInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|long
name|i
init|=
name|b
operator|&
literal|0x7F
decl_stmt|;
for|for
control|(
name|int
name|shift
init|=
literal|7
init|;
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|;
name|shift
operator|+=
literal|7
control|)
block|{
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
call|(
name|long
call|)
argument_list|(
name|b
operator|&
literal|0x7F
argument_list|)
operator|<<
name|shift
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
DECL|field|stringsCount
specifier|private
name|int
name|stringsCount
init|=
literal|0
decl_stmt|;
DECL|field|stringsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|stringsMap
decl_stmt|;
DECL|field|stringsList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|stringsList
decl_stmt|;
DECL|method|writeExternString
specifier|public
name|void
name|writeExternString
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|writeTag
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
return|return;
block|}
name|Integer
name|idx
init|=
name|stringsMap
operator|==
literal|null
condition|?
literal|null
else|:
name|stringsMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
name|idx
operator|=
literal|0
expr_stmt|;
name|writeTag
argument_list|(
name|EXTERN_STRING
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|writeStr
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|stringsMap
operator|==
literal|null
condition|)
name|stringsMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|stringsMap
operator|.
name|put
argument_list|(
name|s
argument_list|,
operator|++
name|stringsCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readExternString
specifier|public
name|String
name|readExternString
parameter_list|(
name|DataInputInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|idx
init|=
name|readSize
argument_list|(
name|fis
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
literal|0
condition|)
block|{
comment|// idx != 0 is the index of the extern string
return|return
name|stringsList
operator|.
name|get
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
comment|// idx == 0 means it has a string value
name|tagByte
operator|=
name|fis
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|String
name|s
init|=
name|readStr
argument_list|(
name|fis
argument_list|,
name|stringCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringsList
operator|==
literal|null
condition|)
name|stringsList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|stringsList
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
comment|/**    * Allows extension of {@link JavaBinCodec} to support serialization of arbitrary data types.    *<p>    * Implementors of this interface write a method to serialize a given object using an existing {@link JavaBinCodec}    */
DECL|interface|ObjectResolver
specifier|public
specifier|static
interface|interface
name|ObjectResolver
block|{
comment|/**      * Examine and attempt to serialize the given object, using a {@link JavaBinCodec} to write it to a stream.      *      * @param o     the object that the caller wants serialized.      * @param codec used to actually serialize {@code o}.      * @return the object {@code o} itself if it could not be serialized, or {@code null} if the whole object was successfully serialized.      * @see JavaBinCodec      */
DECL|method|resolve
specifier|public
name|Object
name|resolve
parameter_list|(
name|Object
name|o
parameter_list|,
name|JavaBinCodec
name|codec
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|interface|WritableDocFields
specifier|public
interface|interface
name|WritableDocFields
block|{
DECL|method|isWritable
specifier|public
name|boolean
name|isWritable
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
DECL|method|wantsAllFields
specifier|public
name|boolean
name|wantsAllFields
parameter_list|()
function_decl|;
block|}
DECL|class|StringCache
specifier|public
specifier|static
class|class
name|StringCache
block|{
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|StringBytes
argument_list|,
name|String
argument_list|>
name|cache
decl_stmt|;
DECL|method|StringCache
specifier|public
name|StringCache
parameter_list|(
name|Cache
argument_list|<
name|StringBytes
argument_list|,
name|String
argument_list|>
name|cache
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|StringBytes
name|b
parameter_list|)
block|{
name|String
name|result
init|=
name|cache
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|//make a copy because the buffer received may be changed later by the caller
name|StringBytes
name|copy
init|=
operator|new
name|StringBytes
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|b
operator|.
name|bytes
argument_list|,
name|b
operator|.
name|offset
argument_list|,
name|b
operator|.
name|offset
operator|+
name|b
operator|.
name|length
argument_list|)
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
name|ByteUtils
operator|.
name|UTF8toUTF16
argument_list|(
name|b
operator|.
name|bytes
argument_list|,
name|b
operator|.
name|offset
argument_list|,
name|b
operator|.
name|length
argument_list|,
name|arr
argument_list|)
expr_stmt|;
name|result
operator|=
name|arr
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|copy
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|class|StringBytes
specifier|public
specifier|static
class|class
name|StringBytes
block|{
DECL|field|bytes
name|byte
index|[]
name|bytes
decl_stmt|;
comment|/**      * Offset of first valid byte.      */
DECL|field|offset
name|int
name|offset
decl_stmt|;
comment|/**      * Length of used bytes.      */
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
DECL|field|hash
specifier|private
name|int
name|hash
decl_stmt|;
DECL|method|StringBytes
specifier|public
name|StringBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|reset
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
name|StringBytes
name|reset
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|hash
operator|=
name|bytes
operator|==
literal|null
condition|?
literal|0
else|:
name|Hash
operator|.
name|murmurhash3_x86_32
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|StringBytes
condition|)
block|{
return|return
name|this
operator|.
name|bytesEquals
argument_list|(
operator|(
name|StringBytes
operator|)
name|other
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|bytesEquals
name|boolean
name|bytesEquals
parameter_list|(
name|StringBytes
name|other
parameter_list|)
block|{
assert|assert
name|other
operator|!=
literal|null
assert|;
if|if
condition|(
name|length
operator|==
name|other
operator|.
name|length
condition|)
block|{
name|int
name|otherUpto
init|=
name|other
operator|.
name|offset
decl_stmt|;
specifier|final
name|byte
index|[]
name|otherBytes
init|=
name|other
operator|.
name|bytes
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|offset
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|upto
init|=
name|offset
init|;
name|upto
operator|<
name|end
condition|;
name|upto
operator|++
operator|,
name|otherUpto
operator|++
control|)
block|{
if|if
condition|(
name|bytes
index|[
name|upto
index|]
operator|!=
name|otherBytes
index|[
name|otherUpto
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
block|}
block|}
end_class
end_unit
