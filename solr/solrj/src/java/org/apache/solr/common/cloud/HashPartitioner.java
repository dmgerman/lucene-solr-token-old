begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * Class to partition int range into n ranges.  *   */
end_comment
begin_class
DECL|class|HashPartitioner
specifier|public
class|class
name|HashPartitioner
block|{
comment|// Hash ranges can't currently "wrap" - i.e. max must be greater or equal to min.
DECL|class|Range
specifier|public
specifier|static
class|class
name|Range
block|{
DECL|field|min
specifier|public
name|int
name|min
decl_stmt|;
comment|// inclusive
DECL|field|max
specifier|public
name|int
name|max
decl_stmt|;
comment|// inclusive
DECL|method|Range
specifier|public
name|Range
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|includes
specifier|public
name|boolean
name|includes
parameter_list|(
name|int
name|hash
parameter_list|)
block|{
return|return
name|hash
operator|>=
name|min
operator|&&
name|hash
operator|<=
name|max
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toHexString
argument_list|(
name|min
argument_list|)
operator|+
literal|'-'
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|max
argument_list|)
return|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|Range
name|fromString
parameter_list|(
name|String
name|range
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// TODO
block|}
block|}
comment|/**    *    * @param partitions    * @return Range for each partition    */
DECL|method|partitionRange
specifier|public
name|List
argument_list|<
name|Range
argument_list|>
name|partitionRange
parameter_list|(
name|int
name|partitions
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
assert|assert
name|max
operator|>=
name|min
assert|;
name|long
name|range
init|=
operator|(
name|long
operator|)
name|max
operator|-
operator|(
name|long
operator|)
name|min
decl_stmt|;
name|long
name|srange
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|range
operator|/
name|partitions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|(
name|partitions
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|min
decl_stmt|;
name|long
name|end
init|=
name|start
decl_stmt|;
while|while
condition|(
name|end
operator|<
name|max
condition|)
block|{
name|end
operator|=
name|start
operator|+
name|srange
expr_stmt|;
comment|// make last range always end exactly on MAX_VALUE
if|if
condition|(
name|ranges
operator|.
name|size
argument_list|()
operator|==
name|partitions
operator|-
literal|1
condition|)
block|{
name|end
operator|=
name|max
expr_stmt|;
block|}
name|ranges
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
operator|(
name|int
operator|)
name|start
argument_list|,
operator|(
name|int
operator|)
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
operator|+
literal|1L
expr_stmt|;
block|}
return|return
name|ranges
return|;
block|}
block|}
end_class
end_unit
