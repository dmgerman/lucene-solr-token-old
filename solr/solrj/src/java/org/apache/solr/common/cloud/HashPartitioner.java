begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * Class to partition int range into n ranges.  *   */
end_comment
begin_class
DECL|class|HashPartitioner
specifier|public
class|class
name|HashPartitioner
block|{
DECL|class|Range
specifier|public
specifier|static
class|class
name|Range
block|{
DECL|field|min
specifier|public
name|long
name|min
decl_stmt|;
DECL|field|max
specifier|public
name|long
name|max
decl_stmt|;
DECL|method|Range
specifier|public
name|Range
parameter_list|(
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
block|}
comment|/**    * works up to 65537 before requested num of ranges is one short    *     * @param partitions    * @return    */
DECL|method|partitionRange
specifier|public
name|List
argument_list|<
name|Range
argument_list|>
name|partitionRange
parameter_list|(
name|int
name|partitions
parameter_list|)
block|{
comment|// some hokey code to partition the int space
name|long
name|range
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|+
operator|(
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
operator|)
decl_stmt|;
name|long
name|srange
init|=
name|range
operator|/
name|partitions
decl_stmt|;
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|(
name|partitions
argument_list|)
decl_stmt|;
name|long
name|end
init|=
literal|0
decl_stmt|;
name|long
name|start
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
while|while
condition|(
name|end
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|end
operator|=
name|start
operator|+
name|srange
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
operator|+
literal|1L
expr_stmt|;
block|}
return|return
name|ranges
return|;
block|}
block|}
end_class
end_unit
