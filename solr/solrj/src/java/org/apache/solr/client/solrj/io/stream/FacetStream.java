begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|MultipleFieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Bucket
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_comment
comment|/**  *  The FacetStream abstracts the output from the JSON facet API as a Stream of Tuples. This provides an alternative to the  *  RollupStream which uses Map/Reduce to perform aggregations.  **/
end_comment
begin_class
DECL|class|FacetStream
specifier|public
class|class
name|FacetStream
extends|extends
name|TupleStream
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|buckets
specifier|private
name|Bucket
index|[]
name|buckets
decl_stmt|;
DECL|field|metrics
specifier|private
name|Metric
index|[]
name|metrics
decl_stmt|;
DECL|field|limit
specifier|private
name|int
name|limit
decl_stmt|;
DECL|field|sorts
specifier|private
name|FieldComparator
index|[]
name|sorts
decl_stmt|;
DECL|field|tuples
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|field|zkHost
specifier|private
name|String
name|zkHost
decl_stmt|;
DECL|field|props
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|cache
specifier|protected
specifier|transient
name|SolrClientCache
name|cache
decl_stmt|;
DECL|field|cloudSolrClient
specifier|protected
specifier|transient
name|CloudSolrClient
name|cloudSolrClient
decl_stmt|;
DECL|method|FacetStream
specifier|public
name|FacetStream
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|Bucket
index|[]
name|buckets
parameter_list|,
name|Metric
index|[]
name|metrics
parameter_list|,
name|FieldComparator
index|[]
name|sorts
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|zkHost
operator|=
name|zkHost
expr_stmt|;
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
name|this
operator|.
name|buckets
operator|=
name|buckets
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|cache
operator|=
name|context
operator|.
name|getSolrClientCache
argument_list|()
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
return|return
name|l
return|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cloudSolrClient
operator|=
name|cache
operator|.
name|getCloudSolrClient
argument_list|(
name|zkHost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cloudSolrClient
operator|=
operator|new
name|CloudSolrClient
argument_list|(
name|zkHost
argument_list|)
expr_stmt|;
block|}
name|FieldComparator
index|[]
name|adjustedSorts
init|=
name|adjustSorts
argument_list|(
name|buckets
argument_list|,
name|sorts
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|getJsonFacetString
argument_list|(
name|buckets
argument_list|,
name|metrics
argument_list|,
name|adjustedSorts
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
name|getParams
argument_list|(
name|this
operator|.
name|props
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"json.facet"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
try|try
block|{
name|NamedList
name|response
init|=
name|cloudSolrClient
operator|.
name|request
argument_list|(
name|request
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|getTuples
argument_list|(
name|response
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|,
name|getStreamSort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cloudSolrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|<
name|tuples
operator|.
name|size
argument_list|()
operator|&&
name|index
operator|<
name|limit
condition|)
block|{
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
operator|++
name|index
expr_stmt|;
return|return
name|tuple
return|;
block|}
else|else
block|{
name|Map
name|fields
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
operator|new
name|Tuple
argument_list|(
name|fields
argument_list|)
decl_stmt|;
return|return
name|tuple
return|;
block|}
block|}
DECL|method|getParams
specifier|private
name|ModifiableSolrParams
name|getParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|props
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
DECL|method|getJsonFacetString
specifier|private
name|String
name|getJsonFacetString
parameter_list|(
name|Bucket
index|[]
name|_buckets
parameter_list|,
name|Metric
index|[]
name|_metrics
parameter_list|,
name|FieldComparator
index|[]
name|_sorts
parameter_list|,
name|int
name|_limit
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendJson
argument_list|(
name|buf
argument_list|,
name|_buckets
argument_list|,
name|_metrics
argument_list|,
name|_sorts
argument_list|,
name|_limit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|"{"
operator|+
name|buf
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
return|;
block|}
DECL|method|adjustSorts
specifier|private
name|FieldComparator
index|[]
name|adjustSorts
parameter_list|(
name|Bucket
index|[]
name|_buckets
parameter_list|,
name|FieldComparator
index|[]
name|_sorts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|_buckets
operator|.
name|length
operator|==
name|_sorts
operator|.
name|length
condition|)
block|{
return|return
name|_sorts
return|;
block|}
elseif|else
if|if
condition|(
name|_sorts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|FieldComparator
index|[]
name|adjustedSorts
init|=
operator|new
name|FieldComparator
index|[
name|_buckets
operator|.
name|length
index|]
decl_stmt|;
if|if
condition|(
name|_sorts
index|[
literal|0
index|]
operator|.
name|getFieldName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
comment|//Its a metric sort so apply the same sort criteria at each level.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|adjustedSorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|adjustedSorts
index|[
name|i
index|]
operator|=
name|_sorts
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Its an index sort so apply an index sort at each level.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|adjustedSorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|adjustedSorts
index|[
name|i
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
name|_buckets
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|_sorts
index|[
literal|0
index|]
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|adjustedSorts
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"If multiple sorts are specified there must be a sort for each bucket."
argument_list|)
throw|;
block|}
block|}
DECL|method|appendJson
specifier|private
name|void
name|appendJson
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|Bucket
index|[]
name|_buckets
parameter_list|,
name|Metric
index|[]
name|_metrics
parameter_list|,
name|FieldComparator
index|[]
name|_sorts
parameter_list|,
name|int
name|_limit
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|_buckets
index|[
name|level
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|":{"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\"type\":\"terms\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|",\"field\":\""
operator|+
name|_buckets
index|[
name|level
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|",\"limit\":"
operator|+
name|_limit
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|",\"sort\":{\""
operator|+
name|getFacetSort
argument_list|(
name|_sorts
index|[
name|level
index|]
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|_metrics
argument_list|)
operator|+
literal|"\":\""
operator|+
name|_sorts
index|[
name|level
index|]
operator|.
name|getOrder
argument_list|()
operator|+
literal|"\"}"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|",\"facet\":{"
argument_list|)
expr_stmt|;
name|int
name|metricCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|_metrics
control|)
block|{
name|String
name|identifier
init|=
name|metric
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|startsWith
argument_list|(
literal|"count("
argument_list|)
condition|)
block|{
if|if
condition|(
name|metricCount
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\"facet_"
operator|+
name|metricCount
operator|+
literal|"\":\""
operator|+
name|identifier
operator|+
literal|"\""
argument_list|)
expr_stmt|;
operator|++
name|metricCount
expr_stmt|;
block|}
block|}
operator|++
name|level
expr_stmt|;
if|if
condition|(
name|level
operator|<
name|_buckets
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|metricCount
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|appendJson
argument_list|(
name|buf
argument_list|,
name|_buckets
argument_list|,
name|_metrics
argument_list|,
name|_sorts
argument_list|,
name|_limit
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"}}"
argument_list|)
expr_stmt|;
block|}
DECL|method|getFacetSort
specifier|private
name|String
name|getFacetSort
parameter_list|(
name|String
name|id
parameter_list|,
name|Metric
index|[]
name|_metrics
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|_metrics
control|)
block|{
if|if
condition|(
name|metric
operator|.
name|getIdentifier
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"count("
argument_list|)
condition|)
block|{
if|if
condition|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"count("
argument_list|)
condition|)
block|{
return|return
literal|"count"
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|_metrics
index|[
name|index
index|]
operator|.
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"facet_"
operator|+
name|index
return|;
block|}
operator|++
name|index
expr_stmt|;
block|}
block|}
return|return
literal|"index"
return|;
block|}
DECL|method|getTuples
specifier|private
name|void
name|getTuples
parameter_list|(
name|NamedList
name|response
parameter_list|,
name|Bucket
index|[]
name|buckets
parameter_list|,
name|Metric
index|[]
name|metrics
parameter_list|)
block|{
name|Tuple
name|tuple
init|=
operator|new
name|Tuple
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
name|facets
init|=
operator|(
name|NamedList
operator|)
name|response
operator|.
name|get
argument_list|(
literal|"facets"
argument_list|)
decl_stmt|;
name|fillTuples
argument_list|(
literal|0
argument_list|,
name|tuples
argument_list|,
name|tuple
argument_list|,
name|facets
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
DECL|method|fillTuples
specifier|private
name|void
name|fillTuples
parameter_list|(
name|int
name|level
parameter_list|,
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|Tuple
name|currentTuple
parameter_list|,
name|NamedList
name|facets
parameter_list|,
name|Bucket
index|[]
name|_buckets
parameter_list|,
name|Metric
index|[]
name|_metrics
parameter_list|)
block|{
name|String
name|bucketName
init|=
name|_buckets
index|[
name|level
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|NamedList
name|nl
init|=
operator|(
name|NamedList
operator|)
name|facets
operator|.
name|get
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|List
name|allBuckets
init|=
operator|(
name|List
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|allBuckets
operator|.
name|size
argument_list|()
condition|;
name|b
operator|++
control|)
block|{
name|NamedList
name|bucket
init|=
operator|(
name|NamedList
operator|)
name|allBuckets
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|bucket
operator|.
name|get
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|currentTuple
operator|.
name|clone
argument_list|()
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|bucketName
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|int
name|nextLevel
init|=
name|level
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|nextLevel
operator|<
name|_buckets
operator|.
name|length
condition|)
block|{
name|fillTuples
argument_list|(
name|nextLevel
argument_list|,
name|tuples
argument_list|,
name|t
operator|.
name|clone
argument_list|()
argument_list|,
name|bucket
argument_list|,
name|_buckets
argument_list|,
name|_metrics
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|m
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|_metrics
control|)
block|{
name|String
name|identifier
init|=
name|metric
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|startsWith
argument_list|(
literal|"count("
argument_list|)
condition|)
block|{
name|double
name|d
init|=
operator|(
name|double
operator|)
name|bucket
operator|.
name|get
argument_list|(
literal|"facet_"
operator|+
name|m
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|d
argument_list|)
expr_stmt|;
operator|++
name|m
expr_stmt|;
block|}
else|else
block|{
name|long
name|l
init|=
operator|(
name|long
operator|)
name|bucket
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
literal|"count(*)"
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
if|if
condition|(
name|sorts
operator|.
name|length
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|MultipleFieldComparator
argument_list|(
name|sorts
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|sorts
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
end_class
end_unit
