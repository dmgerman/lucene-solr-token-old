begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.ops
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_comment
comment|/**  * Replaces some tuple value with another. The replacement value can be either a given value or the   * value of another field in the tuple. The expression for a replace operation can be of multiple forms:  *  replace(fieldA, 0, withValue=100)  // for fieldA if equals 0 then set to 100  *  replace(fieldA, null, withValue=0) // for fieldA if null then set to 0  *  replace(fieldA, null, withField=fieldB) // for fieldA if null then set to the value of fieldB (if fieldB is null then fieldA will end up as null)  *  replace(fieldA, 0, withField=fieldB) // for fieldA if 0 then set to the value of fieldB (if fieldB is 0 then fieldA will end up as 0)  *  replace(fieldA, "Izzy and Kayden", withValue="my kids")  *    * You can also construct these without the field name in the expression but that does require that you provide the field name during construction.  * This is most useful during metric calculation because when calculating a metric you have already provided a field name in the metric so there  * is no reason to have to provide the field name again in the operation  *  sum(fieldA, replace(null, withValue=0)) // performs the replacement on fieldA  *    * Equality is determined by the standard type .equals() functions.  */
end_comment
begin_class
DECL|class|ReplaceOperation
specifier|public
class|class
name|ReplaceOperation
implements|implements
name|StreamOperation
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|replacer
specifier|private
name|StreamOperation
name|replacer
decl_stmt|;
DECL|method|ReplaceOperation
specifier|public
name|ReplaceOperation
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
DECL|method|ReplaceOperation
specifier|public
name|ReplaceOperation
parameter_list|(
name|String
name|forField
parameter_list|,
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExpressionNamedParameter
name|withValue
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"withValue"
argument_list|)
decl_stmt|;
name|StreamExpressionNamedParameter
name|withField
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"withField"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|withValue
operator|&&
literal|null
operator|==
name|withField
condition|)
block|{
name|replacer
operator|=
operator|new
name|ReplaceWithValueOperation
argument_list|(
name|forField
argument_list|,
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|withField
operator|&&
literal|null
operator|==
name|withValue
condition|)
block|{
name|replacer
operator|=
operator|new
name|ReplaceWithFieldOperation
argument_list|(
name|forField
argument_list|,
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|withValue
operator|&&
literal|null
operator|!=
name|withField
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting either withValue or withField parameter but found both"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting withValue or withField parameter but found neither"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|operate
specifier|public
name|void
name|operate
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
block|{
name|replacer
operator|.
name|operate
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|replacer
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|replacer
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
return|;
block|}
block|}
end_class
end_unit
