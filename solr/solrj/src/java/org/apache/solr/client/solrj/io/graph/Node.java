begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.graph
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|graph
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_class
DECL|class|Node
specifier|public
class|class
name|Node
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|metrics
specifier|private
name|List
argument_list|<
name|Metric
argument_list|>
name|metrics
decl_stmt|;
DECL|field|ancestors
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|ancestors
decl_stmt|;
DECL|method|Node
specifier|public
name|Node
parameter_list|(
name|String
name|id
parameter_list|,
name|boolean
name|track
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|track
condition|)
block|{
name|ancestors
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setMetrics
specifier|public
name|void
name|setMetrics
parameter_list|(
name|List
argument_list|<
name|Metric
argument_list|>
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|String
name|ancestor
parameter_list|,
name|Tuple
name|tuple
parameter_list|)
block|{
if|if
condition|(
name|ancestors
operator|!=
literal|null
condition|)
block|{
name|ancestors
operator|.
name|add
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
name|metric
operator|.
name|update
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|toTuple
specifier|public
name|Tuple
name|toTuple
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|level
parameter_list|,
name|Traversal
name|traversal
parameter_list|)
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"level"
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|boolean
name|prependCollection
init|=
name|traversal
operator|.
name|isMultiCollection
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|traversal
operator|.
name|getCollections
argument_list|()
decl_stmt|;
if|if
condition|(
name|ancestors
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ancestor
range|:
name|ancestors
control|)
block|{
name|String
index|[]
name|ancestorParts
init|=
name|ancestor
operator|.
name|split
argument_list|(
literal|"\\^"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prependCollection
condition|)
block|{
comment|//prepend the collection
name|int
name|colIndex
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ancestorParts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
operator|+
literal|"/"
operator|+
name|ancestorParts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use only the ancestor id.
name|l
operator|.
name|add
argument_list|(
name|ancestorParts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|map
operator|.
name|put
argument_list|(
literal|"ancestors"
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|metric
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|metric
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
end_class
end_unit
