begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|MultipleFieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|FieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|MultipleFieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|StreamEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_comment
comment|/**  * Joins leftStream with rightStream based on a Equalitor. Both streams must be sorted by the fields being joined on.  * Resulting stream is sorted by the equalitor.  **/
end_comment
begin_class
DECL|class|LeftOuterJoinStream
specifier|public
class|class
name|LeftOuterJoinStream
extends|extends
name|BiJoinStream
implements|implements
name|Expressible
block|{
DECL|field|joinedTuples
specifier|private
name|LinkedList
argument_list|<
name|Tuple
argument_list|>
name|joinedTuples
init|=
operator|new
name|LinkedList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|leftTupleGroup
specifier|private
name|LinkedList
argument_list|<
name|Tuple
argument_list|>
name|leftTupleGroup
init|=
operator|new
name|LinkedList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rightTupleGroup
specifier|private
name|LinkedList
argument_list|<
name|Tuple
argument_list|>
name|rightTupleGroup
init|=
operator|new
name|LinkedList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|LeftOuterJoinStream
specifier|public
name|LeftOuterJoinStream
parameter_list|(
name|TupleStream
name|leftStream
parameter_list|,
name|TupleStream
name|rightStream
parameter_list|,
name|StreamEqualitor
name|eq
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|leftStream
argument_list|,
name|rightStream
argument_list|,
name|eq
argument_list|)
expr_stmt|;
block|}
DECL|method|LeftOuterJoinStream
specifier|public
name|LeftOuterJoinStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
comment|// if we've already figured out the next joined tuple then just return it
if|if
condition|(
name|joinedTuples
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|joinedTuples
operator|.
name|removeFirst
argument_list|()
return|;
block|}
comment|// keep going until we find something to return or left stream is empty
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
literal|0
operator|==
name|leftTupleGroup
operator|.
name|size
argument_list|()
condition|)
block|{
name|Tuple
name|firstMember
init|=
name|loadEqualTupleGroup
argument_list|(
name|leftStream
argument_list|,
name|leftTupleGroup
argument_list|,
name|leftStreamComparator
argument_list|)
decl_stmt|;
comment|// if first member of group is EOF then we're done
if|if
condition|(
name|firstMember
operator|.
name|EOF
condition|)
block|{
return|return
name|firstMember
return|;
block|}
block|}
if|if
condition|(
literal|0
operator|==
name|rightTupleGroup
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Load the right tuple group, but don't end if it's EOF
name|loadEqualTupleGroup
argument_list|(
name|rightStream
argument_list|,
name|rightTupleGroup
argument_list|,
name|rightStreamComparator
argument_list|)
expr_stmt|;
block|}
comment|// If the right stream is at the EOF, we just return the next element from the left stream
if|if
condition|(
literal|0
operator|==
name|rightTupleGroup
operator|.
name|size
argument_list|()
operator|||
name|rightTupleGroup
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|EOF
condition|)
block|{
return|return
name|leftTupleGroup
operator|.
name|removeFirst
argument_list|()
return|;
block|}
comment|// At this point we know both left and right groups have at least 1 member
if|if
condition|(
name|eq
operator|.
name|test
argument_list|(
name|leftTupleGroup
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rightTupleGroup
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
comment|// The groups are equal. Join em together and build the joinedTuples
for|for
control|(
name|Tuple
name|left
range|:
name|leftTupleGroup
control|)
block|{
for|for
control|(
name|Tuple
name|right
range|:
name|rightTupleGroup
control|)
block|{
name|Tuple
name|clone
init|=
name|left
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|merge
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|joinedTuples
operator|.
name|add
argument_list|(
name|clone
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Cause each to advance next time we need to look
name|leftTupleGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rightTupleGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|joinedTuples
operator|.
name|removeFirst
argument_list|()
return|;
block|}
else|else
block|{
name|int
name|c
init|=
name|iterationComparator
operator|.
name|compare
argument_list|(
name|leftTupleGroup
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rightTupleGroup
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
comment|// If there's no match, we still advance the left stream while returning every element.
comment|// Because it's a left-outer join we still return the left tuple if no match on right.
return|return
name|leftTupleGroup
operator|.
name|removeFirst
argument_list|()
return|;
block|}
else|else
block|{
comment|// advance right
name|rightTupleGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
name|iterationComparator
return|;
block|}
block|}
end_class
end_unit
