begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|HighlightParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|StatsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|TermsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtil
import|;
end_import
begin_comment
comment|/**  * This is an augmented SolrParams with get/set/add fields for common fields used  * in the Standard and Dismax request handlers  *   *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|SolrQuery
specifier|public
class|class
name|SolrQuery
extends|extends
name|ModifiableSolrParams
block|{
DECL|field|DOCID
specifier|public
specifier|static
specifier|final
name|String
name|DOCID
init|=
literal|"_docid_"
decl_stmt|;
comment|// duplicate of org.apache.solr.search.QueryParsing.DOCID which is not accessible from here
DECL|enum|ORDER
DECL|enum constant|desc
DECL|enum constant|asc
specifier|public
enum|enum
name|ORDER
block|{
name|desc
block|,
name|asc
block|;
DECL|method|reverse
specifier|public
name|ORDER
name|reverse
parameter_list|()
block|{
return|return
operator|(
name|this
operator|==
name|asc
operator|)
condition|?
name|desc
else|:
name|asc
return|;
block|}
block|}
comment|/** Maintains a map of current sorts */
DECL|field|sortClauses
specifier|private
name|List
argument_list|<
name|SortClause
argument_list|>
name|sortClauses
decl_stmt|;
DECL|method|SolrQuery
specifier|public
name|SolrQuery
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** Create a new SolrQuery    *     * @param q query string    */
DECL|method|SolrQuery
specifier|public
name|SolrQuery
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
comment|/** enable/disable terms.      *     * @param b flag to indicate terms should be enabled.<br /> if b==false, removes all other terms parameters    * @return Current reference (<i>this</i>)    */
DECL|method|setTerms
specifier|public
name|SolrQuery
name|setTerms
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_FIELD
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_LOWER
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_UPPER
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_UPPER_INCLUSIVE
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_LOWER_INCLUSIVE
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_LIMIT
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_PREFIX_STR
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_MINCOUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_MAXCOUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_RAW
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_SORT
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_REGEXP_STR
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|TermsParams
operator|.
name|TERMS_REGEXP_FLAG
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getTerms
specifier|public
name|boolean
name|getTerms
parameter_list|()
block|{
return|return
name|this
operator|.
name|getBool
argument_list|(
name|TermsParams
operator|.
name|TERMS
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|addTermsField
specifier|public
name|SolrQuery
name|addTermsField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|add
argument_list|(
name|TermsParams
operator|.
name|TERMS_FIELD
argument_list|,
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsFields
specifier|public
name|String
index|[]
name|getTermsFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|getParams
argument_list|(
name|TermsParams
operator|.
name|TERMS_FIELD
argument_list|)
return|;
block|}
DECL|method|setTermsLower
specifier|public
name|SolrQuery
name|setTermsLower
parameter_list|(
name|String
name|lower
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_LOWER
argument_list|,
name|lower
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsLower
specifier|public
name|String
name|getTermsLower
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|TermsParams
operator|.
name|TERMS_LOWER
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|setTermsUpper
specifier|public
name|SolrQuery
name|setTermsUpper
parameter_list|(
name|String
name|upper
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_UPPER
argument_list|,
name|upper
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsUpper
specifier|public
name|String
name|getTermsUpper
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|TermsParams
operator|.
name|TERMS_UPPER
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|setTermsUpperInclusive
specifier|public
name|SolrQuery
name|setTermsUpperInclusive
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_UPPER_INCLUSIVE
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsUpperInclusive
specifier|public
name|boolean
name|getTermsUpperInclusive
parameter_list|()
block|{
return|return
name|this
operator|.
name|getBool
argument_list|(
name|TermsParams
operator|.
name|TERMS_UPPER_INCLUSIVE
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setTermsLowerInclusive
specifier|public
name|SolrQuery
name|setTermsLowerInclusive
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_LOWER_INCLUSIVE
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsLowerInclusive
specifier|public
name|boolean
name|getTermsLowerInclusive
parameter_list|()
block|{
return|return
name|this
operator|.
name|getBool
argument_list|(
name|TermsParams
operator|.
name|TERMS_LOWER_INCLUSIVE
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|setTermsLimit
specifier|public
name|SolrQuery
name|setTermsLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_LIMIT
argument_list|,
name|limit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsLimit
specifier|public
name|int
name|getTermsLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|TermsParams
operator|.
name|TERMS_LIMIT
argument_list|,
literal|10
argument_list|)
return|;
block|}
DECL|method|setTermsMinCount
specifier|public
name|SolrQuery
name|setTermsMinCount
parameter_list|(
name|int
name|cnt
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_MINCOUNT
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsMinCount
specifier|public
name|int
name|getTermsMinCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|TermsParams
operator|.
name|TERMS_MINCOUNT
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|setTermsMaxCount
specifier|public
name|SolrQuery
name|setTermsMaxCount
parameter_list|(
name|int
name|cnt
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_MAXCOUNT
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsMaxCount
specifier|public
name|int
name|getTermsMaxCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|TermsParams
operator|.
name|TERMS_MAXCOUNT
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|setTermsPrefix
specifier|public
name|SolrQuery
name|setTermsPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_PREFIX_STR
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsPrefix
specifier|public
name|String
name|getTermsPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|TermsParams
operator|.
name|TERMS_PREFIX_STR
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|setTermsRaw
specifier|public
name|SolrQuery
name|setTermsRaw
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_RAW
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsRaw
specifier|public
name|boolean
name|getTermsRaw
parameter_list|()
block|{
return|return
name|this
operator|.
name|getBool
argument_list|(
name|TermsParams
operator|.
name|TERMS_RAW
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setTermsSortString
specifier|public
name|SolrQuery
name|setTermsSortString
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_SORT
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsSortString
specifier|public
name|String
name|getTermsSortString
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|TermsParams
operator|.
name|TERMS_SORT
argument_list|,
name|TermsParams
operator|.
name|TERMS_SORT_COUNT
argument_list|)
return|;
block|}
DECL|method|setTermsRegex
specifier|public
name|SolrQuery
name|setTermsRegex
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|TermsParams
operator|.
name|TERMS_REGEXP_STR
argument_list|,
name|regex
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsRegex
specifier|public
name|String
name|getTermsRegex
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|TermsParams
operator|.
name|TERMS_REGEXP_STR
argument_list|)
return|;
block|}
DECL|method|setTermsRegexFlag
specifier|public
name|SolrQuery
name|setTermsRegexFlag
parameter_list|(
name|String
name|flag
parameter_list|)
block|{
name|this
operator|.
name|add
argument_list|(
name|TermsParams
operator|.
name|TERMS_REGEXP_FLAG
argument_list|,
name|flag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermsRegexFlags
specifier|public
name|String
index|[]
name|getTermsRegexFlags
parameter_list|()
block|{
return|return
name|this
operator|.
name|getParams
argument_list|(
name|TermsParams
operator|.
name|TERMS_REGEXP_FLAG
argument_list|)
return|;
block|}
comment|/** Add field(s) for facet computation.    *     * @param fields Array of field names from the IndexSchema    * @return this    */
DECL|method|addFacetField
specifier|public
name|SolrQuery
name|addFacetField
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Add field(s) for pivot computation.    *     * pivot fields are comma separated    *     * @param fields Array of field names from the IndexSchema    * @return this    */
DECL|method|addFacetPivotField
specifier|public
name|SolrQuery
name|addFacetPivotField
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add a numeric range facet.    *    * @param field The field    * @param start The start of range    * @param end The end of the range    * @param gap The gap between each count    * @return this    */
DECL|method|addNumericRangeFacet
specifier|public
name|SolrQuery
name|addNumericRangeFacet
parameter_list|(
name|String
name|field
parameter_list|,
name|Number
name|start
parameter_list|,
name|Number
name|end
parameter_list|,
name|Number
name|gap
parameter_list|)
block|{
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"f.%s.%s"
argument_list|,
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_START
argument_list|)
argument_list|,
name|start
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"f.%s.%s"
argument_list|,
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_END
argument_list|)
argument_list|,
name|end
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"f.%s.%s"
argument_list|,
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_GAP
argument_list|)
argument_list|,
name|gap
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add a numeric range facet.    *    * @param field The field    * @param start The start of range    * @param end The end of the range    * @param gap The gap between each count    * @return this    */
DECL|method|addDateRangeFacet
specifier|public
name|SolrQuery
name|addDateRangeFacet
parameter_list|(
name|String
name|field
parameter_list|,
name|Date
name|start
parameter_list|,
name|Date
name|end
parameter_list|,
name|String
name|gap
parameter_list|)
block|{
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"f.%s.%s"
argument_list|,
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_START
argument_list|)
argument_list|,
name|DateUtil
operator|.
name|getThreadLocalDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"f.%s.%s"
argument_list|,
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_END
argument_list|)
argument_list|,
name|DateUtil
operator|.
name|getThreadLocalDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"f.%s.%s"
argument_list|,
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_RANGE_GAP
argument_list|)
argument_list|,
name|gap
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add Interval Faceting on a field. All intervals for the same field should be included    * in the same call to this method.    * For syntax documentation see<a href="https://wiki.apache.org/solr/SimpleFacetParameters#Interval_Faceting">Solr wiki</a>    *     * @param field the field to add facet intervals    * @param intervals Intervals to be used for faceting. It can be an empty array, but it can't     * be<code>null</code>    * @return this    */
DECL|method|addIntervalFacets
specifier|public
name|SolrQuery
name|addIntervalFacets
parameter_list|(
name|String
name|field
parameter_list|,
name|String
index|[]
name|intervals
parameter_list|)
block|{
if|if
condition|(
name|intervals
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't add null intervals"
argument_list|)
throw|;
block|}
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_INTERVAL
argument_list|,
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|interval
range|:
name|intervals
control|)
block|{
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"f.%s.facet.interval.set"
argument_list|,
name|field
argument_list|)
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Remove all Interval Facets on a field    *     * @param field the field to remove from facet intervals    * @return Array of current intervals for<code>field</code>    */
DECL|method|removeIntervalFacets
specifier|public
name|String
index|[]
name|removeIntervalFacets
parameter_list|(
name|String
name|field
parameter_list|)
block|{
while|while
condition|(
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_INTERVAL
argument_list|,
name|field
argument_list|)
condition|)
block|{}
empty_stmt|;
return|return
name|remove
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"f.%s.facet.interval.set"
argument_list|,
name|field
argument_list|)
argument_list|)
return|;
block|}
comment|/** get the facet fields    *     * @return string array of facet fields or null if not set/empty    */
DECL|method|getFacetFields
specifier|public
name|String
index|[]
name|getFacetFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
return|;
block|}
comment|/** remove a facet field    *     * @param name Name of the facet field to be removed.    *     * @return true, if the item was removed.<br />    *           false, if the facet field was null or did not exist.    */
DECL|method|removeFacetField
specifier|public
name|boolean
name|removeFacetField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|boolean
name|b
init|=
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|get
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
operator|==
literal|null
operator|&&
name|this
operator|.
name|get
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setFacet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
comment|/** enable/disable faceting.      *     * @param b flag to indicate faceting should be enabled.<br /> if b==false, removes all other faceting parameters    * @return Current reference (<i>this</i>)    */
DECL|method|setFacet
specifier|public
name|SolrQuery
name|setFacet
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_MISSING
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_PREFIX
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_ZEROS
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_PREFIX
argument_list|)
expr_stmt|;
comment|// does not include the individual fields...
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_INTERVAL
argument_list|)
expr_stmt|;
comment|// does not remove interval parameters
block|}
return|return
name|this
return|;
block|}
DECL|method|setFacetPrefix
specifier|public
name|SolrQuery
name|setFacetPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setFacetPrefix
specifier|public
name|SolrQuery
name|setFacetPrefix
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|field
operator|+
literal|"."
operator|+
name|FacetParams
operator|.
name|FACET_PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** add a faceting query    *     * @param f facet query    */
DECL|method|addFacetQuery
specifier|public
name|SolrQuery
name|addFacetQuery
parameter_list|(
name|String
name|f
parameter_list|)
block|{
name|this
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** get facet queries    *     * @return all facet queries or null if not set/empty    */
DECL|method|getFacetQuery
specifier|public
name|String
index|[]
name|getFacetQuery
parameter_list|()
block|{
return|return
name|this
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
return|;
block|}
comment|/** remove a facet query    *     * @param q the facet query to remove    * @return true if the facet query was removed false otherwise    */
DECL|method|removeFacetQuery
specifier|public
name|boolean
name|removeFacetQuery
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|boolean
name|b
init|=
name|this
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|get
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
operator|==
literal|null
operator|&&
name|this
operator|.
name|get
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setFacet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
comment|/** set the facet limit    *     * @param lim number facet items to return    */
DECL|method|setFacetLimit
specifier|public
name|SolrQuery
name|setFacetLimit
parameter_list|(
name|int
name|lim
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
name|lim
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** get current facet limit    *     * @return facet limit or default of 25    */
DECL|method|getFacetLimit
specifier|public
name|int
name|getFacetLimit
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|25
argument_list|)
return|;
block|}
comment|/** set facet minimum count    *     * @param cnt facets having less that cnt hits will be excluded from teh facet list    */
DECL|method|setFacetMinCount
specifier|public
name|SolrQuery
name|setFacetMinCount
parameter_list|(
name|int
name|cnt
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** get facet minimum count    *     * @return facet minimum count or default of 1    */
DECL|method|getFacetMinCount
specifier|public
name|int
name|getFacetMinCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * Sets facet missing boolean flag     *     * @param v flag to indicate the field of  {@link FacetParams#FACET_MISSING} .    * @return this    */
DECL|method|setFacetMissing
specifier|public
name|SolrQuery
name|setFacetMissing
parameter_list|(
name|Boolean
name|v
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_MISSING
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @deprecated use {@link #setFacetMissing(Boolean)}    */
annotation|@
name|Deprecated
DECL|method|setMissing
specifier|public
name|SolrQuery
name|setMissing
parameter_list|(
name|String
name|fld
parameter_list|)
block|{
return|return
name|setFacetMissing
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fld
argument_list|)
argument_list|)
return|;
block|}
comment|/** get facet sort    *     * @return facet sort or default of {@link FacetParams#FACET_SORT_COUNT}    */
DECL|method|getFacetSortString
specifier|public
name|String
name|getFacetSortString
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
return|;
block|}
comment|/** get facet sort    *     * @return facet sort or default of true.<br />    * true corresponds to    * {@link FacetParams#FACET_SORT_COUNT} and<br />false to {@link FacetParams#FACET_SORT_INDEX}    *     * @deprecated Use {@link #getFacetSortString()} instead.    */
annotation|@
name|Deprecated
DECL|method|getFacetSort
specifier|public
name|boolean
name|getFacetSort
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
return|;
block|}
comment|/** set facet sort    *     * @param sort sort facets    * @return this    */
DECL|method|setFacetSort
specifier|public
name|SolrQuery
name|setFacetSort
parameter_list|(
name|String
name|sort
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|sort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** set facet sort    *     * @param sort sort facets    * @return this    * @deprecated Use {@link #setFacetSort(String)} instead, true corresponds to    * {@link FacetParams#FACET_SORT_COUNT} and false to {@link FacetParams#FACET_SORT_INDEX}.    */
annotation|@
name|Deprecated
DECL|method|setFacetSort
specifier|public
name|SolrQuery
name|setFacetSort
parameter_list|(
name|boolean
name|sort
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|sort
operator|==
literal|true
condition|?
name|FacetParams
operator|.
name|FACET_SORT_COUNT
else|:
name|FacetParams
operator|.
name|FACET_SORT_INDEX
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** add highlight field    *     * @param f field to enable for highlighting    */
DECL|method|addHighlightField
specifier|public
name|SolrQuery
name|addHighlightField
parameter_list|(
name|String
name|f
parameter_list|)
block|{
name|this
operator|.
name|add
argument_list|(
name|HighlightParams
operator|.
name|FIELDS
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|HighlightParams
operator|.
name|HIGHLIGHT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** remove a field for highlighting    *     * @param f field name to not highlight    * @return<i>true</i>, if removed,<br /><i>false</i>, otherwise    */
DECL|method|removeHighlightField
specifier|public
name|boolean
name|removeHighlightField
parameter_list|(
name|String
name|f
parameter_list|)
block|{
name|boolean
name|b
init|=
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|FIELDS
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|get
argument_list|(
name|HighlightParams
operator|.
name|FIELDS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setHighlight
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
comment|/** get list of highlighted fields    *     * @return Array of highlight fields or null if not set/empty    */
DECL|method|getHighlightFields
specifier|public
name|String
index|[]
name|getHighlightFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|getParams
argument_list|(
name|HighlightParams
operator|.
name|FIELDS
argument_list|)
return|;
block|}
DECL|method|setHighlightSnippets
specifier|public
name|SolrQuery
name|setHighlightSnippets
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|HighlightParams
operator|.
name|SNIPPETS
argument_list|,
name|num
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHighlightSnippets
specifier|public
name|int
name|getHighlightSnippets
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|HighlightParams
operator|.
name|SNIPPETS
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|setHighlightFragsize
specifier|public
name|SolrQuery
name|setHighlightFragsize
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|HighlightParams
operator|.
name|FRAGSIZE
argument_list|,
name|num
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHighlightFragsize
specifier|public
name|int
name|getHighlightFragsize
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|HighlightParams
operator|.
name|FRAGSIZE
argument_list|,
literal|100
argument_list|)
return|;
block|}
DECL|method|setHighlightRequireFieldMatch
specifier|public
name|SolrQuery
name|setHighlightRequireFieldMatch
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|HighlightParams
operator|.
name|FIELD_MATCH
argument_list|,
name|flag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHighlightRequireFieldMatch
specifier|public
name|boolean
name|getHighlightRequireFieldMatch
parameter_list|()
block|{
return|return
name|this
operator|.
name|getBool
argument_list|(
name|HighlightParams
operator|.
name|FIELD_MATCH
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setHighlightSimplePre
specifier|public
name|SolrQuery
name|setHighlightSimplePre
parameter_list|(
name|String
name|f
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|HighlightParams
operator|.
name|SIMPLE_PRE
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHighlightSimplePre
specifier|public
name|String
name|getHighlightSimplePre
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|HighlightParams
operator|.
name|SIMPLE_PRE
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|setHighlightSimplePost
specifier|public
name|SolrQuery
name|setHighlightSimplePost
parameter_list|(
name|String
name|f
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|HighlightParams
operator|.
name|SIMPLE_POST
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHighlightSimplePost
specifier|public
name|String
name|getHighlightSimplePost
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|HighlightParams
operator|.
name|SIMPLE_POST
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * Replaces the sort string with a single sort field.    * @deprecated Use {@link #setSort(SortClause)} instead, which is part    * of an api handling a wider range of sort specifications.    */
annotation|@
name|Deprecated
DECL|method|setSortField
specifier|public
name|SolrQuery
name|setSortField
parameter_list|(
name|String
name|field
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
name|this
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|)
expr_stmt|;
name|addValueToParam
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
name|toSortString
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Adds a sort field to the end of the sort string.    * @deprecated Use {@link #addSort(SortClause)} instead, which is part    * of an api handling a wider range of sort specifications.    */
annotation|@
name|Deprecated
DECL|method|addSortField
specifier|public
name|SolrQuery
name|addSortField
parameter_list|(
name|String
name|field
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
return|return
name|addValueToParam
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
name|toSortString
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Removes a sort field to the end of the sort string.    * @deprecated Use {@link #removeSort(SortClause)} instead, which is part    * of an api handling a wider range of sort specifications.    */
annotation|@
name|Deprecated
DECL|method|removeSortField
specifier|public
name|SolrQuery
name|removeSortField
parameter_list|(
name|String
name|field
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
name|String
index|[]
name|sorts
init|=
name|getSortFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|sorts
operator|!=
literal|null
condition|)
block|{
name|String
name|removeSort
init|=
name|toSortString
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|join
argument_list|(
name|sorts
argument_list|,
literal|","
argument_list|,
name|removeSort
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|s
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Gets an array of sort specifications.    * @deprecated Use {@link #getSorts()} instead, which is part    * of an api handling a wider range of sort specifications.    */
annotation|@
name|Deprecated
DECL|method|getSortFields
specifier|public
name|String
index|[]
name|getSortFields
parameter_list|()
block|{
name|String
name|s
init|=
name|getSortField
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|s
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|", *"
argument_list|)
return|;
block|}
comment|/**    * Gets the raw sort field, as it will be sent to Solr.    *<p>    * The returned sort field will always contain a serialized version    * of the sort string built using {@link #setSort(SortClause)},    * {@link #addSort(SortClause)}, {@link #addOrUpdateSort(SortClause)},    * {@link #removeSort(SortClause)}, {@link #clearSorts()} and     * {@link #setSorts(List)}.    */
DECL|method|getSortField
specifier|public
name|String
name|getSortField
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|)
return|;
block|}
comment|/**    * Clears current sort information.    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|clearSorts
specifier|public
name|SolrQuery
name|clearSorts
parameter_list|()
block|{
name|sortClauses
operator|=
literal|null
expr_stmt|;
name|serializeSorts
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Replaces the current sort information.    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|setSorts
specifier|public
name|SolrQuery
name|setSorts
parameter_list|(
name|List
argument_list|<
name|SortClause
argument_list|>
name|value
parameter_list|)
block|{
name|sortClauses
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|serializeSorts
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Gets an a list of current sort clauses.    *    * @return an immutable list of current sort clauses    * @since 4.2    */
DECL|method|getSorts
specifier|public
name|List
argument_list|<
name|SortClause
argument_list|>
name|getSorts
parameter_list|()
block|{
if|if
condition|(
name|sortClauses
operator|==
literal|null
condition|)
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
else|else
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|sortClauses
argument_list|)
return|;
block|}
comment|/**    * Replaces the current sort information with a single sort clause    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|setSort
specifier|public
name|SolrQuery
name|setSort
parameter_list|(
name|String
name|field
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
return|return
name|setSort
argument_list|(
operator|new
name|SortClause
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Replaces the current sort information with a single sort clause    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|setSort
specifier|public
name|SolrQuery
name|setSort
parameter_list|(
name|SortClause
name|sortClause
parameter_list|)
block|{
name|clearSorts
argument_list|()
expr_stmt|;
return|return
name|addSort
argument_list|(
name|sortClause
argument_list|)
return|;
block|}
comment|/**    * Adds a single sort clause to the end of the current sort information.    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|addSort
specifier|public
name|SolrQuery
name|addSort
parameter_list|(
name|String
name|field
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
return|return
name|addSort
argument_list|(
operator|new
name|SortClause
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Adds a single sort clause to the end of the query.    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|addSort
specifier|public
name|SolrQuery
name|addSort
parameter_list|(
name|SortClause
name|sortClause
parameter_list|)
block|{
if|if
condition|(
name|sortClauses
operator|==
literal|null
condition|)
name|sortClauses
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|sortClauses
operator|.
name|add
argument_list|(
name|sortClause
argument_list|)
expr_stmt|;
name|serializeSorts
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Updates or adds a single sort clause to the query.    * If the field is already used for sorting, the order    * of the existing field is modified; otherwise, it is    * added to the end.    *<p>    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|addOrUpdateSort
specifier|public
name|SolrQuery
name|addOrUpdateSort
parameter_list|(
name|String
name|field
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
return|return
name|addOrUpdateSort
argument_list|(
operator|new
name|SortClause
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Updates or adds a single sort field specification to the current sort    * information. If the sort field already exist in the sort information map,    * it's position is unchanged and the sort order is set; if it does not exist,    * it is appended at the end with the specified order..    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|addOrUpdateSort
specifier|public
name|SolrQuery
name|addOrUpdateSort
parameter_list|(
name|SortClause
name|sortClause
parameter_list|)
block|{
if|if
condition|(
name|sortClauses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|sortClauses
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|SortClause
name|existing
init|=
name|sortClauses
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|.
name|getItem
argument_list|()
operator|.
name|equals
argument_list|(
name|sortClause
operator|.
name|getItem
argument_list|()
argument_list|)
condition|)
block|{
name|sortClauses
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|sortClause
argument_list|)
expr_stmt|;
name|serializeSorts
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
return|return
name|addSort
argument_list|(
name|sortClause
argument_list|)
return|;
block|}
comment|/**    * Removes a single sort field from the current sort information.    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|removeSort
specifier|public
name|SolrQuery
name|removeSort
parameter_list|(
name|SortClause
name|sortClause
parameter_list|)
block|{
return|return
name|removeSort
argument_list|(
name|sortClause
operator|.
name|getItem
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Removes a single sort field from the current sort information.    *    * @return the modified SolrQuery object, for easy chaining    * @since 4.2    */
DECL|method|removeSort
specifier|public
name|SolrQuery
name|removeSort
parameter_list|(
name|String
name|itemName
parameter_list|)
block|{
if|if
condition|(
name|sortClauses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SortClause
name|existing
range|:
name|sortClauses
control|)
block|{
if|if
condition|(
name|existing
operator|.
name|getItem
argument_list|()
operator|.
name|equals
argument_list|(
name|itemName
argument_list|)
condition|)
block|{
name|sortClauses
operator|.
name|remove
argument_list|(
name|existing
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortClauses
operator|.
name|isEmpty
argument_list|()
condition|)
name|sortClauses
operator|=
literal|null
expr_stmt|;
name|serializeSorts
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|serializeSorts
specifier|private
name|void
name|serializeSorts
parameter_list|()
block|{
if|if
condition|(
name|sortClauses
operator|==
literal|null
operator|||
name|sortClauses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remove
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|SortClause
name|sortClause
range|:
name|sortClauses
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sortClause
operator|.
name|getItem
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sortClause
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|set
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setGetFieldStatistics
specifier|public
name|void
name|setGetFieldStatistics
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|setGetFieldStatistics
specifier|public
name|void
name|setGetFieldStatistics
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|addGetFieldStatistics
specifier|public
name|void
name|addGetFieldStatistics
parameter_list|(
name|String
modifier|...
name|field
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|addStatsFieldFacets
specifier|public
name|void
name|addStatsFieldFacets
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|facets
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|add
argument_list|(
name|StatsParams
operator|.
name|STATS_FACET
argument_list|,
name|facets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|f
range|:
name|facets
control|)
block|{
name|this
operator|.
name|add
argument_list|(
literal|"f."
operator|+
name|field
operator|+
literal|"."
operator|+
name|StatsParams
operator|.
name|STATS_FACET
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addStatsFieldCalcDistinct
specifier|public
name|void
name|addStatsFieldCalcDistinct
parameter_list|(
name|String
name|field
parameter_list|,
name|boolean
name|calcDistinct
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|add
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|calcDistinct
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|add
argument_list|(
literal|"f."
operator|+
name|field
operator|+
literal|"."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|calcDistinct
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setFilterQueries
specifier|public
name|SolrQuery
name|setFilterQueries
parameter_list|(
name|String
modifier|...
name|fq
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|,
name|fq
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addFilterQuery
specifier|public
name|SolrQuery
name|addFilterQuery
parameter_list|(
name|String
modifier|...
name|fq
parameter_list|)
block|{
name|this
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|,
name|fq
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeFilterQuery
specifier|public
name|boolean
name|removeFilterQuery
parameter_list|(
name|String
name|fq
parameter_list|)
block|{
return|return
name|this
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|,
name|fq
argument_list|)
return|;
block|}
DECL|method|getFilterQueries
specifier|public
name|String
index|[]
name|getFilterQueries
parameter_list|()
block|{
return|return
name|this
operator|.
name|getParams
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|)
return|;
block|}
DECL|method|getHighlight
specifier|public
name|boolean
name|getHighlight
parameter_list|()
block|{
return|return
name|this
operator|.
name|getBool
argument_list|(
name|HighlightParams
operator|.
name|HIGHLIGHT
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setHighlight
specifier|public
name|SolrQuery
name|setHighlight
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|this
operator|.
name|set
argument_list|(
name|HighlightParams
operator|.
name|HIGHLIGHT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|HIGHLIGHT
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|FIELD_MATCH
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|FIELDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|FORMATTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|FRAGSIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|SIMPLE_POST
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|SIMPLE_PRE
argument_list|)
expr_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|HighlightParams
operator|.
name|SNIPPETS
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|setFields
specifier|public
name|SolrQuery
name|setFields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|fields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addField
specifier|public
name|SolrQuery
name|addField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|addValueToParam
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|field
argument_list|)
return|;
block|}
DECL|method|getFields
specifier|public
name|String
name|getFields
parameter_list|()
block|{
name|String
name|fields
init|=
name|this
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|equals
argument_list|(
literal|"score"
argument_list|)
condition|)
block|{
name|fields
operator|=
literal|"*, score"
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
DECL|field|scorePattern
specifier|private
specifier|static
name|Pattern
name|scorePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(^|[, ])score"
argument_list|)
decl_stmt|;
DECL|method|setIncludeScore
specifier|public
name|SolrQuery
name|setIncludeScore
parameter_list|(
name|boolean
name|includeScore
parameter_list|)
block|{
name|String
name|fields
init|=
name|get
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeScore
condition|)
block|{
if|if
condition|(
operator|!
name|scorePattern
operator|.
name|matcher
argument_list|(
name|fields
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|fields
operator|+
literal|",score"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|scorePattern
operator|.
name|matcher
argument_list|(
name|fields
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|setQuery
specifier|public
name|SolrQuery
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getQuery
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
return|;
block|}
DECL|method|setRows
specifier|public
name|SolrQuery
name|setRows
parameter_list|(
name|Integer
name|rows
parameter_list|)
block|{
if|if
condition|(
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getRows
specifier|public
name|Integer
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|)
return|;
block|}
DECL|method|setShowDebugInfo
specifier|public
name|void
name|setShowDebugInfo
parameter_list|(
name|boolean
name|showDebugInfo
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|showDebugInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setDistrib
specifier|public
name|void
name|setDistrib
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|DISTRIB
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setStart
specifier|public
name|SolrQuery
name|setStart
parameter_list|(
name|Integer
name|start
parameter_list|)
block|{
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getStart
specifier|public
name|Integer
name|getStart
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|)
return|;
block|}
comment|/**    * The Request Handler to use (see the solrconfig.xml), which is stored in the "qt" parameter.    * Normally it starts with a '/' and if so it will be used by    * {@link org.apache.solr.client.solrj.request.QueryRequest#getPath()} in the URL instead of the "qt" parameter.    * If this is left blank, then the default of "/select" is assumed.    *    * @param qt The Request Handler name corresponding to one in solrconfig.xml on the server.    * @return this    */
DECL|method|setRequestHandler
specifier|public
name|SolrQuery
name|setRequestHandler
parameter_list|(
name|String
name|qt
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
name|qt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getRequestHandler
specifier|public
name|String
name|getRequestHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|)
return|;
block|}
comment|/**    * @deprecated See {@link #setRequestHandler(String)}.    */
annotation|@
name|Deprecated
DECL|method|setQueryType
specifier|public
name|SolrQuery
name|setQueryType
parameter_list|(
name|String
name|qt
parameter_list|)
block|{
return|return
name|setRequestHandler
argument_list|(
name|qt
argument_list|)
return|;
block|}
comment|/**    * @deprecated See {@link #getRequestHandler()}.    */
annotation|@
name|Deprecated
DECL|method|getQueryType
specifier|public
name|String
name|getQueryType
parameter_list|()
block|{
return|return
name|getRequestHandler
argument_list|()
return|;
block|}
comment|/**    * @return this    * @see ModifiableSolrParams#set(String,String[])    */
DECL|method|setParam
specifier|public
name|SolrQuery
name|setParam
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @return this    * @see org.apache.solr.common.params.ModifiableSolrParams#set(String, boolean)    */
DECL|method|setParam
specifier|public
name|SolrQuery
name|setParam
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** get a deep copy of this object **/
DECL|method|getCopy
specifier|public
name|SolrQuery
name|getCopy
parameter_list|()
block|{
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|this
operator|.
name|getParameterNames
argument_list|()
control|)
block|{
name|q
operator|.
name|setParam
argument_list|(
name|name
argument_list|,
name|this
operator|.
name|getParams
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|q
return|;
block|}
comment|/**   * Set the maximum time allowed for this query. If the query takes more time   * than the specified milliseconds, a timeout occurs and partial (or no)   * results may be returned.   *    * If given Integer is null, then this parameter is removed from the request   *    *@param milliseconds the time in milliseconds allowed for this query   */
DECL|method|setTimeAllowed
specifier|public
name|SolrQuery
name|setTimeAllowed
parameter_list|(
name|Integer
name|milliseconds
parameter_list|)
block|{
if|if
condition|(
name|milliseconds
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**   * Get the maximum time allowed for this query.   */
DECL|method|getTimeAllowed
specifier|public
name|Integer
name|getTimeAllowed
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInt
argument_list|(
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|)
return|;
block|}
comment|///////////////////////
comment|//  Utility functions
comment|///////////////////////
DECL|method|toSortString
specifier|private
name|String
name|toSortString
parameter_list|(
name|String
name|field
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
return|return
name|field
operator|.
name|trim
argument_list|()
operator|+
literal|' '
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|order
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|join
specifier|private
name|String
name|join
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|,
name|String
name|sep
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|!=
literal|null
operator|&&
name|b
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|addValueToParam
specifier|private
name|SolrQuery
name|addValueToParam
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|String
name|tmp
init|=
name|this
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|tmp
operator|=
name|join
argument_list|(
name|tmp
argument_list|,
name|value
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|join
specifier|private
name|String
name|join
parameter_list|(
name|String
index|[]
name|vals
parameter_list|,
name|String
name|sep
parameter_list|,
name|String
name|removeVal
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|vals
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|removeVal
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * A single sort clause, encapsulating what to sort and the sort order.    *<p>    * The item specified can be "anything sortable" by solr; some examples    * include a simple field name, the constant string {@code score}, and functions    * such as {@code sum(x_f, y_f)}.    *<p>    * A SortClause can be created through different mechanisms:    *<PRE><code>    * new SortClause("product", SolrQuery.ORDER.asc);    * new SortClause("product", "asc");    * SortClause.asc("product");    * SortClause.desc("product");    *</code></PRE>    */
DECL|class|SortClause
specifier|public
specifier|static
class|class
name|SortClause
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|item
specifier|private
specifier|final
name|String
name|item
decl_stmt|;
DECL|field|order
specifier|private
specifier|final
name|ORDER
name|order
decl_stmt|;
comment|/**      * Creates a SortClause based on item and order      * @param item item to sort on      * @param order direction to sort      */
DECL|method|SortClause
specifier|public
name|SortClause
parameter_list|(
name|String
name|item
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
name|this
operator|.
name|item
operator|=
name|item
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
comment|/**      * Creates a SortClause based on item and order      * @param item item to sort on      * @param order string value for direction to sort      */
DECL|method|SortClause
specifier|public
name|SortClause
parameter_list|(
name|String
name|item
parameter_list|,
name|String
name|order
parameter_list|)
block|{
name|this
argument_list|(
name|item
argument_list|,
name|ORDER
operator|.
name|valueOf
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates an ascending SortClause for an item      * @param item item to sort on      */
DECL|method|create
specifier|public
specifier|static
name|SortClause
name|create
parameter_list|(
name|String
name|item
parameter_list|,
name|ORDER
name|order
parameter_list|)
block|{
return|return
operator|new
name|SortClause
argument_list|(
name|item
argument_list|,
name|order
argument_list|)
return|;
block|}
comment|/**      * Creates a SortClause based on item and order      * @param item item to sort on      * @param order string value for direction to sort      */
DECL|method|create
specifier|public
specifier|static
name|SortClause
name|create
parameter_list|(
name|String
name|item
parameter_list|,
name|String
name|order
parameter_list|)
block|{
return|return
operator|new
name|SortClause
argument_list|(
name|item
argument_list|,
name|ORDER
operator|.
name|valueOf
argument_list|(
name|order
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Creates an ascending SortClause for an item      * @param item item to sort on      */
DECL|method|asc
specifier|public
specifier|static
name|SortClause
name|asc
parameter_list|(
name|String
name|item
parameter_list|)
block|{
return|return
operator|new
name|SortClause
argument_list|(
name|item
argument_list|,
name|ORDER
operator|.
name|asc
argument_list|)
return|;
block|}
comment|/**      * Creates a decending SortClause for an item      * @param item item to sort on      */
DECL|method|desc
specifier|public
specifier|static
name|SortClause
name|desc
parameter_list|(
name|String
name|item
parameter_list|)
block|{
return|return
operator|new
name|SortClause
argument_list|(
name|item
argument_list|,
name|ORDER
operator|.
name|desc
argument_list|)
return|;
block|}
comment|/**      * Gets the item to sort, typically a function or a fieldname      * @return item to sort      */
DECL|method|getItem
specifier|public
name|String
name|getItem
parameter_list|()
block|{
return|return
name|item
return|;
block|}
comment|/**      * Gets the order to sort      * @return order to sort      */
DECL|method|getOrder
specifier|public
name|ORDER
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|SortClause
operator|)
condition|)
return|return
literal|false
return|;
specifier|final
name|SortClause
name|that
init|=
operator|(
name|SortClause
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|getItem
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getItem
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getOrder
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getOrder
argument_list|()
argument_list|)
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|getItem
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Gets a human readable description of the sort clause.      *<p>      * The returned string is not suitable for passing to Solr,      * but may be useful in debug output and the like.      * @return a description of the current sort clause      */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": item="
operator|+
name|getItem
argument_list|()
operator|+
literal|"; order="
operator|+
name|getOrder
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class
end_unit
