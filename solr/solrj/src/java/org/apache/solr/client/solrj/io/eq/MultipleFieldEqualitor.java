begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.eq
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|MultipleFieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_comment
comment|/**  *  Wraps multiple Equalitors.  **/
end_comment
begin_class
DECL|class|MultipleFieldEqualitor
specifier|public
class|class
name|MultipleFieldEqualitor
implements|implements
name|StreamEqualitor
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|eqs
specifier|private
name|StreamEqualitor
index|[]
name|eqs
decl_stmt|;
DECL|method|MultipleFieldEqualitor
specifier|public
name|MultipleFieldEqualitor
parameter_list|(
name|StreamEqualitor
modifier|...
name|eqs
parameter_list|)
block|{
name|this
operator|.
name|eqs
operator|=
name|eqs
expr_stmt|;
block|}
DECL|method|getEqs
specifier|public
name|StreamEqualitor
index|[]
name|getEqs
parameter_list|()
block|{
return|return
name|eqs
return|;
block|}
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|Tuple
name|t1
parameter_list|,
name|Tuple
name|t2
parameter_list|)
block|{
for|for
control|(
name|Equalitor
argument_list|<
name|Tuple
argument_list|>
name|eq
range|:
name|eqs
control|)
block|{
if|if
condition|(
operator|!
name|eq
operator|.
name|test
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Equalitor
argument_list|<
name|Tuple
argument_list|>
name|eq
range|:
name|eqs
control|)
block|{
if|if
condition|(
name|eq
operator|instanceof
name|Expressible
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Expressible
operator|)
name|eq
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This MultiEqualitor contains a non-expressible equalitor - it cannot be converted to an expression"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|StreamExpressionValue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDerivedFrom
specifier|public
name|boolean
name|isDerivedFrom
parameter_list|(
name|StreamEqualitor
name|base
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|base
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|base
operator|instanceof
name|MultipleFieldEqualitor
condition|)
block|{
name|MultipleFieldEqualitor
name|baseEq
init|=
operator|(
name|MultipleFieldEqualitor
operator|)
name|base
decl_stmt|;
if|if
condition|(
name|baseEq
operator|.
name|eqs
operator|.
name|length
operator|>=
name|eqs
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|eqs
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
operator|!
name|eqs
index|[
name|idx
index|]
operator|.
name|isDerivedFrom
argument_list|(
name|baseEq
operator|.
name|eqs
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isDerivedFrom
specifier|public
name|boolean
name|isDerivedFrom
parameter_list|(
name|StreamComparator
name|base
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|base
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|base
operator|instanceof
name|StreamComparator
condition|)
block|{
name|MultipleFieldComparator
name|baseComps
init|=
operator|(
name|MultipleFieldComparator
operator|)
name|base
decl_stmt|;
if|if
condition|(
name|baseComps
operator|.
name|getComps
argument_list|()
operator|.
name|length
operator|>=
name|eqs
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|eqs
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
operator|!
name|eqs
index|[
name|idx
index|]
operator|.
name|isDerivedFrom
argument_list|(
name|baseComps
operator|.
name|getComps
argument_list|()
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
