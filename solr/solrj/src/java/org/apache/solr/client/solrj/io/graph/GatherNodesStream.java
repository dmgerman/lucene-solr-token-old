begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.graph
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|graph
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|MultipleFieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|FieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExplanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
operator|.
name|ExpressionType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SolrjNamedThreadFactory
import|;
end_import
begin_class
DECL|class|GatherNodesStream
specifier|public
class|class
name|GatherNodesStream
extends|extends
name|TupleStream
implements|implements
name|Expressible
block|{
DECL|field|zkHost
specifier|private
name|String
name|zkHost
decl_stmt|;
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|streamContext
specifier|private
name|StreamContext
name|streamContext
decl_stmt|;
DECL|field|queryParams
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
decl_stmt|;
DECL|field|traverseFrom
specifier|private
name|String
name|traverseFrom
decl_stmt|;
DECL|field|traverseTo
specifier|private
name|String
name|traverseTo
decl_stmt|;
DECL|field|gather
specifier|private
name|String
name|gather
decl_stmt|;
DECL|field|trackTraversal
specifier|private
name|boolean
name|trackTraversal
decl_stmt|;
DECL|field|useDefaultTraversal
specifier|private
name|boolean
name|useDefaultTraversal
decl_stmt|;
DECL|field|tupleStream
specifier|private
name|TupleStream
name|tupleStream
decl_stmt|;
DECL|field|scatter
specifier|private
name|Set
argument_list|<
name|Traversal
operator|.
name|Scatter
argument_list|>
name|scatter
decl_stmt|;
DECL|field|out
specifier|private
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|out
decl_stmt|;
DECL|field|traversal
specifier|private
name|Traversal
name|traversal
decl_stmt|;
DECL|field|metrics
specifier|private
name|List
argument_list|<
name|Metric
argument_list|>
name|metrics
decl_stmt|;
DECL|field|maxDocFreq
specifier|private
name|int
name|maxDocFreq
decl_stmt|;
DECL|method|GatherNodesStream
specifier|public
name|GatherNodesStream
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
name|TupleStream
name|tupleStream
parameter_list|,
name|String
name|traverseFrom
parameter_list|,
name|String
name|traverseTo
parameter_list|,
name|String
name|gather
parameter_list|,
name|Map
name|queryParams
parameter_list|,
name|List
argument_list|<
name|Metric
argument_list|>
name|metrics
parameter_list|,
name|boolean
name|trackTraversal
parameter_list|,
name|Set
argument_list|<
name|Traversal
operator|.
name|Scatter
argument_list|>
name|scatter
parameter_list|,
name|int
name|maxDocFreq
parameter_list|)
block|{
name|init
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|tupleStream
argument_list|,
name|traverseFrom
argument_list|,
name|traverseTo
argument_list|,
name|gather
argument_list|,
name|queryParams
argument_list|,
name|metrics
argument_list|,
name|trackTraversal
argument_list|,
name|scatter
argument_list|,
name|maxDocFreq
argument_list|)
expr_stmt|;
block|}
DECL|method|GatherNodesStream
specifier|public
name|GatherNodesStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|collectionName
init|=
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StreamExpressionNamedParameter
argument_list|>
name|namedParams
init|=
name|factory
operator|.
name|getNamedOperands
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|StreamExpressionNamedParameter
name|zkHostExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"zkHost"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StreamExpression
argument_list|>
name|streamExpressions
init|=
name|factory
operator|.
name|getExpressionOperandsRepresentingTypes
argument_list|(
name|expression
argument_list|,
name|Expressible
operator|.
name|class
argument_list|,
name|TupleStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Collection Name
if|if
condition|(
literal|null
operator|==
name|collectionName
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - collectionName expected as first operand"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Traversal
operator|.
name|Scatter
argument_list|>
name|scatter
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|StreamExpressionNamedParameter
name|scatterExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"scatter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scatterExpression
operator|==
literal|null
condition|)
block|{
name|scatter
operator|.
name|add
argument_list|(
name|Traversal
operator|.
name|Scatter
operator|.
name|LEAVES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
init|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|scatterExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
index|[]
name|sArray
init|=
name|s
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sv
range|:
name|sArray
control|)
block|{
name|sv
operator|=
name|sv
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|Traversal
operator|.
name|Scatter
operator|.
name|BRANCHES
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|sv
argument_list|)
condition|)
block|{
name|scatter
operator|.
name|add
argument_list|(
name|Traversal
operator|.
name|Scatter
operator|.
name|BRANCHES
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Traversal
operator|.
name|Scatter
operator|.
name|LEAVES
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|sv
argument_list|)
condition|)
block|{
name|scatter
operator|.
name|add
argument_list|(
name|Traversal
operator|.
name|Scatter
operator|.
name|LEAVES
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|gather
init|=
literal|null
decl_stmt|;
name|StreamExpressionNamedParameter
name|gatherExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"gather"
argument_list|)
decl_stmt|;
if|if
condition|(
name|gatherExpression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - from param is required"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|gather
operator|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|gatherExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|String
name|traverseFrom
init|=
literal|null
decl_stmt|;
name|String
name|traverseTo
init|=
literal|null
decl_stmt|;
name|StreamExpressionNamedParameter
name|edgeExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"walk"
argument_list|)
decl_stmt|;
name|TupleStream
name|stream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|edgeExpression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - walk param is required"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|streamExpressions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|streamExpressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|edge
init|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|edgeExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
index|[]
name|fields
init|=
name|edge
operator|.
name|split
argument_list|(
literal|"->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - walk param separated by an -> and must contain two fields"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|traverseFrom
operator|=
name|fields
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
name|traverseTo
operator|=
name|fields
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|edge
init|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|edgeExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
index|[]
name|fields
init|=
name|edge
operator|.
name|split
argument_list|(
literal|"->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - walk param separated by an -> and must contain two fields"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|String
index|[]
name|rootNodes
init|=
name|fields
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|rootNodes
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|n
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream
operator|=
operator|new
name|NodeStream
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|traverseFrom
operator|=
literal|"node"
expr_stmt|;
name|traverseTo
operator|=
name|fields
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|StreamExpression
argument_list|>
name|metricExpressions
init|=
name|factory
operator|.
name|getExpressionOperandsRepresentingTypes
argument_list|(
name|expression
argument_list|,
name|Expressible
operator|.
name|class
argument_list|,
name|Metric
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Metric
argument_list|>
name|metrics
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|metricExpressions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|factory
operator|.
name|constructMetric
argument_list|(
name|metricExpressions
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|trackTraversal
init|=
literal|false
decl_stmt|;
name|StreamExpressionNamedParameter
name|trackExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"trackTraversal"
argument_list|)
decl_stmt|;
if|if
condition|(
name|trackExpression
operator|!=
literal|null
condition|)
block|{
name|trackTraversal
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|trackExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|useDefaultTraversal
operator|=
literal|true
expr_stmt|;
block|}
name|StreamExpressionNamedParameter
name|docFreqExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"maxDocFreq"
argument_list|)
decl_stmt|;
name|int
name|docFreq
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|docFreqExpression
operator|!=
literal|null
condition|)
block|{
name|docFreq
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|docFreqExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StreamExpressionNamedParameter
name|namedParam
range|:
name|namedParams
control|)
block|{
if|if
condition|(
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"zkHost"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"gather"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"walk"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"scatter"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"maxDocFreq"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"trackTraversal"
argument_list|)
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|namedParam
operator|.
name|getName
argument_list|()
argument_list|,
name|namedParam
operator|.
name|getParameter
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// zkHost, optional - if not provided then will look into factory list to get
name|String
name|zkHost
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|zkHostExpression
condition|)
block|{
name|zkHost
operator|=
name|factory
operator|.
name|getCollectionZkHost
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkHost
operator|==
literal|null
condition|)
block|{
name|zkHost
operator|=
name|factory
operator|.
name|getDefaultZkHost
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
condition|)
block|{
name|zkHost
operator|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|zkHost
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - zkHost not found for collection '%s'"
argument_list|,
name|expression
argument_list|,
name|collectionName
argument_list|)
argument_list|)
throw|;
block|}
comment|// We've got all the required items
name|init
argument_list|(
name|zkHost
argument_list|,
name|collectionName
argument_list|,
name|stream
argument_list|,
name|traverseFrom
argument_list|,
name|traverseTo
argument_list|,
name|gather
argument_list|,
name|params
argument_list|,
name|metrics
argument_list|,
name|trackTraversal
argument_list|,
name|scatter
argument_list|,
name|docFreq
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
name|TupleStream
name|tupleStream
parameter_list|,
name|String
name|traverseFrom
parameter_list|,
name|String
name|traverseTo
parameter_list|,
name|String
name|gather
parameter_list|,
name|Map
name|queryParams
parameter_list|,
name|List
argument_list|<
name|Metric
argument_list|>
name|metrics
parameter_list|,
name|boolean
name|trackTraversal
parameter_list|,
name|Set
argument_list|<
name|Traversal
operator|.
name|Scatter
argument_list|>
name|scatter
parameter_list|,
name|int
name|maxDocFreq
parameter_list|)
block|{
name|this
operator|.
name|zkHost
operator|=
name|zkHost
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|tupleStream
operator|=
name|tupleStream
expr_stmt|;
name|this
operator|.
name|traverseFrom
operator|=
name|traverseFrom
expr_stmt|;
name|this
operator|.
name|traverseTo
operator|=
name|traverseTo
expr_stmt|;
name|this
operator|.
name|gather
operator|=
name|gather
expr_stmt|;
name|this
operator|.
name|queryParams
operator|=
name|queryParams
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|trackTraversal
operator|=
name|trackTraversal
expr_stmt|;
name|this
operator|.
name|scatter
operator|=
name|scatter
expr_stmt|;
name|this
operator|.
name|maxDocFreq
operator|=
name|maxDocFreq
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpression
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toExpression
argument_list|(
name|factory
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|toExpression
specifier|private
name|StreamExpression
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|,
name|boolean
name|includeStreams
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// collection
name|expression
operator|.
name|addParameter
argument_list|(
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeStreams
operator|&&
operator|!
operator|(
name|tupleStream
operator|instanceof
name|NodeStream
operator|)
condition|)
block|{
if|if
condition|(
name|tupleStream
operator|instanceof
name|Expressible
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|(
operator|(
name|Expressible
operator|)
name|tupleStream
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|expression
operator|.
name|addParameter
argument_list|(
literal|"<stream>"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|queryParams
operator|.
name|entrySet
argument_list|()
decl_stmt|;
comment|// parameters
for|for
control|(
name|Map
operator|.
name|Entry
name|param
range|:
name|entries
control|)
block|{
name|String
name|value
init|=
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// SOLR-8409: This is a special case where the params contain a " character
comment|// Do note that in any other BASE streams with parameters where a " might come into play
comment|// that this same replacement needs to take place.
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\""
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
name|metric
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"zkHost"
argument_list|,
name|zkHost
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"gather"
argument_list|,
name|zkHost
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxDocFreq
operator|>
operator|-
literal|1
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"maxDocFreq"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxDocFreq
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tupleStream
operator|instanceof
name|NodeStream
condition|)
block|{
name|NodeStream
name|nodeStream
init|=
operator|(
name|NodeStream
operator|)
name|tupleStream
decl_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"walk"
argument_list|,
name|nodeStream
operator|.
name|toString
argument_list|()
operator|+
literal|"->"
operator|+
name|traverseTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"walk"
argument_list|,
name|traverseFrom
operator|+
literal|"->"
operator|+
name|traverseTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"trackTraversal"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|trackTraversal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Traversal
operator|.
name|Scatter
name|sc
range|:
name|scatter
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|sc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"scatter"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expression
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExplanation
name|explanation
init|=
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|explanation
operator|.
name|setFunctionName
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setImplementingClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setExpressionType
argument_list|(
name|ExpressionType
operator|.
name|GRAPH_SOURCE
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// one child is a stream
name|explanation
operator|.
name|addChild
argument_list|(
name|tupleStream
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
comment|// one child is a datastore so add it at this point
name|StreamExplanation
name|child
init|=
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|+
literal|"-datastore"
argument_list|)
decl_stmt|;
name|child
operator|.
name|setFunctionName
argument_list|(
literal|"solr (graph)"
argument_list|)
expr_stmt|;
name|child
operator|.
name|setImplementingClass
argument_list|(
literal|"Solr/Lucene"
argument_list|)
expr_stmt|;
name|child
operator|.
name|setExpressionType
argument_list|(
name|ExpressionType
operator|.
name|DATASTORE
argument_list|)
expr_stmt|;
name|child
operator|.
name|setExpression
argument_list|(
name|queryParams
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s=%s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|metrics
condition|)
block|{
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
name|explanation
operator|.
name|addHelper
argument_list|(
name|metric
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|explanation
return|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|traversal
operator|=
operator|(
name|Traversal
operator|)
name|context
operator|.
name|get
argument_list|(
literal|"traversal"
argument_list|)
expr_stmt|;
if|if
condition|(
name|traversal
operator|==
literal|null
condition|)
block|{
comment|//No traversal in the context. So create a new context and a new traversal.
comment|//This ensures that two separate traversals in the same expression don't pollute each others traversal.
name|StreamContext
name|localContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|localContext
operator|.
name|numWorkers
operator|=
name|context
operator|.
name|numWorkers
expr_stmt|;
name|localContext
operator|.
name|workerID
operator|=
name|context
operator|.
name|workerID
expr_stmt|;
name|localContext
operator|.
name|setSolrClientCache
argument_list|(
name|context
operator|.
name|getSolrClientCache
argument_list|()
argument_list|)
expr_stmt|;
name|localContext
operator|.
name|setStreamFactory
argument_list|(
name|context
operator|.
name|getStreamFactory
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|context
operator|.
name|getEntries
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|localContext
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|context
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|traversal
operator|=
operator|new
name|Traversal
argument_list|()
expr_stmt|;
name|localContext
operator|.
name|put
argument_list|(
literal|"traversal"
argument_list|,
name|traversal
argument_list|)
expr_stmt|;
name|this
operator|.
name|tupleStream
operator|.
name|setStreamContext
argument_list|(
name|localContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|streamContext
operator|=
name|localContext
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|tupleStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|streamContext
operator|=
name|context
expr_stmt|;
block|}
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|tupleStream
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
DECL|class|JoinRunner
specifier|private
class|class
name|JoinRunner
implements|implements
name|Callable
argument_list|<
name|List
argument_list|<
name|Tuple
argument_list|>
argument_list|>
block|{
DECL|field|nodes
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nodes
decl_stmt|;
DECL|field|edges
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|>
name|edges
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|method|JoinRunner
specifier|public
name|JoinRunner
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
DECL|method|call
specifier|public
name|List
argument_list|<
name|Tuple
argument_list|>
name|call
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|flSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|flSet
operator|.
name|add
argument_list|(
name|gather
argument_list|)
expr_stmt|;
name|flSet
operator|.
name|add
argument_list|(
name|traverseTo
argument_list|)
expr_stmt|;
comment|//Add the metric columns
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
for|for
control|(
name|String
name|column
range|:
name|metric
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|flSet
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|queryParams
operator|.
name|containsKey
argument_list|(
literal|"fl"
argument_list|)
condition|)
block|{
name|String
name|flString
init|=
name|queryParams
operator|.
name|get
argument_list|(
literal|"fl"
argument_list|)
decl_stmt|;
name|String
index|[]
name|flArray
init|=
name|flString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|flArray
control|)
block|{
name|flSet
operator|.
name|add
argument_list|(
name|f
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|flSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|ModifiableSolrParams
name|joinSParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|SolrParams
operator|.
name|toMultiMap
argument_list|(
operator|new
name|NamedList
argument_list|(
name|queryParams
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|joinSParams
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|joinSParams
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
name|joinSParams
operator|.
name|set
argument_list|(
literal|"sort"
argument_list|,
name|gather
operator|+
literal|" asc,"
operator|+
name|traverseTo
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|StringBuffer
name|nodeQuery
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|nodeQuery
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|nodeQuery
operator|.
name|append
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|maxDocFreq
operator|>
operator|-
literal|1
condition|)
block|{
name|String
name|docFreqParam
init|=
literal|" maxDocFreq="
operator|+
name|maxDocFreq
decl_stmt|;
name|joinSParams
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"{!graphTerms f="
operator|+
name|traverseTo
operator|+
name|docFreqParam
operator|+
literal|"}"
operator|+
name|nodeQuery
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinSParams
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"{!terms f="
operator|+
name|traverseTo
operator|+
literal|"}"
operator|+
name|nodeQuery
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TupleStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
operator|new
name|UniqueStream
argument_list|(
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|joinSParams
argument_list|)
argument_list|,
operator|new
name|MultipleFieldEqualitor
argument_list|(
operator|new
name|FieldEqualitor
argument_list|(
name|gather
argument_list|)
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
name|traverseTo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
name|BATCH
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|tuple
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
break|break
name|BATCH
break|;
block|}
name|edges
operator|.
name|add
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ce
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ce
argument_list|)
throw|;
block|}
block|}
return|return
name|edges
return|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|joinBatch
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|List
argument_list|<
name|Tuple
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|level
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|ExecutorService
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
name|ExecutorUtil
operator|.
name|newMDCAwareFixedThreadPool
argument_list|(
literal|4
argument_list|,
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"GatherNodesStream"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|roots
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|tuple
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
if|if
condition|(
name|joinBatch
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|JoinRunner
name|joinRunner
init|=
operator|new
name|JoinRunner
argument_list|(
name|joinBatch
argument_list|)
decl_stmt|;
name|Future
name|future
init|=
name|threadPool
operator|.
name|submit
argument_list|(
name|joinRunner
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|String
name|value
init|=
name|tuple
operator|.
name|getString
argument_list|(
name|traverseFrom
argument_list|)
decl_stmt|;
if|if
condition|(
name|traversal
operator|.
name|getDepth
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//This gathers the root nodes
comment|//We check to see if there are dupes in the root nodes because root streams may not have been uniqued.
name|String
name|key
init|=
name|collection
operator|+
literal|"."
operator|+
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|roots
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
name|value
argument_list|,
name|trackTraversal
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Metric
argument_list|>
name|_metrics
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
name|_metrics
operator|.
name|add
argument_list|(
name|metric
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setMetrics
argument_list|(
name|_metrics
argument_list|)
expr_stmt|;
block|}
name|roots
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|joinBatch
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|joinBatch
operator|.
name|size
argument_list|()
operator|==
literal|400
condition|)
block|{
name|JoinRunner
name|joinRunner
init|=
operator|new
name|JoinRunner
argument_list|(
name|joinBatch
argument_list|)
decl_stmt|;
name|Future
name|future
init|=
name|threadPool
operator|.
name|submit
argument_list|(
name|joinRunner
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|joinBatch
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|traversal
operator|.
name|getDepth
argument_list|()
operator|==
literal|0
condition|)
block|{
name|traversal
operator|.
name|addLevel
argument_list|(
name|roots
argument_list|,
name|collection
argument_list|,
name|traverseFrom
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|traversal
operator|.
name|setScatter
argument_list|(
name|scatter
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDefaultTraversal
condition|)
block|{
name|this
operator|.
name|trackTraversal
operator|=
name|traversal
operator|.
name|getTrackTraversal
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|traversal
operator|.
name|setTrackTraversal
argument_list|(
name|trackTraversal
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|List
argument_list|<
name|Tuple
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|String
name|_traverseTo
init|=
name|tuple
operator|.
name|getString
argument_list|(
name|traverseTo
argument_list|)
decl_stmt|;
name|String
name|_gather
init|=
name|tuple
operator|.
name|getString
argument_list|(
name|gather
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|collection
operator|+
literal|"."
operator|+
name|_gather
decl_stmt|;
if|if
condition|(
operator|!
name|traversal
operator|.
name|visited
argument_list|(
name|key
argument_list|,
name|_traverseTo
argument_list|,
name|tuple
argument_list|)
condition|)
block|{
name|Node
name|node
init|=
name|level
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|add
argument_list|(
operator|(
name|traversal
operator|.
name|getDepth
argument_list|()
operator|-
literal|1
operator|)
operator|+
literal|"^"
operator|+
name|_traverseTo
argument_list|,
name|tuple
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
operator|new
name|Node
argument_list|(
name|_gather
argument_list|,
name|trackTraversal
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Metric
argument_list|>
name|_metrics
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
name|_metrics
operator|.
name|add
argument_list|(
name|metric
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setMetrics
argument_list|(
name|_metrics
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|add
argument_list|(
operator|(
name|traversal
operator|.
name|getDepth
argument_list|()
operator|-
literal|1
operator|)
operator|+
literal|"^"
operator|+
name|_traverseTo
argument_list|,
name|tuple
argument_list|)
expr_stmt|;
name|level
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|traversal
operator|.
name|addLevel
argument_list|(
name|level
argument_list|,
name|collection
argument_list|,
name|gather
argument_list|)
expr_stmt|;
name|out
operator|=
name|traversal
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|out
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|out
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
decl_stmt|;
return|return
name|tuple
return|;
block|}
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|class|NodeStream
class|class
name|NodeStream
extends|extends
name|TupleStream
block|{
DECL|field|ids
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ids
decl_stmt|;
DECL|field|it
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
decl_stmt|;
DECL|method|NodeStream
specifier|public
name|NodeStream
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
name|this
operator|.
name|ids
operator|=
name|ids
expr_stmt|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
block|{
name|this
operator|.
name|it
operator|=
name|ids
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{}
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|()
return|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
block|{
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|ids
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"non-expressible"
argument_list|)
operator|.
name|withImplementingClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withExpressionType
argument_list|(
name|ExpressionType
operator|.
name|STREAM_SOURCE
argument_list|)
operator|.
name|withExpression
argument_list|(
literal|"non-expressible"
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
