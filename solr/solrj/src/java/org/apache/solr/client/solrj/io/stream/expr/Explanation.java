begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream.expr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Explanation containing details about a expression  */
end_comment
begin_class
DECL|class|Explanation
specifier|public
class|class
name|Explanation
block|{
DECL|field|expressionNodeId
specifier|private
name|String
name|expressionNodeId
decl_stmt|;
DECL|field|expressionType
specifier|private
name|String
name|expressionType
decl_stmt|;
DECL|field|functionName
specifier|private
name|String
name|functionName
decl_stmt|;
DECL|field|implementingClass
specifier|private
name|String
name|implementingClass
decl_stmt|;
DECL|field|expression
specifier|private
name|String
name|expression
decl_stmt|;
DECL|field|note
specifier|private
name|String
name|note
decl_stmt|;
DECL|field|helpers
specifier|private
name|List
argument_list|<
name|Explanation
argument_list|>
name|helpers
decl_stmt|;
DECL|method|Explanation
specifier|public
name|Explanation
parameter_list|(
name|String
name|expressionNodeId
parameter_list|)
block|{
name|this
operator|.
name|expressionNodeId
operator|=
name|expressionNodeId
expr_stmt|;
block|}
DECL|method|getExpressionNodeId
specifier|public
name|String
name|getExpressionNodeId
parameter_list|()
block|{
return|return
name|expressionNodeId
return|;
block|}
DECL|method|getExpressionType
specifier|public
name|String
name|getExpressionType
parameter_list|()
block|{
return|return
name|expressionType
return|;
block|}
DECL|method|setExpressionType
specifier|public
name|void
name|setExpressionType
parameter_list|(
name|String
name|expressionType
parameter_list|)
block|{
name|this
operator|.
name|expressionType
operator|=
name|expressionType
expr_stmt|;
block|}
DECL|method|withExpressionType
specifier|public
name|Explanation
name|withExpressionType
parameter_list|(
name|String
name|expressionType
parameter_list|)
block|{
name|setExpressionType
argument_list|(
name|expressionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFunctionName
specifier|public
name|String
name|getFunctionName
parameter_list|()
block|{
return|return
name|functionName
return|;
block|}
DECL|method|setFunctionName
specifier|public
name|void
name|setFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
name|this
operator|.
name|functionName
operator|=
name|functionName
expr_stmt|;
block|}
DECL|method|withFunctionName
specifier|public
name|Explanation
name|withFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
name|setFunctionName
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getImplementingClass
specifier|public
name|String
name|getImplementingClass
parameter_list|()
block|{
return|return
name|implementingClass
return|;
block|}
DECL|method|setImplementingClass
specifier|public
name|void
name|setImplementingClass
parameter_list|(
name|String
name|implementingClass
parameter_list|)
block|{
name|this
operator|.
name|implementingClass
operator|=
name|implementingClass
expr_stmt|;
block|}
DECL|method|withImplementingClass
specifier|public
name|Explanation
name|withImplementingClass
parameter_list|(
name|String
name|implementingClass
parameter_list|)
block|{
name|setImplementingClass
argument_list|(
name|implementingClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getExpression
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
DECL|method|setExpression
specifier|public
name|void
name|setExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
DECL|method|withExpression
specifier|public
name|Explanation
name|withExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getNote
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|note
return|;
block|}
DECL|method|setNote
specifier|public
name|void
name|setNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|this
operator|.
name|note
operator|=
name|note
expr_stmt|;
block|}
DECL|method|withNote
specifier|public
name|Explanation
name|withNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getHelpers
specifier|public
name|List
argument_list|<
name|Explanation
argument_list|>
name|getHelpers
parameter_list|()
block|{
return|return
name|helpers
return|;
block|}
DECL|method|setHelpers
specifier|public
name|void
name|setHelpers
parameter_list|(
name|List
argument_list|<
name|Explanation
argument_list|>
name|helpers
parameter_list|)
block|{
name|this
operator|.
name|helpers
operator|=
name|helpers
expr_stmt|;
block|}
DECL|method|withHelpers
specifier|public
name|Explanation
name|withHelpers
parameter_list|(
name|List
argument_list|<
name|Explanation
argument_list|>
name|helpers
parameter_list|)
block|{
name|setHelpers
argument_list|(
name|helpers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withHelpers
specifier|public
name|Explanation
name|withHelpers
parameter_list|(
name|Explanation
index|[]
name|helpers
parameter_list|)
block|{
for|for
control|(
name|Explanation
name|helper
range|:
name|helpers
control|)
block|{
name|addHelper
argument_list|(
name|helper
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withHelper
specifier|public
name|Explanation
name|withHelper
parameter_list|(
name|Explanation
name|helper
parameter_list|)
block|{
name|addHelper
argument_list|(
name|helper
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addHelper
specifier|public
name|void
name|addHelper
parameter_list|(
name|Explanation
name|helper
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|helpers
condition|)
block|{
name|helpers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Explanation
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|helpers
operator|.
name|add
argument_list|(
name|helper
argument_list|)
expr_stmt|;
block|}
DECL|method|toMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|expressionNodeId
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"expressionNodeId"
argument_list|,
name|expressionNodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|expressionType
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"expressionType"
argument_list|,
name|expressionType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|functionName
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"functionName"
argument_list|,
name|functionName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|implementingClass
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"implementingClass"
argument_list|,
name|implementingClass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|expression
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"expression"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|note
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"note"
argument_list|,
name|note
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|helpers
operator|&&
literal|0
operator|!=
name|helpers
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|helperMaps
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Explanation
name|helper
range|:
name|helpers
control|)
block|{
name|helperMaps
operator|.
name|add
argument_list|(
name|helper
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"helpers"
argument_list|,
name|helperMaps
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|interface|ExpressionType
specifier|public
specifier|static
interface|interface
name|ExpressionType
block|{
DECL|field|GRAPH_SOURCE
specifier|public
specifier|static
specifier|final
name|String
name|GRAPH_SOURCE
init|=
literal|"graph-source"
decl_stmt|;
DECL|field|STREAM_SOURCE
specifier|public
specifier|static
specifier|final
name|String
name|STREAM_SOURCE
init|=
literal|"stream-source"
decl_stmt|;
DECL|field|STREAM_DECORATOR
specifier|public
specifier|static
specifier|final
name|String
name|STREAM_DECORATOR
init|=
literal|"stream-decorator"
decl_stmt|;
DECL|field|DATASTORE
specifier|public
specifier|static
specifier|final
name|String
name|DATASTORE
init|=
literal|"datastore"
decl_stmt|;
DECL|field|METRIC
specifier|public
specifier|static
specifier|final
name|String
name|METRIC
init|=
literal|"metric"
decl_stmt|;
DECL|field|OPERATION
specifier|public
specifier|static
specifier|final
name|String
name|OPERATION
init|=
literal|"operation"
decl_stmt|;
DECL|field|EQUALITOR
specifier|public
specifier|static
specifier|final
name|String
name|EQUALITOR
init|=
literal|"equalitor"
decl_stmt|;
DECL|field|SORTER
specifier|public
specifier|static
specifier|final
name|String
name|SORTER
init|=
literal|"sorter"
decl_stmt|;
block|}
block|}
end_class
end_unit
