begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NoHttpResponseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|entity
operator|.
name|UrlEncodedFormEntity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|params
operator|.
name|ClientPNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ClientConnectionManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|FormBodyPart
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|HttpMultipartMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|MultipartEntity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|InputStreamBody
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|StringBody
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicNameValuePair
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|ResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|RequestWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|ClientUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SolrjNamedThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|HttpSolrServer
specifier|public
class|class
name|HttpSolrServer
extends|extends
name|SolrServer
block|{
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_PATH
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PATH
init|=
literal|"/select"
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|946812319974801896L
decl_stmt|;
comment|/**    * User-Agent String.    */
DECL|field|AGENT
specifier|public
specifier|static
specifier|final
name|String
name|AGENT
init|=
literal|"Solr["
operator|+
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpSolrServer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The URL of the Solr server.    */
DECL|field|baseUrl
specifier|protected
specifier|volatile
name|String
name|baseUrl
decl_stmt|;
comment|/**    * Default value: null / empty.    *<p/>    * Parameters that are added to every request regardless. This may be a place    * to add something like an authentication token.    */
DECL|field|invariantParams
specifier|protected
name|ModifiableSolrParams
name|invariantParams
decl_stmt|;
comment|/**    * Default response parser is BinaryResponseParser    *<p/>    * This parser represents the default Response Parser chosen to parse the    * response if the parser were not specified as part of the request.    *     * @see org.apache.solr.client.solrj.impl.BinaryResponseParser    */
DECL|field|parser
specifier|protected
specifier|volatile
name|ResponseParser
name|parser
decl_stmt|;
comment|/**    * The RequestWriter used to write all requests to Solr    *     * @see org.apache.solr.client.solrj.request.RequestWriter    */
DECL|field|requestWriter
specifier|protected
specifier|volatile
name|RequestWriter
name|requestWriter
init|=
operator|new
name|RequestWriter
argument_list|()
decl_stmt|;
DECL|field|httpClient
specifier|private
specifier|final
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|followRedirects
specifier|private
specifier|volatile
name|boolean
name|followRedirects
init|=
literal|false
decl_stmt|;
DECL|field|maxRetries
specifier|private
specifier|volatile
name|int
name|maxRetries
init|=
literal|0
decl_stmt|;
DECL|field|useMultiPartPost
specifier|private
specifier|volatile
name|boolean
name|useMultiPartPost
decl_stmt|;
DECL|field|internalClient
specifier|private
specifier|final
name|boolean
name|internalClient
decl_stmt|;
DECL|field|queryParams
specifier|private
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|queryParams
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
comment|/**    * @param baseURL    *          The URL of the Solr server. For example, "    *<code>http://localhost:8983/solr/</code>" if you are using the    *          standard distribution Solr webapp on your local machine.    */
DECL|method|HttpSolrServer
specifier|public
name|HttpSolrServer
parameter_list|(
name|String
name|baseURL
parameter_list|)
block|{
name|this
argument_list|(
name|baseURL
argument_list|,
literal|null
argument_list|,
operator|new
name|BinaryResponseParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|HttpSolrServer
specifier|public
name|HttpSolrServer
parameter_list|(
name|String
name|baseURL
parameter_list|,
name|HttpClient
name|client
parameter_list|)
block|{
name|this
argument_list|(
name|baseURL
argument_list|,
name|client
argument_list|,
operator|new
name|BinaryResponseParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|HttpSolrServer
specifier|public
name|HttpSolrServer
parameter_list|(
name|String
name|baseURL
parameter_list|,
name|HttpClient
name|client
parameter_list|,
name|ResponseParser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|baseURL
expr_stmt|;
if|if
condition|(
name|baseUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|baseUrl
operator|=
name|baseUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|baseUrl
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseUrl
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid base url for solrj.  The base URL must not contain parameters: "
operator|+
name|baseUrl
argument_list|)
throw|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|httpClient
operator|=
name|client
expr_stmt|;
name|internalClient
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|internalClient
operator|=
literal|true
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_MAX_CONNECTIONS
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_MAX_CONNECTIONS_PER_HOST
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_FOLLOW_REDIRECTS
argument_list|,
name|followRedirects
argument_list|)
expr_stmt|;
name|httpClient
operator|=
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
DECL|method|getQueryParams
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getQueryParams
parameter_list|()
block|{
return|return
name|queryParams
return|;
block|}
comment|/**    * Expert Method.    * @param queryParams set of param keys to only send via the query string    */
DECL|method|setQueryParams
specifier|public
name|void
name|setQueryParams
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queryParams
parameter_list|)
block|{
name|this
operator|.
name|queryParams
operator|=
name|queryParams
expr_stmt|;
block|}
comment|/**    * Process the request. If    * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is    * null, then use {@link #getParser()}    *     * @param request    *          The {@link org.apache.solr.client.solrj.SolrRequest} to process    * @return The {@link org.apache.solr.common.util.NamedList} result    * @throws IOException If there is a low-level I/O error.    *     * @see #request(org.apache.solr.client.solrj.SolrRequest,    *      org.apache.solr.client.solrj.ResponseParser)    */
annotation|@
name|Override
DECL|method|request
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|request
parameter_list|(
specifier|final
name|SolrRequest
name|request
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ResponseParser
name|responseParser
init|=
name|request
operator|.
name|getResponseParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseParser
operator|==
literal|null
condition|)
block|{
name|responseParser
operator|=
name|parser
expr_stmt|;
block|}
return|return
name|request
argument_list|(
name|request
argument_list|,
name|responseParser
argument_list|)
return|;
block|}
DECL|method|request
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|request
parameter_list|(
specifier|final
name|SolrRequest
name|request
parameter_list|,
specifier|final
name|ResponseParser
name|processor
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
return|return
name|executeMethod
argument_list|(
name|createMethod
argument_list|(
name|request
argument_list|)
argument_list|,
name|processor
argument_list|)
return|;
block|}
comment|/**    * @lucene.experimental    */
DECL|class|HttpUriRequestResponse
specifier|public
specifier|static
class|class
name|HttpUriRequestResponse
block|{
DECL|field|httpUriRequest
specifier|public
name|HttpUriRequest
name|httpUriRequest
decl_stmt|;
DECL|field|future
specifier|public
name|Future
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|future
decl_stmt|;
block|}
comment|/**    * @lucene.experimental    */
DECL|method|httpUriRequest
specifier|public
name|HttpUriRequestResponse
name|httpUriRequest
parameter_list|(
specifier|final
name|SolrRequest
name|request
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ResponseParser
name|responseParser
init|=
name|request
operator|.
name|getResponseParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseParser
operator|==
literal|null
condition|)
block|{
name|responseParser
operator|=
name|parser
expr_stmt|;
block|}
return|return
name|httpUriRequest
argument_list|(
name|request
argument_list|,
name|responseParser
argument_list|)
return|;
block|}
comment|/**    * @lucene.experimental    */
DECL|method|httpUriRequest
specifier|public
name|HttpUriRequestResponse
name|httpUriRequest
parameter_list|(
specifier|final
name|SolrRequest
name|request
parameter_list|,
specifier|final
name|ResponseParser
name|processor
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|HttpUriRequestResponse
name|mrr
init|=
operator|new
name|HttpUriRequestResponse
argument_list|()
decl_stmt|;
specifier|final
name|HttpRequestBase
name|method
init|=
name|createMethod
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"httpUriRequest"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|mrr
operator|.
name|future
operator|=
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|executeMethod
argument_list|(
name|method
argument_list|,
name|processor
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
assert|assert
name|method
operator|!=
literal|null
assert|;
name|mrr
operator|.
name|httpUriRequest
operator|=
name|method
expr_stmt|;
return|return
name|mrr
return|;
block|}
DECL|method|createMethod
specifier|protected
name|HttpRequestBase
name|createMethod
parameter_list|(
specifier|final
name|SolrRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|HttpRequestBase
name|method
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|SolrParams
name|params
init|=
name|request
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ContentStream
argument_list|>
name|streams
init|=
name|requestWriter
operator|.
name|getContentStreams
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|requestWriter
operator|.
name|getPath
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|DEFAULT_PATH
expr_stmt|;
block|}
name|ResponseParser
name|parser
init|=
name|request
operator|.
name|getResponseParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|parser
operator|=
name|this
operator|.
name|parser
expr_stmt|;
block|}
comment|// The parser 'wt=' and 'version=' params are used instead of the original
comment|// params
name|ModifiableSolrParams
name|wparams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|wparams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|parser
operator|.
name|getWriterType
argument_list|()
argument_list|)
expr_stmt|;
name|wparams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|,
name|parser
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invariantParams
operator|!=
literal|null
condition|)
block|{
name|wparams
operator|.
name|add
argument_list|(
name|invariantParams
argument_list|)
expr_stmt|;
block|}
name|int
name|tries
init|=
name|maxRetries
operator|+
literal|1
decl_stmt|;
try|try
block|{
while|while
condition|(
name|tries
operator|--
operator|>
literal|0
condition|)
block|{
comment|// Note: since we aren't do intermittent time keeping
comment|// ourselves, the potential non-timeout latency could be as
comment|// much as tries-times (plus scheduling effects) the given
comment|// timeAllowed.
try|try
block|{
if|if
condition|(
name|SolrRequest
operator|.
name|METHOD
operator|.
name|GET
operator|==
name|request
operator|.
name|getMethod
argument_list|()
condition|)
block|{
if|if
condition|(
name|streams
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"GET can't send streams!"
argument_list|)
throw|;
block|}
name|method
operator|=
operator|new
name|HttpGet
argument_list|(
name|baseUrl
operator|+
name|path
operator|+
name|ClientUtils
operator|.
name|toQueryString
argument_list|(
name|wparams
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
operator|==
name|request
operator|.
name|getMethod
argument_list|()
condition|)
block|{
name|String
name|url
init|=
name|baseUrl
operator|+
name|path
decl_stmt|;
name|boolean
name|hasNullStreamName
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|streams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ContentStream
name|cs
range|:
name|streams
control|)
block|{
if|if
condition|(
name|cs
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|hasNullStreamName
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|boolean
name|isMultipart
init|=
operator|(
name|this
operator|.
name|useMultiPartPost
operator|||
operator|(
name|streams
operator|!=
literal|null
operator|&&
name|streams
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
operator|)
operator|&&
operator|!
name|hasNullStreamName
decl_stmt|;
comment|// only send this list of params as query string params
name|ModifiableSolrParams
name|queryParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|this
operator|.
name|queryParams
control|)
block|{
name|String
index|[]
name|value
init|=
name|wparams
operator|.
name|getParams
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|v
range|:
name|value
control|)
block|{
name|queryParams
operator|.
name|add
argument_list|(
name|param
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|wparams
operator|.
name|remove
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
block|}
name|LinkedList
argument_list|<
name|NameValuePair
argument_list|>
name|postParams
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|streams
operator|==
literal|null
operator|||
name|isMultipart
condition|)
block|{
name|HttpPost
name|post
init|=
operator|new
name|HttpPost
argument_list|(
name|url
operator|+
name|ClientUtils
operator|.
name|toQueryString
argument_list|(
name|queryParams
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|post
operator|.
name|setHeader
argument_list|(
literal|"Content-Charset"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isMultipart
condition|)
block|{
name|post
operator|.
name|addHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FormBodyPart
argument_list|>
name|parts
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|wparams
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|p
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|vals
init|=
name|wparams
operator|.
name|getParams
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|v
range|:
name|vals
control|)
block|{
if|if
condition|(
name|isMultipart
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
name|p
argument_list|,
operator|new
name|StringBody
argument_list|(
name|v
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|postParams
operator|.
name|add
argument_list|(
operator|new
name|BasicNameValuePair
argument_list|(
name|p
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|isMultipart
operator|&&
name|streams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ContentStream
name|content
range|:
name|streams
control|)
block|{
name|String
name|contentType
init|=
name|content
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
name|contentType
operator|=
name|BinaryResponseParser
operator|.
name|BINARY_CONTENT_TYPE
expr_stmt|;
comment|// default
block|}
name|String
name|name
init|=
name|content
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|""
expr_stmt|;
block|}
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
name|name
argument_list|,
operator|new
name|InputStreamBody
argument_list|(
name|content
operator|.
name|getStream
argument_list|()
argument_list|,
name|contentType
argument_list|,
name|content
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|MultipartEntity
name|entity
init|=
operator|new
name|MultipartEntity
argument_list|(
name|HttpMultipartMode
operator|.
name|STRICT
argument_list|)
decl_stmt|;
for|for
control|(
name|FormBodyPart
name|p
range|:
name|parts
control|)
block|{
name|entity
operator|.
name|addPart
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|post
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//not using multipart
name|post
operator|.
name|setEntity
argument_list|(
operator|new
name|UrlEncodedFormEntity
argument_list|(
name|postParams
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|method
operator|=
name|post
expr_stmt|;
block|}
comment|// It is has one stream, it is the post body, put the params in the URL
else|else
block|{
name|String
name|pstr
init|=
name|ClientUtils
operator|.
name|toQueryString
argument_list|(
name|wparams
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HttpPost
name|post
init|=
operator|new
name|HttpPost
argument_list|(
name|url
operator|+
name|pstr
argument_list|)
decl_stmt|;
comment|// Single stream as body
comment|// Using a loop just to get the first one
specifier|final
name|ContentStream
index|[]
name|contentStream
init|=
operator|new
name|ContentStream
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|ContentStream
name|content
range|:
name|streams
control|)
block|{
name|contentStream
index|[
literal|0
index|]
operator|=
name|content
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|contentStream
index|[
literal|0
index|]
operator|instanceof
name|RequestWriter
operator|.
name|LazyContentStream
condition|)
block|{
name|post
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
name|contentStream
index|[
literal|0
index|]
operator|.
name|getStream
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Header
name|getContentType
parameter_list|()
block|{
return|return
operator|new
name|BasicHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentStream
index|[
literal|0
index|]
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepeatable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|post
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
name|contentStream
index|[
literal|0
index|]
operator|.
name|getStream
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Header
name|getContentType
parameter_list|()
block|{
return|return
operator|new
name|BasicHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentStream
index|[
literal|0
index|]
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepeatable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|method
operator|=
name|post
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"Unsupported method: "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NoHttpResponseException
name|r
parameter_list|)
block|{
name|method
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// If out of tries then just rethrow (as normal error).
if|if
condition|(
name|tries
operator|<
literal|1
condition|)
block|{
throw|throw
name|r
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"error reading streams"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|method
return|;
block|}
DECL|method|executeMethod
specifier|protected
name|NamedList
argument_list|<
name|Object
argument_list|>
name|executeMethod
parameter_list|(
name|HttpRequestBase
name|method
parameter_list|,
specifier|final
name|ResponseParser
name|processor
parameter_list|)
throws|throws
name|SolrServerException
block|{
comment|// XXX client already has this set, is this needed?
name|method
operator|.
name|getParams
argument_list|()
operator|.
name|setParameter
argument_list|(
name|ClientPNames
operator|.
name|HANDLE_REDIRECTS
argument_list|,
name|followRedirects
argument_list|)
expr_stmt|;
name|method
operator|.
name|addHeader
argument_list|(
literal|"User-Agent"
argument_list|,
name|AGENT
argument_list|)
expr_stmt|;
name|InputStream
name|respBody
init|=
literal|null
decl_stmt|;
name|boolean
name|shouldClose
init|=
literal|true
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Execute the method.
specifier|final
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|int
name|httpStatus
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
comment|// Read the contents
name|respBody
operator|=
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|Header
name|ctHeader
init|=
name|response
operator|.
name|getLastHeader
argument_list|(
literal|"content-type"
argument_list|)
decl_stmt|;
name|String
name|contentType
decl_stmt|;
if|if
condition|(
name|ctHeader
operator|!=
literal|null
condition|)
block|{
name|contentType
operator|=
name|ctHeader
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|contentType
operator|=
literal|""
expr_stmt|;
block|}
comment|// handle some http level checks before trying to parse the response
switch|switch
condition|(
name|httpStatus
condition|)
block|{
case|case
name|HttpStatus
operator|.
name|SC_OK
case|:
case|case
name|HttpStatus
operator|.
name|SC_BAD_REQUEST
case|:
case|case
name|HttpStatus
operator|.
name|SC_CONFLICT
case|:
comment|// 409
break|break;
case|case
name|HttpStatus
operator|.
name|SC_MOVED_PERMANENTLY
case|:
case|case
name|HttpStatus
operator|.
name|SC_MOVED_TEMPORARILY
case|:
if|if
condition|(
operator|!
name|followRedirects
condition|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"Server at "
operator|+
name|getBaseURL
argument_list|()
operator|+
literal|" sent back a redirect ("
operator|+
name|httpStatus
operator|+
literal|")."
argument_list|)
throw|;
block|}
break|break;
default|default:
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RemoteSolrException
argument_list|(
name|httpStatus
argument_list|,
literal|"Server at "
operator|+
name|getBaseURL
argument_list|()
operator|+
literal|" returned non ok status:"
operator|+
name|httpStatus
operator|+
literal|", message:"
operator|+
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
comment|// no processor specified, return raw stream
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"stream"
argument_list|,
name|respBody
argument_list|)
expr_stmt|;
comment|// Only case where stream should not be closed
name|shouldClose
operator|=
literal|false
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|rsp
return|;
block|}
name|String
name|procCt
init|=
name|processor
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|procCt
operator|!=
literal|null
condition|)
block|{
name|String
name|procMimeType
init|=
name|ContentType
operator|.
name|parse
argument_list|(
name|procCt
argument_list|)
operator|.
name|getMimeType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|ContentType
operator|.
name|parse
argument_list|(
name|contentType
argument_list|)
operator|.
name|getMimeType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|procMimeType
operator|.
name|equals
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
comment|// unexpected mime type
name|String
name|msg
init|=
literal|"Expected mime type "
operator|+
name|procMimeType
operator|+
literal|" but got "
operator|+
name|mimeType
operator|+
literal|"."
decl_stmt|;
name|Header
name|encodingHeader
init|=
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentEncoding
argument_list|()
decl_stmt|;
name|String
name|encoding
decl_stmt|;
if|if
condition|(
name|encodingHeader
operator|!=
literal|null
condition|)
block|{
name|encoding
operator|=
name|encodingHeader
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
comment|// try UTF-8
block|}
try|try
block|{
name|msg
operator|=
name|msg
operator|+
literal|" "
operator|+
name|IOUtils
operator|.
name|toString
argument_list|(
name|respBody
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteSolrException
argument_list|(
name|httpStatus
argument_list|,
literal|"Could not parse response with encoding "
operator|+
name|encoding
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|RemoteSolrException
name|e
init|=
operator|new
name|RemoteSolrException
argument_list|(
name|httpStatus
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
decl_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|//      if(true) {
comment|//        ByteArrayOutputStream copy = new ByteArrayOutputStream();
comment|//        IOUtils.copy(respBody, copy);
comment|//        String val = new String(copy.toByteArray());
comment|//        System.out.println(">RESPONSE>"+val+"<"+val.length());
comment|//        respBody = new ByteArrayInputStream(copy.toByteArray());
comment|//      }
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
literal|null
decl_stmt|;
name|String
name|charset
init|=
name|EntityUtils
operator|.
name|getContentCharSet
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|rsp
operator|=
name|processor
operator|.
name|processResponse
argument_list|(
name|respBody
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteSolrException
argument_list|(
name|httpStatus
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|httpStatus
operator|!=
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
name|String
name|reason
init|=
literal|null
decl_stmt|;
try|try
block|{
name|NamedList
name|err
init|=
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|reason
operator|=
operator|(
name|String
operator|)
name|err
operator|.
name|get
argument_list|(
literal|"msg"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
block|{
name|reason
operator|=
operator|(
name|String
operator|)
name|err
operator|.
name|get
argument_list|(
literal|"trace"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"request: "
operator|+
name|method
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|reason
operator|=
name|java
operator|.
name|net
operator|.
name|URLDecoder
operator|.
name|decode
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RemoteSolrException
argument_list|(
name|httpStatus
argument_list|,
name|reason
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|rsp
return|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"Server refused connection at: "
operator|+
name|getBaseURL
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"Timeout occured while waiting response from server at: "
operator|+
name|getBaseURL
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"IOException occured when talking to server at: "
operator|+
name|getBaseURL
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|respBody
operator|!=
literal|null
operator|&&
name|shouldClose
condition|)
block|{
try|try
block|{
name|respBody
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|method
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// -------------------------------------------------------------------
comment|// -------------------------------------------------------------------
comment|/**    * Retrieve the default list of parameters are added to every request    * regardless.    *     * @see #invariantParams    */
DECL|method|getInvariantParams
specifier|public
name|ModifiableSolrParams
name|getInvariantParams
parameter_list|()
block|{
return|return
name|invariantParams
return|;
block|}
DECL|method|getBaseURL
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
return|return
name|baseUrl
return|;
block|}
DECL|method|setBaseURL
specifier|public
name|void
name|setBaseURL
parameter_list|(
name|String
name|baseURL
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|baseURL
expr_stmt|;
block|}
DECL|method|getParser
specifier|public
name|ResponseParser
name|getParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
comment|/**    * Note: This setter method is<b>not thread-safe</b>.    *     * @param processor    *          Default Response Parser chosen to parse the response if the parser    *          were not specified as part of the request.    * @see org.apache.solr.client.solrj.SolrRequest#getResponseParser()    */
DECL|method|setParser
specifier|public
name|void
name|setParser
parameter_list|(
name|ResponseParser
name|processor
parameter_list|)
block|{
name|parser
operator|=
name|processor
expr_stmt|;
block|}
comment|/**    * Return the HttpClient this instance uses.    */
DECL|method|getHttpClient
specifier|public
name|HttpClient
name|getHttpClient
parameter_list|()
block|{
return|return
name|httpClient
return|;
block|}
comment|/**    * HttpConnectionParams.setConnectionTimeout    *     * @param timeout    *          Timeout in milliseconds    **/
DECL|method|setConnectionTimeout
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|HttpClientUtil
operator|.
name|setConnectionTimeout
argument_list|(
name|httpClient
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set SoTimeout (read timeout). This is desirable    * for queries, but probably not for indexing.    *     * @param timeout    *          Timeout in milliseconds    **/
DECL|method|setSoTimeout
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|HttpClientUtil
operator|.
name|setSoTimeout
argument_list|(
name|httpClient
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Configure whether the client should follow redirects or not.    *<p>    * This defaults to false under the assumption that if you are following a    * redirect to get to a Solr installation, something is misconfigured    * somewhere.    *</p>    */
DECL|method|setFollowRedirects
specifier|public
name|void
name|setFollowRedirects
parameter_list|(
name|boolean
name|followRedirects
parameter_list|)
block|{
name|this
operator|.
name|followRedirects
operator|=
name|followRedirects
expr_stmt|;
name|HttpClientUtil
operator|.
name|setFollowRedirects
argument_list|(
name|httpClient
argument_list|,
name|followRedirects
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allow server->client communication to be compressed. Currently gzip and    * deflate are supported. If the server supports compression the response will    * be compressed. This method is only allowed if the http client is of type    * DefatulHttpClient.    */
DECL|method|setAllowCompression
specifier|public
name|void
name|setAllowCompression
parameter_list|(
name|boolean
name|allowCompression
parameter_list|)
block|{
if|if
condition|(
name|httpClient
operator|instanceof
name|DefaultHttpClient
condition|)
block|{
name|HttpClientUtil
operator|.
name|setAllowCompression
argument_list|(
operator|(
name|DefaultHttpClient
operator|)
name|httpClient
argument_list|,
name|allowCompression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"HttpClient instance was not of type DefaultHttpClient"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set maximum number of retries to attempt in the event of transient errors.    *<p>    * Maximum number of retries to attempt in the event of transient errors.    * Default: 0 (no) retries. No more than 1 recommended.    *</p>    * @param maxRetries    *          No more than 1 recommended    */
DECL|method|setMaxRetries
specifier|public
name|void
name|setMaxRetries
parameter_list|(
name|int
name|maxRetries
parameter_list|)
block|{
if|if
condition|(
name|maxRetries
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"HttpSolrServer: maximum Retries "
operator|+
name|maxRetries
operator|+
literal|"> 1. Maximum recommended retries is 1."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxRetries
operator|=
name|maxRetries
expr_stmt|;
block|}
DECL|method|setRequestWriter
specifier|public
name|void
name|setRequestWriter
parameter_list|(
name|RequestWriter
name|requestWriter
parameter_list|)
block|{
name|this
operator|.
name|requestWriter
operator|=
name|requestWriter
expr_stmt|;
block|}
comment|/**    * Adds the documents supplied by the given iterator.    *     * @param docIterator    *          the iterator which returns SolrInputDocument instances    *     * @return the response from the SolrServer    */
DECL|method|add
specifier|public
name|UpdateResponse
name|add
parameter_list|(
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
name|docIterator
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setDocIterator
argument_list|(
name|docIterator
argument_list|)
expr_stmt|;
return|return
name|req
operator|.
name|process
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Adds the beans supplied by the given iterator.    *     * @param beanIterator    *          the iterator which returns Beans    *     * @return the response from the SolrServer    */
DECL|method|addBeans
specifier|public
name|UpdateResponse
name|addBeans
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|beanIterator
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setDocIterator
argument_list|(
operator|new
name|Iterator
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|beanIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolrInputDocument
name|next
parameter_list|()
block|{
name|Object
name|o
init|=
name|beanIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|getBinder
argument_list|()
operator|.
name|toSolrInputDocument
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|beanIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|req
operator|.
name|process
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Close the {@link ClientConnectionManager} from the internal client.    */
annotation|@
name|Override
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|httpClient
operator|!=
literal|null
operator|&&
name|internalClient
condition|)
block|{
name|httpClient
operator|.
name|getConnectionManager
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the maximum number of connections that can be open to a single host at    * any given time. If http client was created outside the operation is not    * allowed.    */
DECL|method|setDefaultMaxConnectionsPerHost
specifier|public
name|void
name|setDefaultMaxConnectionsPerHost
parameter_list|(
name|int
name|max
parameter_list|)
block|{
if|if
condition|(
name|internalClient
condition|)
block|{
name|HttpClientUtil
operator|.
name|setMaxConnectionsPerHost
argument_list|(
name|httpClient
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Client was created outside of HttpSolrServer"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set the maximum number of connections that can be open at any given time.    * If http client was created outside the operation is not allowed.    */
DECL|method|setMaxTotalConnections
specifier|public
name|void
name|setMaxTotalConnections
parameter_list|(
name|int
name|max
parameter_list|)
block|{
if|if
condition|(
name|internalClient
condition|)
block|{
name|HttpClientUtil
operator|.
name|setMaxConnections
argument_list|(
name|httpClient
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Client was created outside of HttpSolrServer"
argument_list|)
throw|;
block|}
block|}
DECL|method|isUseMultiPartPost
specifier|public
name|boolean
name|isUseMultiPartPost
parameter_list|()
block|{
return|return
name|useMultiPartPost
return|;
block|}
comment|/**    * Set the multipart connection properties    */
DECL|method|setUseMultiPartPost
specifier|public
name|void
name|setUseMultiPartPost
parameter_list|(
name|boolean
name|useMultiPartPost
parameter_list|)
block|{
name|this
operator|.
name|useMultiPartPost
operator|=
name|useMultiPartPost
expr_stmt|;
block|}
comment|/**    * Subclass of SolrException that allows us to capture an arbitrary HTTP    * status code that may have been returned by the remote server or a     * proxy along the way.    */
DECL|class|RemoteSolrException
specifier|public
specifier|static
class|class
name|RemoteSolrException
extends|extends
name|SolrException
block|{
comment|/**      * @param code Arbitrary HTTP status code      * @param msg Exception Message      * @param th Throwable to wrap with this Exception      */
DECL|method|RemoteSolrException
specifier|public
name|RemoteSolrException
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|th
parameter_list|)
block|{
name|super
argument_list|(
name|code
argument_list|,
name|msg
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
