begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|DocumentAnalysisResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|ClientUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|AnalysisParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_comment
comment|/**  * A request for the org.apache.solr.handler.DocumentAnalysisRequestHandler.  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|DocumentAnalysisRequest
specifier|public
class|class
name|DocumentAnalysisRequest
extends|extends
name|SolrRequest
block|{
DECL|field|documents
specifier|private
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|query
specifier|private
name|String
name|query
decl_stmt|;
DECL|field|showMatch
specifier|private
name|boolean
name|showMatch
init|=
literal|false
decl_stmt|;
comment|/**    * Constructs a new request with a default uri of "/documentanalysis".    */
DECL|method|DocumentAnalysisRequest
specifier|public
name|DocumentAnalysisRequest
parameter_list|()
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|POST
argument_list|,
literal|"/analysis/document"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a new request with the given request handler uri.    *    * @param uri The of the request handler.    */
DECL|method|DocumentAnalysisRequest
specifier|public
name|DocumentAnalysisRequest
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|POST
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|getContentStreams
specifier|public
name|Collection
argument_list|<
name|ContentStream
argument_list|>
name|getContentStreams
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|ClientUtils
operator|.
name|toContentStreams
argument_list|(
name|getXML
argument_list|()
argument_list|,
name|ClientUtils
operator|.
name|TEXT_XML
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|ModifiableSolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|AnalysisParams
operator|.
name|QUERY
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|AnalysisParams
operator|.
name|SHOW_MATCH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|showMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|process
specifier|public
name|DocumentAnalysisResponse
name|process
parameter_list|(
name|SolrClient
name|client
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|DocumentAnalysisResponse
name|res
init|=
operator|new
name|DocumentAnalysisResponse
argument_list|()
decl_stmt|;
name|res
operator|.
name|setResponse
argument_list|(
name|client
operator|.
name|request
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|res
operator|.
name|setElapsedTime
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|//================================================ Helper Methods ==================================================
comment|/**    * Returns the xml be be set as the request body.    *    * @return The xml be be set as the request body.    *    * @throws IOException When constructing the xml fails    */
DECL|method|getXML
name|String
name|getXML
parameter_list|()
throws|throws
name|IOException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<docs>"
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrInputDocument
name|document
range|:
name|documents
control|)
block|{
name|ClientUtils
operator|.
name|writeXML
argument_list|(
name|document
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</docs>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|xml
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|(
name|xml
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|xml
else|:
literal|null
return|;
block|}
comment|//============================================ Setter/Getter Methods ===============================================
comment|/**    * Adds a document to be analyzed.    *    * @param doc The document to be analyzed.    *    * @return This DocumentAnalysisRequest (fluent interface support).    */
DECL|method|addDocument
specifier|public
name|DocumentAnalysisRequest
name|addDocument
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
block|{
name|documents
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Adds a collection of documents to be analyzed.    *    * @param docs The documents to be analyzed.    *    * @return This DocumentAnalysisRequest (fluent interface support).    *    * @see #addDocument(org.apache.solr.common.SolrInputDocument)    */
DECL|method|addDocuments
specifier|public
name|DocumentAnalysisRequest
name|addDocuments
parameter_list|(
name|Collection
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
parameter_list|)
block|{
name|documents
operator|.
name|addAll
argument_list|(
name|docs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Sets the query to be analyzed. By default the query is set to null, meaning no query analysis will be performed.    *    * @param query The query to be analyzed.    *    * @return This DocumentAnalysisRequest (fluent interface support).    */
DECL|method|setQuery
specifier|public
name|DocumentAnalysisRequest
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Sets whether index time tokens that match query time tokens should be marked as a "match". By default this is set    * to {@code false}. Obviously, this flag is ignored if when the query is set to {@code null}.    *    * @param showMatch Sets whether index time tokens that match query time tokens should be marked as a "match".    *    * @return This DocumentAnalysisRequest (fluent interface support).    */
DECL|method|setShowMatch
specifier|public
name|DocumentAnalysisRequest
name|setShowMatch
parameter_list|(
name|boolean
name|showMatch
parameter_list|)
block|{
name|this
operator|.
name|showMatch
operator|=
name|showMatch
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Returns all documents that will be analyzed when processing the request.    *    * @return All documents that will be analyzed when processing the request.    *    * @see #addDocument(org.apache.solr.common.SolrInputDocument)    */
DECL|method|getDocuments
specifier|public
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|getDocuments
parameter_list|()
block|{
return|return
name|documents
return|;
block|}
comment|/**    * Returns the query that will be analyzed when processing the request. May return {@code null} indicating that no    * query time analysis is taking place.    *    * @return The query that will be analyzed when processing the request.    *    * @see #setQuery(String)    */
DECL|method|getQuery
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
comment|/**    * Returns whether index time tokens that match query time tokens will be marked as a "match".    *    * @return Whether index time tokens that match query time tokens will be marked as a "match".    *    * @see #setShowMatch(boolean)    */
DECL|method|isShowMatch
specifier|public
name|boolean
name|isShowMatch
parameter_list|()
block|{
return|return
name|showMatch
return|;
block|}
block|}
end_class
end_unit
