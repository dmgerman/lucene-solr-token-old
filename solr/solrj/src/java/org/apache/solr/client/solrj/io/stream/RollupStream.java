begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|HashKey
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|FieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|MultipleFieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|StreamEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Bucket
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import
begin_class
DECL|class|RollupStream
specifier|public
class|class
name|RollupStream
extends|extends
name|TupleStream
implements|implements
name|Expressible
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|tupleStream
specifier|private
name|PushBackStream
name|tupleStream
decl_stmt|;
DECL|field|buckets
specifier|private
name|Bucket
index|[]
name|buckets
decl_stmt|;
DECL|field|metrics
specifier|private
name|Metric
index|[]
name|metrics
decl_stmt|;
DECL|field|currentKey
specifier|private
name|HashKey
name|currentKey
init|=
operator|new
name|HashKey
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
DECL|field|currentMetrics
specifier|private
name|Metric
index|[]
name|currentMetrics
decl_stmt|;
DECL|field|finished
specifier|private
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
DECL|method|RollupStream
specifier|public
name|RollupStream
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|,
name|Bucket
index|[]
name|buckets
parameter_list|,
name|Metric
index|[]
name|metrics
parameter_list|)
block|{
name|init
argument_list|(
name|tupleStream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
DECL|method|RollupStream
specifier|public
name|RollupStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// grab all parameters out
name|List
argument_list|<
name|StreamExpression
argument_list|>
name|streamExpressions
init|=
name|factory
operator|.
name|getExpressionOperandsRepresentingTypes
argument_list|(
name|expression
argument_list|,
name|Expressible
operator|.
name|class
argument_list|,
name|TupleStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StreamExpression
argument_list|>
name|metricExpressions
init|=
name|factory
operator|.
name|getExpressionOperandsRepresentingTypes
argument_list|(
name|expression
argument_list|,
name|Expressible
operator|.
name|class
argument_list|,
name|Metric
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpressionNamedParameter
name|overExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"over"
argument_list|)
decl_stmt|;
comment|// validate expression contains only what we want.
if|if
condition|(
name|expression
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|streamExpressions
operator|.
name|size
argument_list|()
operator|+
name|metricExpressions
operator|.
name|size
argument_list|()
operator|+
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - unknown operands found"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
literal|1
operator|!=
name|streamExpressions
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting a single stream but found %d"
argument_list|,
name|expression
argument_list|,
name|streamExpressions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
literal|0
operator|==
name|metricExpressions
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting at least 1 metric but found %d"
argument_list|,
name|expression
argument_list|,
name|metricExpressions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|overExpression
operator|||
operator|!
operator|(
name|overExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting single 'over' parameter listing fields to rollup by but didn't find one"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
comment|// Construct the metrics
name|Metric
index|[]
name|metrics
init|=
operator|new
name|Metric
index|[
name|metricExpressions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|metricExpressions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|metrics
index|[
name|idx
index|]
operator|=
name|factory
operator|.
name|constructMetric
argument_list|(
name|metricExpressions
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Construct the buckets.
comment|// Buckets are nothing more than equalitors (I think). We can use equalitors as helpers for creating the buckets, but because
comment|// I feel I'm missing something wrt buckets I don't want to change the use of buckets in this class to instead be equalitors.
name|StreamEqualitor
name|streamEqualitor
init|=
name|factory
operator|.
name|constructEqualitor
argument_list|(
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|overExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|FieldEqualitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldEqualitor
argument_list|>
name|flattenedEqualitors
init|=
name|flattenEqualitor
argument_list|(
name|streamEqualitor
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
operator|new
name|Bucket
index|[
name|flattenedEqualitors
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|flattenedEqualitors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|buckets
index|[
name|idx
index|]
operator|=
operator|new
name|Bucket
argument_list|(
name|flattenedEqualitors
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getLeftFieldName
argument_list|()
argument_list|)
expr_stmt|;
comment|// while we're using equalitors we don't support those of the form a=b. Only single field names.
block|}
name|init
argument_list|(
name|factory
operator|.
name|constructStream
argument_list|(
name|streamExpressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
DECL|method|flattenEqualitor
specifier|private
name|List
argument_list|<
name|FieldEqualitor
argument_list|>
name|flattenEqualitor
parameter_list|(
name|StreamEqualitor
name|equalitor
parameter_list|)
block|{
name|List
argument_list|<
name|FieldEqualitor
argument_list|>
name|flattenedList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|equalitor
operator|instanceof
name|FieldEqualitor
condition|)
block|{
name|flattenedList
operator|.
name|add
argument_list|(
operator|(
name|FieldEqualitor
operator|)
name|equalitor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|equalitor
operator|instanceof
name|MultipleFieldEqualitor
condition|)
block|{
name|MultipleFieldEqualitor
name|mEqualitor
init|=
operator|(
name|MultipleFieldEqualitor
operator|)
name|equalitor
decl_stmt|;
for|for
control|(
name|StreamEqualitor
name|subEqualitor
range|:
name|mEqualitor
operator|.
name|getEqs
argument_list|()
control|)
block|{
name|flattenedList
operator|.
name|addAll
argument_list|(
name|flattenEqualitor
argument_list|(
name|subEqualitor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|flattenedList
return|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|,
name|Bucket
index|[]
name|buckets
parameter_list|,
name|Metric
index|[]
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|tupleStream
operator|=
operator|new
name|PushBackStream
argument_list|(
name|tupleStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|buckets
operator|=
name|buckets
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// function name
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// stream
name|expression
operator|.
name|addParameter
argument_list|(
name|tupleStream
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
comment|// over
name|StringBuilder
name|overBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
if|if
condition|(
name|overBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|overBuilder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|overBuilder
operator|.
name|append
argument_list|(
name|bucket
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"over"
argument_list|,
name|overBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// metrics
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
name|metric
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|tupleStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|TupleStream
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|tupleStream
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentMetrics
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentKey
operator|=
operator|new
name|HashKey
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|this
operator|.
name|finished
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|tuple
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
if|if
condition|(
operator|!
name|finished
condition|)
block|{
if|if
condition|(
name|currentMetrics
operator|==
literal|null
condition|)
block|{
return|return
name|tuple
return|;
block|}
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|currentMetrics
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|metric
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|metric
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|buckets
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|currentKey
operator|.
name|getParts
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Tuple
name|t
init|=
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|tupleStream
operator|.
name|pushBack
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|finished
operator|=
literal|true
expr_stmt|;
return|return
name|t
return|;
block|}
else|else
block|{
return|return
name|tuple
return|;
block|}
block|}
name|Object
index|[]
name|bucketValues
init|=
operator|new
name|Object
index|[
name|buckets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bucketValues
index|[
name|i
index|]
operator|=
name|buckets
index|[
name|i
index|]
operator|.
name|getBucketValue
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
name|HashKey
name|hashKey
init|=
operator|new
name|HashKey
argument_list|(
name|bucketValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashKey
operator|.
name|equals
argument_list|(
name|currentKey
argument_list|)
condition|)
block|{
for|for
control|(
name|Metric
name|bucketMetric
range|:
name|currentMetrics
control|)
block|{
name|bucketMetric
operator|.
name|update
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Tuple
name|t
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentMetrics
operator|!=
literal|null
condition|)
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|currentMetrics
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|metric
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|metric
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|buckets
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|currentKey
operator|.
name|getParts
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|t
operator|=
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
name|currentMetrics
operator|=
operator|new
name|Metric
index|[
name|metrics
operator|.
name|length
index|]
expr_stmt|;
name|currentKey
operator|=
name|hashKey
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metrics
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Metric
name|bucketMetric
init|=
name|metrics
index|[
name|i
index|]
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|bucketMetric
operator|.
name|update
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|currentMetrics
index|[
name|i
index|]
operator|=
name|bucketMetric
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
block|}
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
name|tupleStream
operator|.
name|getStreamSort
argument_list|()
return|;
block|}
block|}
end_class
end_unit
