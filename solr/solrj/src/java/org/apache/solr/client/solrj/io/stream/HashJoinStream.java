begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
operator|.
name|ExpressionType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExplanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_comment
comment|/**  * Takes two streams (fullStream and hashStream) and joins them similar to an InnerJoinStream. The difference  * in a HashJoinStream is that the tuples in the hashStream will all be read and hashed when this stream is  * opened. This provides a few optimizations iff the hashStream has a relatively small number of documents.  * You are expected to provide a set of fields for which the hash will be calculated from. If a tuple does  * not contain a value (ie, null) for one of the fields the hash is being computed on then that tuple will   * not be considered a match to anything. Ie, all fields which are part of the hash must have a non-null value. **/
end_comment
begin_class
DECL|class|HashJoinStream
specifier|public
class|class
name|HashJoinStream
extends|extends
name|TupleStream
implements|implements
name|Expressible
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|hashStream
specifier|protected
name|TupleStream
name|hashStream
decl_stmt|;
DECL|field|fullStream
specifier|protected
name|TupleStream
name|fullStream
decl_stmt|;
DECL|field|hashOn
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|hashOn
decl_stmt|;
DECL|field|hashedTuples
specifier|protected
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Tuple
argument_list|>
argument_list|>
name|hashedTuples
decl_stmt|;
DECL|field|workingFullTuple
specifier|protected
name|Tuple
name|workingFullTuple
init|=
literal|null
decl_stmt|;
DECL|field|workingFullHash
specifier|protected
name|Integer
name|workingFullHash
init|=
literal|null
decl_stmt|;
DECL|field|workngHashSetIdx
specifier|protected
name|int
name|workngHashSetIdx
init|=
literal|0
decl_stmt|;
DECL|method|HashJoinStream
specifier|public
name|HashJoinStream
parameter_list|(
name|TupleStream
name|fullStream
parameter_list|,
name|TupleStream
name|hashStream
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|hashOn
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|fullStream
argument_list|,
name|hashStream
argument_list|,
name|hashOn
argument_list|)
expr_stmt|;
block|}
DECL|method|HashJoinStream
specifier|public
name|HashJoinStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// grab all parameters out
name|List
argument_list|<
name|StreamExpression
argument_list|>
name|streamExpressions
init|=
name|factory
operator|.
name|getExpressionOperandsRepresentingTypes
argument_list|(
name|expression
argument_list|,
name|Expressible
operator|.
name|class
argument_list|,
name|TupleStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpressionNamedParameter
name|hashStreamExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"hashed"
argument_list|)
decl_stmt|;
name|StreamExpressionNamedParameter
name|onExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"on"
argument_list|)
decl_stmt|;
comment|// validate expression contains only what we want.
if|if
condition|(
name|expression
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|streamExpressions
operator|.
name|size
argument_list|()
operator|+
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - unknown operands found"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
literal|1
operator|!=
name|streamExpressions
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting two streams but found %d"
argument_list|,
name|expression
argument_list|,
name|streamExpressions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|hashStreamExpression
operator|||
operator|!
operator|(
name|hashStreamExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpression
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting single 'hashed' parameter containing the stream to hash but didn't find one"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|onExpression
operator|||
operator|!
operator|(
name|onExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting single 'on' parameter listing fields to hash on but didn't find one"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|hashOnValue
init|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|onExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|hashOnValue
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hashOn
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|parts
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|hashOn
operator|.
name|add
argument_list|(
name|part
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|factory
operator|.
name|constructStream
argument_list|(
name|streamExpressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|constructStream
argument_list|(
operator|(
name|StreamExpression
operator|)
name|hashStreamExpression
operator|.
name|getParameter
argument_list|()
argument_list|)
argument_list|,
name|hashOn
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|TupleStream
name|fullStream
parameter_list|,
name|TupleStream
name|hashStream
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|hashOn
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fullStream
operator|=
name|fullStream
expr_stmt|;
name|this
operator|.
name|hashStream
operator|=
name|hashStream
expr_stmt|;
name|this
operator|.
name|hashOn
operator|=
name|hashOn
expr_stmt|;
name|this
operator|.
name|hashedTuples
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpression
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toExpression
argument_list|(
name|factory
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|toExpression
specifier|private
name|StreamExpression
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|,
name|boolean
name|includeStreams
parameter_list|)
throws|throws
name|IOException
block|{
comment|// function name
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeStreams
condition|)
block|{
comment|// streams
if|if
condition|(
name|hashStream
operator|instanceof
name|Expressible
operator|&&
name|fullStream
operator|instanceof
name|Expressible
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|(
operator|(
name|Expressible
operator|)
name|fullStream
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"hashed"
argument_list|,
operator|(
operator|(
name|Expressible
operator|)
name|hashStream
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|expression
operator|.
name|addParameter
argument_list|(
literal|"<stream>"
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
literal|"hashed=<stream>"
argument_list|)
expr_stmt|;
block|}
comment|// on
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|hashOn
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"on"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expression
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withChildren
argument_list|(
operator|new
name|Explanation
index|[]
block|{
name|fullStream
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
block|,
name|hashStream
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
block|}
argument_list|)
operator|.
name|withFunctionName
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withImplementingClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withExpressionType
argument_list|(
name|ExpressionType
operator|.
name|STREAM_DECORATOR
argument_list|)
operator|.
name|withExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|hashStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|fullStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|TupleStream
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|hashStream
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|fullStream
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|hashStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|fullStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tuple
init|=
name|hashStream
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|tuple
operator|.
name|EOF
condition|)
block|{
name|Integer
name|hash
init|=
name|calculateHash
argument_list|(
name|tuple
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|hash
condition|)
block|{
if|if
condition|(
name|hashedTuples
operator|.
name|containsKey
argument_list|(
name|hash
argument_list|)
condition|)
block|{
name|hashedTuples
operator|.
name|get
argument_list|(
name|hash
argument_list|)
operator|.
name|add
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|Tuple
argument_list|>
name|set
init|=
operator|new
name|ArrayList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|hashedTuples
operator|.
name|put
argument_list|(
name|hash
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
block|}
name|tuple
operator|=
name|hashStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|calculateHash
specifier|protected
name|Integer
name|calculateHash
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|hashOn
control|)
block|{
name|Object
name|obj
init|=
name|tuple
operator|.
name|get
argument_list|(
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|obj
condition|)
block|{
return|return
literal|null
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"::"
argument_list|)
expr_stmt|;
comment|// this is here to seperate fields
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|hashStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|fullStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|findNextWorkingFullTuple
label|:
while|while
condition|(
literal|null
operator|==
name|workingFullTuple
condition|)
block|{
name|Tuple
name|fullTuple
init|=
name|fullStream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// We're at the end of the line
if|if
condition|(
name|fullTuple
operator|.
name|EOF
condition|)
block|{
return|return
name|fullTuple
return|;
block|}
comment|// If fullTuple doesn't have a valid hash or if there is no doc to
comment|// join with then retry loop - keep going until we find one
name|Integer
name|fullHash
init|=
name|calculateHash
argument_list|(
name|fullTuple
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|fullHash
operator|||
operator|!
name|hashedTuples
operator|.
name|containsKey
argument_list|(
name|fullHash
argument_list|)
condition|)
block|{
continue|continue
name|findNextWorkingFullTuple
continue|;
block|}
name|workingFullTuple
operator|=
name|fullTuple
expr_stmt|;
name|workingFullHash
operator|=
name|fullHash
expr_stmt|;
name|workngHashSetIdx
operator|=
literal|0
expr_stmt|;
block|}
comment|// At this point we know we have at least one doc to match on
comment|// Due to the check at the end, before returning, we know we have at least one to match with left
name|List
argument_list|<
name|Tuple
argument_list|>
name|matches
init|=
name|hashedTuples
operator|.
name|get
argument_list|(
name|workingFullHash
argument_list|)
decl_stmt|;
name|Tuple
name|returnTuple
init|=
name|workingFullTuple
operator|.
name|clone
argument_list|()
decl_stmt|;
name|returnTuple
operator|.
name|merge
argument_list|(
name|matches
operator|.
name|get
argument_list|(
name|workngHashSetIdx
argument_list|)
argument_list|)
expr_stmt|;
comment|// Increment this so the next time we hit the next matching tuple
name|workngHashSetIdx
operator|++
expr_stmt|;
if|if
condition|(
name|workngHashSetIdx
operator|>=
name|matches
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// well, now we've reached all the matches, clear it all out
name|workingFullTuple
operator|=
literal|null
expr_stmt|;
name|workingFullHash
operator|=
literal|null
expr_stmt|;
name|workngHashSetIdx
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|returnTuple
return|;
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
name|fullStream
operator|.
name|getStreamSort
argument_list|()
return|;
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class
end_unit
