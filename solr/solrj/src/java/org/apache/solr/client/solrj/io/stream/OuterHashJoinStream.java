begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_comment
comment|/**  * Takes two streams (fullStream and hashStream) and joins them similar to an LeftOuterJoinStream. The difference  * in a OuterHashJoinStream is that the tuples in the hashStream will all be read and hashed when this stream is  * opened. This provides a few optimizations iff the hashStream has a relatively small number of documents.  * The difference between this and a HashJoinStream is that a tuple in the fullStream will be returned even  * if it doesn't have any matching tuples in the hashStream.   * You are expected to provide a set of fields for which the hash will be calculated from. If a tuple from the   * hashStream does not contain a value (ie, null) for one of the fields the hash is being computed on then that   * tuple will not be considered a match to anything. If a tuple from the fullStream does not contain a value (ie, null)   * for one of the fields the hash is being computed on then that tuple will be returned without any joined tuples  * from the hashStream **/
end_comment
begin_class
DECL|class|OuterHashJoinStream
specifier|public
class|class
name|OuterHashJoinStream
extends|extends
name|HashJoinStream
implements|implements
name|Expressible
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|OuterHashJoinStream
specifier|public
name|OuterHashJoinStream
parameter_list|(
name|TupleStream
name|fullStream
parameter_list|,
name|TupleStream
name|hashStream
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|hashOn
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fullStream
argument_list|,
name|hashStream
argument_list|,
name|hashOn
argument_list|)
expr_stmt|;
block|}
DECL|method|OuterHashJoinStream
specifier|public
name|OuterHashJoinStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpression
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// function name
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// streams
if|if
condition|(
name|hashStream
operator|instanceof
name|Expressible
operator|&&
name|fullStream
operator|instanceof
name|Expressible
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|(
operator|(
name|Expressible
operator|)
name|fullStream
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"hashed"
argument_list|,
operator|(
operator|(
name|Expressible
operator|)
name|hashStream
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This OuterHashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression"
argument_list|)
throw|;
block|}
comment|// on
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|hashOn
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"on"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expression
return|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|workingFullTuple
condition|)
block|{
name|Tuple
name|fullTuple
init|=
name|fullStream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// We're at the end of the line
if|if
condition|(
name|fullTuple
operator|.
name|EOF
condition|)
block|{
return|return
name|fullTuple
return|;
block|}
comment|// If fullTuple doesn't have a valid hash or the hash cannot be found in the hashedTuples then
comment|// return the tuple from fullStream.
comment|// This is an outer join so there is no requirement there be a matching value in the hashed stream
name|Integer
name|fullHash
init|=
name|calculateHash
argument_list|(
name|fullTuple
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|fullHash
operator|||
operator|!
name|hashedTuples
operator|.
name|containsKey
argument_list|(
name|fullHash
argument_list|)
condition|)
block|{
return|return
name|fullTuple
operator|.
name|clone
argument_list|()
return|;
block|}
name|workingFullTuple
operator|=
name|fullTuple
expr_stmt|;
name|workingFullHash
operator|=
name|fullHash
expr_stmt|;
name|workngHashSetIdx
operator|=
literal|0
expr_stmt|;
block|}
comment|// At this point we know we have at least one doc to match on
comment|// Due to the check at the end, before returning, we know we have at least one to match with left
name|List
argument_list|<
name|Tuple
argument_list|>
name|matches
init|=
name|hashedTuples
operator|.
name|get
argument_list|(
name|workingFullHash
argument_list|)
decl_stmt|;
name|Tuple
name|returnTuple
init|=
name|workingFullTuple
operator|.
name|clone
argument_list|()
decl_stmt|;
name|returnTuple
operator|.
name|merge
argument_list|(
name|matches
operator|.
name|get
argument_list|(
name|workngHashSetIdx
argument_list|)
argument_list|)
expr_stmt|;
comment|// Increment this so the next time we hit the next matching tuple
name|workngHashSetIdx
operator|++
expr_stmt|;
if|if
condition|(
name|workngHashSetIdx
operator|>=
name|matches
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// well, now we've reached all the matches, clear it all out
name|workingFullTuple
operator|=
literal|null
expr_stmt|;
name|workingFullHash
operator|=
literal|null
expr_stmt|;
name|workngHashSetIdx
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|returnTuple
return|;
block|}
block|}
end_class
end_unit
