begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.io
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *  The SolrClientCache caches SolrClients so they can be reused by different TupleStreams.  **/
end_comment
begin_class
DECL|class|SolrClientCache
specifier|public
class|class
name|SolrClientCache
implements|implements
name|Serializable
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrClientCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|solrClients
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SolrClient
argument_list|>
name|solrClients
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|method|getCloudSolrClient
specifier|public
specifier|synchronized
name|CloudSolrClient
name|getCloudSolrClient
parameter_list|(
name|String
name|zkHost
parameter_list|)
block|{
name|CloudSolrClient
name|client
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solrClients
operator|.
name|containsKey
argument_list|(
name|zkHost
argument_list|)
condition|)
block|{
name|client
operator|=
operator|(
name|CloudSolrClient
operator|)
name|solrClients
operator|.
name|get
argument_list|(
name|zkHost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|=
operator|new
name|CloudSolrClient
argument_list|(
name|zkHost
argument_list|)
expr_stmt|;
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|solrClients
operator|.
name|put
argument_list|(
name|zkHost
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|getHttpSolrClient
specifier|public
specifier|synchronized
name|HttpSolrClient
name|getHttpSolrClient
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|HttpSolrClient
name|client
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solrClients
operator|.
name|containsKey
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|client
operator|=
operator|(
name|HttpSolrClient
operator|)
name|solrClients
operator|.
name|get
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|=
operator|new
name|HttpSolrClient
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|solrClients
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|Iterator
argument_list|<
name|SolrClient
argument_list|>
name|it
init|=
name|solrClients
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|it
operator|.
name|next
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
