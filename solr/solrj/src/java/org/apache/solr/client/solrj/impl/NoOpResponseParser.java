begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|ResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_comment
comment|/**  * Simply puts the entire response into an entry in a NamedList.  * This parser isn't parse response into a QueryResponse.  */
end_comment
begin_class
DECL|class|NoOpResponseParser
specifier|public
class|class
name|NoOpResponseParser
extends|extends
name|ResponseParser
block|{
DECL|field|writerType
specifier|private
name|String
name|writerType
init|=
literal|"xml"
decl_stmt|;
DECL|method|NoOpResponseParser
specifier|public
name|NoOpResponseParser
parameter_list|()
block|{   }
DECL|method|NoOpResponseParser
specifier|public
name|NoOpResponseParser
parameter_list|(
name|String
name|writerType
parameter_list|)
block|{
name|this
operator|.
name|writerType
operator|=
name|writerType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriterType
specifier|public
name|String
name|getWriterType
parameter_list|()
block|{
return|return
name|writerType
return|;
block|}
DECL|method|setWriterType
specifier|public
name|void
name|setWriterType
parameter_list|(
name|String
name|writerType
parameter_list|)
block|{
name|this
operator|.
name|writerType
operator|=
name|writerType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processResponse
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|processResponse
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"parsing error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|processResponse
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|processResponse
parameter_list|(
name|InputStream
name|body
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|body
argument_list|,
name|writer
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"parsing error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
