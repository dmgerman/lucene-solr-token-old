begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|ClientCookie
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|Cookie
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|CookieOrigin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|CookieSpec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|CookieSpecFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|CookieSpecProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|MalformedCookieException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|params
operator|.
name|CookieSpecPNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|cookie
operator|.
name|NetscapeDomainHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|cookie
operator|.
name|NetscapeDraftSpec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import
begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|SolrPortAwareCookieSpecFactory
specifier|public
class|class
name|SolrPortAwareCookieSpecFactory
implements|implements
name|CookieSpecFactory
implements|,
name|CookieSpecProvider
block|{
DECL|field|POLICY_NAME
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_NAME
init|=
literal|"solr-portaware"
decl_stmt|;
DECL|field|cookieSpec
specifier|private
specifier|final
name|CookieSpec
name|cookieSpec
decl_stmt|;
DECL|method|SolrPortAwareCookieSpecFactory
specifier|public
name|SolrPortAwareCookieSpecFactory
parameter_list|(
specifier|final
name|String
index|[]
name|datepatterns
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|cookieSpec
operator|=
operator|new
name|PortAwareCookieSpec
argument_list|(
name|datepatterns
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrPortAwareCookieSpecFactory
specifier|public
name|SolrPortAwareCookieSpecFactory
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|CookieSpec
name|newInstance
parameter_list|(
specifier|final
name|HttpParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|patterns
init|=
literal|null
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|param
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|params
operator|.
name|getParameter
argument_list|(
name|CookieSpecPNames
operator|.
name|DATE_PATTERNS
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|patterns
operator|=
operator|new
name|String
index|[
name|param
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|patterns
operator|=
name|param
operator|.
name|toArray
argument_list|(
name|patterns
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PortAwareCookieSpec
argument_list|(
name|patterns
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PortAwareCookieSpec
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|CookieSpec
name|create
parameter_list|(
specifier|final
name|HttpContext
name|context
parameter_list|)
block|{
return|return
name|this
operator|.
name|cookieSpec
return|;
block|}
DECL|class|PortAwareCookieSpec
specifier|public
specifier|static
class|class
name|PortAwareCookieSpec
extends|extends
name|NetscapeDraftSpec
block|{
DECL|method|PortAwareCookieSpec
specifier|public
name|PortAwareCookieSpec
parameter_list|(
name|String
name|patterns
index|[]
parameter_list|)
block|{
name|super
argument_list|(
name|patterns
argument_list|)
expr_stmt|;
name|super
operator|.
name|registerAttribHandler
argument_list|(
name|ClientCookie
operator|.
name|DOMAIN_ATTR
argument_list|,
operator|new
name|PortAwareDomainHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|PortAwareCookieSpec
specifier|public
name|PortAwareCookieSpec
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A domain handler to validate and match cookies based on the domain and origin.    * The domain is tested against host and port both, and if it doesn't match, it    * delegates the handling to the base class' matching/validation logic.    */
DECL|class|PortAwareDomainHandler
specifier|public
specifier|static
class|class
name|PortAwareDomainHandler
extends|extends
name|NetscapeDomainHandler
block|{
DECL|method|validate
specifier|public
name|void
name|validate
parameter_list|(
specifier|final
name|Cookie
name|cookie
parameter_list|,
specifier|final
name|CookieOrigin
name|origin
parameter_list|)
throws|throws
name|MalformedCookieException
block|{
if|if
condition|(
name|origin
operator|!=
literal|null
operator|&&
name|origin
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
name|cookie
operator|!=
literal|null
condition|)
block|{
name|String
name|hostPort
init|=
name|origin
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|origin
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|domain
init|=
name|cookie
operator|.
name|getDomain
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostPort
operator|.
name|equals
argument_list|(
name|domain
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|super
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
specifier|final
name|Cookie
name|cookie
parameter_list|,
specifier|final
name|CookieOrigin
name|origin
parameter_list|)
block|{
if|if
condition|(
name|origin
operator|!=
literal|null
operator|&&
name|origin
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
name|cookie
operator|!=
literal|null
condition|)
block|{
name|String
name|hostPort
init|=
name|origin
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|origin
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|domain
init|=
name|cookie
operator|.
name|getDomain
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostPort
operator|.
name|equals
argument_list|(
name|domain
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|super
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
