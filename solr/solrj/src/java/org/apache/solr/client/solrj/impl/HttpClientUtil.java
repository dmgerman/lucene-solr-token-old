begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HeaderElement
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequestInterceptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponseInterceptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CredentialsProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|HttpClientContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|Registry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|RegistryBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ConnectionKeepAliveStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|socket
operator|.
name|ConnectionSocketFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|socket
operator|.
name|PlainConnectionSocketFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|SSLConnectionSocketFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|HttpEntityWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCredentialsProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpRequestRetryHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingHttpClientConnectionManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ObjectReleaseTracker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Utility class for creating/configuring httpclient instances.   *   * This class can touch internal HttpClient details and is subject to change.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|HttpClientUtil
specifier|public
class|class
name|HttpClientUtil
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_CONNECT_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CONNECT_TIMEOUT
init|=
literal|60000
decl_stmt|;
DECL|field|DEFAULT_SO_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SO_TIMEOUT
init|=
literal|600000
decl_stmt|;
DECL|field|VALIDATE_AFTER_INACTIVITY_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|VALIDATE_AFTER_INACTIVITY_DEFAULT
init|=
literal|3000
decl_stmt|;
DECL|field|EVICT_IDLE_CONNECTIONS_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|EVICT_IDLE_CONNECTIONS_DEFAULT
init|=
literal|50000
decl_stmt|;
DECL|field|VALIDATE_AFTER_INACTIVITY
specifier|private
specifier|static
specifier|final
name|String
name|VALIDATE_AFTER_INACTIVITY
init|=
literal|"validateAfterInactivity"
decl_stmt|;
DECL|field|EVICT_IDLE_CONNECTIONS
specifier|private
specifier|static
specifier|final
name|String
name|EVICT_IDLE_CONNECTIONS
init|=
literal|"evictIdleConnections"
decl_stmt|;
comment|// Maximum connections allowed per host
DECL|field|PROP_MAX_CONNECTIONS_PER_HOST
specifier|public
specifier|static
specifier|final
name|String
name|PROP_MAX_CONNECTIONS_PER_HOST
init|=
literal|"maxConnectionsPerHost"
decl_stmt|;
comment|// Maximum total connections allowed
DECL|field|PROP_MAX_CONNECTIONS
specifier|public
specifier|static
specifier|final
name|String
name|PROP_MAX_CONNECTIONS
init|=
literal|"maxConnections"
decl_stmt|;
comment|// Retry http requests on error
DECL|field|PROP_USE_RETRY
specifier|public
specifier|static
specifier|final
name|String
name|PROP_USE_RETRY
init|=
literal|"retry"
decl_stmt|;
comment|// Allow compression (deflate,gzip) if server supports it
DECL|field|PROP_ALLOW_COMPRESSION
specifier|public
specifier|static
specifier|final
name|String
name|PROP_ALLOW_COMPRESSION
init|=
literal|"allowCompression"
decl_stmt|;
comment|// Basic auth username
DECL|field|PROP_BASIC_AUTH_USER
specifier|public
specifier|static
specifier|final
name|String
name|PROP_BASIC_AUTH_USER
init|=
literal|"httpBasicAuthUser"
decl_stmt|;
comment|// Basic auth password
DECL|field|PROP_BASIC_AUTH_PASS
specifier|public
specifier|static
specifier|final
name|String
name|PROP_BASIC_AUTH_PASS
init|=
literal|"httpBasicAuthPassword"
decl_stmt|;
DECL|field|SYS_PROP_CHECK_PEER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SYS_PROP_CHECK_PEER_NAME
init|=
literal|"solr.ssl.checkPeerName"
decl_stmt|;
comment|// * NOTE* The following params configure the default request config and this
comment|// is overridden by SolrJ clients. Use the setters on the SolrJ clients to
comment|// to configure these settings if that is the intent.
comment|// Follow redirects
DECL|field|PROP_FOLLOW_REDIRECTS
specifier|public
specifier|static
specifier|final
name|String
name|PROP_FOLLOW_REDIRECTS
init|=
literal|"followRedirects"
decl_stmt|;
comment|// socket timeout measured in ms, closes a socket if read
comment|// takes longer than x ms to complete. throws
comment|// java.net.SocketTimeoutException: Read timed out exception
DECL|field|PROP_SO_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|PROP_SO_TIMEOUT
init|=
literal|"socketTimeout"
decl_stmt|;
comment|// connection timeout measures in ms, closes a socket if connection
comment|// cannot be established within x ms. with a
comment|// java.net.SocketTimeoutException: Connection timed out
DECL|field|PROP_CONNECTION_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|PROP_CONNECTION_TIMEOUT
init|=
literal|"connTimeout"
decl_stmt|;
DECL|field|NO_RETRY
specifier|static
specifier|final
name|DefaultHttpRequestRetryHandler
name|NO_RETRY
init|=
operator|new
name|DefaultHttpRequestRetryHandler
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|httpClientBuilder
specifier|private
specifier|static
specifier|volatile
name|SolrHttpClientBuilder
name|httpClientBuilder
decl_stmt|;
DECL|field|httpClientRequestContextBuilder
specifier|private
specifier|static
name|SolrHttpClientContextBuilder
name|httpClientRequestContextBuilder
init|=
operator|new
name|SolrHttpClientContextBuilder
argument_list|()
decl_stmt|;
static|static
block|{
name|resetHttpClientBuilder
argument_list|()
expr_stmt|;
block|}
DECL|class|SchemaRegistryProvider
specifier|public
specifier|static
specifier|abstract
class|class
name|SchemaRegistryProvider
block|{
comment|/** Must be non-null */
DECL|method|getSchemaRegistry
specifier|public
specifier|abstract
name|Registry
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|getSchemaRegistry
parameter_list|()
function_decl|;
block|}
DECL|field|schemaRegistryProvider
specifier|private
specifier|static
specifier|volatile
name|SchemaRegistryProvider
name|schemaRegistryProvider
decl_stmt|;
DECL|field|cookiePolicy
specifier|private
specifier|static
specifier|volatile
name|String
name|cookiePolicy
decl_stmt|;
DECL|field|interceptors
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|HttpRequestInterceptor
argument_list|>
name|interceptors
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|HttpRequestInterceptor
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|DynamicInterceptor
specifier|private
specifier|static
class|class
name|DynamicInterceptor
implements|implements
name|HttpRequestInterceptor
block|{
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|interceptors
operator|.
name|forEach
argument_list|(
operator|new
name|Consumer
argument_list|<
name|HttpRequestInterceptor
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|HttpRequestInterceptor
name|interceptor
parameter_list|)
block|{
try|try
block|{
name|interceptor
operator|.
name|process
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setHttpClientBuilder
specifier|public
specifier|static
name|void
name|setHttpClientBuilder
parameter_list|(
name|SolrHttpClientBuilder
name|newHttpClientBuilder
parameter_list|)
block|{
name|httpClientBuilder
operator|=
name|newHttpClientBuilder
expr_stmt|;
block|}
DECL|method|setHttpClientProvider
specifier|public
specifier|static
name|void
name|setHttpClientProvider
parameter_list|(
name|SolrHttpClientBuilder
name|newHttpClientBuilder
parameter_list|)
block|{
name|httpClientBuilder
operator|=
name|newHttpClientBuilder
expr_stmt|;
block|}
DECL|method|setSchemeRegistryProvider
specifier|public
specifier|static
name|void
name|setSchemeRegistryProvider
parameter_list|(
name|SchemaRegistryProvider
name|newRegistryProvider
parameter_list|)
block|{
name|schemaRegistryProvider
operator|=
name|newRegistryProvider
expr_stmt|;
block|}
DECL|method|getHttpClientBuilder
specifier|public
specifier|static
name|SolrHttpClientBuilder
name|getHttpClientBuilder
parameter_list|()
block|{
return|return
name|httpClientBuilder
return|;
block|}
DECL|method|getSchemaRegisteryProvider
specifier|public
specifier|static
name|SchemaRegistryProvider
name|getSchemaRegisteryProvider
parameter_list|()
block|{
return|return
name|schemaRegistryProvider
return|;
block|}
DECL|method|resetHttpClientBuilder
specifier|public
specifier|static
name|void
name|resetHttpClientBuilder
parameter_list|()
block|{
name|schemaRegistryProvider
operator|=
operator|new
name|DefaultSchemaRegistryProvider
argument_list|()
expr_stmt|;
name|httpClientBuilder
operator|=
name|SolrHttpClientBuilder
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|class|DefaultSchemaRegistryProvider
specifier|private
specifier|static
specifier|final
class|class
name|DefaultSchemaRegistryProvider
extends|extends
name|SchemaRegistryProvider
block|{
annotation|@
name|Override
DECL|method|getSchemaRegistry
specifier|public
name|Registry
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|getSchemaRegistry
parameter_list|()
block|{
comment|// this mimics PoolingHttpClientConnectionManager's default behavior,
comment|// except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()
comment|// to pick up the system level default SSLContext (where javax.net.ssl.* properties
comment|// related to keystore& truststore are specified)
name|RegistryBuilder
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|builder
init|=
name|RegistryBuilder
operator|.
expr|<
name|ConnectionSocketFactory
operator|>
name|create
argument_list|()
decl_stmt|;
name|builder
operator|.
name|register
argument_list|(
literal|"http"
argument_list|,
name|PlainConnectionSocketFactory
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|register
argument_list|(
literal|"https"
argument_list|,
name|SSLConnectionSocketFactory
operator|.
name|getSystemSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    * Creates new http client by using the provided configuration.    *     * @param params    *          http client configuration, if null a client with default    *          configuration (no additional configuration) is created.     */
DECL|method|createClient
specifier|public
specifier|static
name|CloseableHttpClient
name|createClient
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
return|return
name|createClient
argument_list|(
name|params
argument_list|,
operator|new
name|PoolingHttpClientConnectionManager
argument_list|(
name|schemaRegistryProvider
operator|.
name|getSchemaRegistry
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createClient
specifier|public
specifier|static
name|CloseableHttpClient
name|createClient
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|PoolingHttpClientConnectionManager
name|cm
parameter_list|)
block|{
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
block|}
return|return
name|createClient
argument_list|(
name|params
argument_list|,
name|cm
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Creates new http client by using the provided configuration.    *     */
DECL|method|createClient
specifier|public
specifier|static
name|CloseableHttpClient
name|createClient
parameter_list|(
specifier|final
name|SolrParams
name|params
parameter_list|,
name|PoolingHttpClientConnectionManager
name|cm
parameter_list|,
name|boolean
name|sharedConnectionManager
parameter_list|)
block|{
specifier|final
name|ModifiableSolrParams
name|config
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Creating new http client, config:"
operator|+
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
name|PROP_SO_TIMEOUT
argument_list|)
operator|!=
literal|null
operator|||
name|params
operator|.
name|get
argument_list|(
name|PROP_CONNECTION_TIMEOUT
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"The socket connect and read timeout cannot be set here and must be set"
argument_list|)
throw|;
block|}
name|cm
operator|.
name|setMaxTotal
argument_list|(
name|params
operator|.
name|getInt
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_MAX_CONNECTIONS
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setDefaultMaxPerRoute
argument_list|(
name|params
operator|.
name|getInt
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_MAX_CONNECTIONS_PER_HOST
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setValidateAfterInactivity
argument_list|(
name|Integer
operator|.
name|getInteger
argument_list|(
name|VALIDATE_AFTER_INACTIVITY
argument_list|,
name|VALIDATE_AFTER_INACTIVITY_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|HttpClientBuilder
name|newHttpClientBuilder
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedConnectionManager
condition|)
block|{
name|newHttpClientBuilder
operator|.
name|setConnectionManagerShared
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newHttpClientBuilder
operator|.
name|setConnectionManagerShared
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|ConnectionKeepAliveStrategy
name|keepAliveStrat
init|=
operator|new
name|ConnectionKeepAliveStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getKeepAliveDuration
parameter_list|(
name|HttpResponse
name|response
parameter_list|,
name|HttpContext
name|context
parameter_list|)
block|{
comment|// we only close connections based on idle time, not ttl expiration
return|return
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|httpClientBuilder
operator|.
name|getAuthSchemeRegistryProvider
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newHttpClientBuilder
operator|.
name|setDefaultAuthSchemeRegistry
argument_list|(
name|httpClientBuilder
operator|.
name|getAuthSchemeRegistryProvider
argument_list|()
operator|.
name|getAuthSchemeRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpClientBuilder
operator|.
name|getCookieSpecRegistryProvider
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newHttpClientBuilder
operator|.
name|setDefaultCookieSpecRegistry
argument_list|(
name|httpClientBuilder
operator|.
name|getCookieSpecRegistryProvider
argument_list|()
operator|.
name|getCookieSpecRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpClientBuilder
operator|.
name|getCredentialsProviderProvider
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newHttpClientBuilder
operator|.
name|setDefaultCredentialsProvider
argument_list|(
name|httpClientBuilder
operator|.
name|getCredentialsProviderProvider
argument_list|()
operator|.
name|getCredentialsProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newHttpClientBuilder
operator|.
name|addInterceptorLast
argument_list|(
operator|new
name|DynamicInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|newHttpClientBuilder
operator|=
name|newHttpClientBuilder
operator|.
name|setKeepAliveStrategy
argument_list|(
name|keepAliveStrat
argument_list|)
operator|.
name|evictIdleConnections
argument_list|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|getInteger
argument_list|(
name|EVICT_IDLE_CONNECTIONS
argument_list|,
name|EVICT_IDLE_CONNECTIONS_DEFAULT
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|HttpClientBuilder
name|builder
init|=
name|setupBuilder
argument_list|(
name|newHttpClientBuilder
argument_list|,
name|params
operator|==
literal|null
condition|?
operator|new
name|ModifiableSolrParams
argument_list|()
else|:
name|params
argument_list|)
decl_stmt|;
name|HttpClient
name|httpClient
init|=
name|builder
operator|.
name|setConnectionManager
argument_list|(
name|cm
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
assert|assert
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|httpClient
argument_list|)
assert|;
return|return
operator|(
name|CloseableHttpClient
operator|)
name|httpClient
return|;
block|}
DECL|method|setupBuilder
specifier|private
specifier|static
name|HttpClientBuilder
name|setupBuilder
parameter_list|(
name|HttpClientBuilder
name|builder
parameter_list|,
name|SolrParams
name|config
parameter_list|)
block|{
name|Builder
name|requestConfigBuilder
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setRedirectsEnabled
argument_list|(
name|config
operator|.
name|getBool
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_FOLLOW_REDIRECTS
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|setDecompressionEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|setConnectTimeout
argument_list|(
name|config
operator|.
name|getInt
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_CONNECTION_TIMEOUT
argument_list|,
name|DEFAULT_CONNECT_TIMEOUT
argument_list|)
argument_list|)
operator|.
name|setSocketTimeout
argument_list|(
name|config
operator|.
name|getInt
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_SO_TIMEOUT
argument_list|,
name|DEFAULT_SO_TIMEOUT
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|cpolicy
init|=
name|cookiePolicy
decl_stmt|;
if|if
condition|(
name|cpolicy
operator|!=
literal|null
condition|)
block|{
name|requestConfigBuilder
operator|.
name|setCookieSpec
argument_list|(
name|cpolicy
argument_list|)
expr_stmt|;
block|}
name|RequestConfig
name|requestConfig
init|=
name|requestConfigBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpClientBuilder
name|retBuilder
init|=
name|builder
operator|.
name|setDefaultRequestConfig
argument_list|(
name|requestConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getBool
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_USE_RETRY
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|retBuilder
operator|=
name|retBuilder
operator|.
name|setRetryHandler
argument_list|(
operator|new
name|SolrHttpRequestRetryHandler
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retBuilder
operator|=
name|retBuilder
operator|.
name|setRetryHandler
argument_list|(
name|NO_RETRY
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|basicAuthUser
init|=
name|config
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_USER
argument_list|)
decl_stmt|;
specifier|final
name|String
name|basicAuthPass
init|=
name|config
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_PASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|basicAuthUser
operator|!=
literal|null
operator|&&
name|basicAuthPass
operator|!=
literal|null
condition|)
block|{
name|CredentialsProvider
name|credsProvider
init|=
operator|new
name|BasicCredentialsProvider
argument_list|()
decl_stmt|;
name|credsProvider
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
operator|new
name|UsernamePasswordCredentials
argument_list|(
name|basicAuthUser
argument_list|,
name|basicAuthPass
argument_list|)
argument_list|)
expr_stmt|;
name|retBuilder
operator|.
name|setDefaultCredentialsProvider
argument_list|(
name|credsProvider
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getBool
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_ALLOW_COMPRESSION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|retBuilder
operator|.
name|addInterceptorFirst
argument_list|(
operator|new
name|UseCompressionRequestInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|retBuilder
operator|.
name|addInterceptorFirst
argument_list|(
operator|new
name|UseCompressionResponseInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retBuilder
operator|.
name|disableContentCompression
argument_list|()
expr_stmt|;
block|}
return|return
name|retBuilder
return|;
block|}
DECL|method|close
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
operator|(
name|CloseableHttpClient
operator|)
name|httpClient
argument_list|)
expr_stmt|;
assert|assert
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
name|httpClient
argument_list|)
assert|;
block|}
DECL|method|addRequestInterceptor
specifier|public
specifier|static
name|void
name|addRequestInterceptor
parameter_list|(
name|HttpRequestInterceptor
name|interceptor
parameter_list|)
block|{
name|interceptors
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
DECL|method|removeRequestInterceptor
specifier|public
specifier|static
name|void
name|removeRequestInterceptor
parameter_list|(
name|HttpRequestInterceptor
name|interceptor
parameter_list|)
block|{
name|interceptors
operator|.
name|remove
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
DECL|method|clearRequestInterceptors
specifier|public
specifier|static
name|void
name|clearRequestInterceptors
parameter_list|()
block|{
name|interceptors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|class|UseCompressionRequestInterceptor
specifier|private
specifier|static
class|class
name|UseCompressionRequestInterceptor
implements|implements
name|HttpRequestInterceptor
block|{
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|containsHeader
argument_list|(
literal|"Accept-Encoding"
argument_list|)
condition|)
block|{
name|request
operator|.
name|addHeader
argument_list|(
literal|"Accept-Encoding"
argument_list|,
literal|"gzip, deflate"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|UseCompressionResponseInterceptor
specifier|private
specifier|static
class|class
name|UseCompressionResponseInterceptor
implements|implements
name|HttpResponseInterceptor
block|{
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|HttpResponse
name|response
parameter_list|,
specifier|final
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|HttpEntity
name|entity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|Header
name|ceheader
init|=
name|entity
operator|.
name|getContentEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|ceheader
operator|!=
literal|null
condition|)
block|{
name|HeaderElement
index|[]
name|codecs
init|=
name|ceheader
operator|.
name|getElements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codecs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|codecs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"gzip"
argument_list|)
condition|)
block|{
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|GzipDecompressingEntity
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|codecs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"deflate"
argument_list|)
condition|)
block|{
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|DeflateDecompressingEntity
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
DECL|class|GzipDecompressingEntity
specifier|private
specifier|static
class|class
name|GzipDecompressingEntity
extends|extends
name|HttpEntityWrapper
block|{
DECL|method|GzipDecompressingEntity
specifier|public
name|GzipDecompressingEntity
parameter_list|(
specifier|final
name|HttpEntity
name|entity
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContent
specifier|public
name|InputStream
name|getContent
parameter_list|()
throws|throws
name|IOException
throws|,
name|IllegalStateException
block|{
return|return
operator|new
name|GZIPInputStream
argument_list|(
name|wrappedEntity
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContentLength
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|class|DeflateDecompressingEntity
specifier|private
specifier|static
class|class
name|DeflateDecompressingEntity
extends|extends
name|GzipDecompressingEntity
block|{
DECL|method|DeflateDecompressingEntity
specifier|public
name|DeflateDecompressingEntity
parameter_list|(
specifier|final
name|HttpEntity
name|entity
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContent
specifier|public
name|InputStream
name|getContent
parameter_list|()
throws|throws
name|IOException
throws|,
name|IllegalStateException
block|{
return|return
operator|new
name|InflaterInputStream
argument_list|(
name|wrappedEntity
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|setHttpClientRequestContextBuilder
specifier|public
specifier|static
name|void
name|setHttpClientRequestContextBuilder
parameter_list|(
name|SolrHttpClientContextBuilder
name|httpClientContextBuilder
parameter_list|)
block|{
name|httpClientRequestContextBuilder
operator|=
name|httpClientContextBuilder
expr_stmt|;
block|}
comment|/**    *     */
DECL|method|createNewHttpClientRequestContext
specifier|public
specifier|static
name|HttpClientContext
name|createNewHttpClientRequestContext
parameter_list|()
block|{
return|return
name|httpClientRequestContextBuilder
operator|.
name|createContext
argument_list|()
return|;
block|}
DECL|method|createDefaultRequestConfigBuilder
specifier|public
specifier|static
name|Builder
name|createDefaultRequestConfigBuilder
parameter_list|()
block|{
name|String
name|cpolicy
init|=
name|cookiePolicy
decl_stmt|;
name|Builder
name|builder
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSocketTimeout
argument_list|(
name|DEFAULT_SO_TIMEOUT
argument_list|)
operator|.
name|setConnectTimeout
argument_list|(
name|DEFAULT_CONNECT_TIMEOUT
argument_list|)
operator|.
name|setRedirectsEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|setDecompressionEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// we do our own compression / decompression
if|if
condition|(
name|cpolicy
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCookieSpec
argument_list|(
name|cpolicy
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|setCookiePolicy
specifier|public
specifier|static
name|void
name|setCookiePolicy
parameter_list|(
name|String
name|policyName
parameter_list|)
block|{
name|cookiePolicy
operator|=
name|policyName
expr_stmt|;
block|}
block|}
end_class
end_unit
