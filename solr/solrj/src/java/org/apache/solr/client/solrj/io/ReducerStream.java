begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  *  Iterates over a TupleStream and buffers Tuples that are equal based on a field comparator.  *  This allows tuples to be grouped by a common field.  *  *  The read() method emits one tuple per group. The top levels fields reflect the first tuple  *  encountered in the group.  *  *  Use the Tuple.getMaps() method to return the all the Tuples in the group. The method returns  *  a list of maps (including the group head), which hold the data for each Tuple in the group.  *  *  Note: This ReducerStream requires that the underlying streams be sorted and partitioned by same  *  fields as it's comparator.  *  **/
end_comment
begin_class
DECL|class|ReducerStream
specifier|public
class|class
name|ReducerStream
extends|extends
name|TupleStream
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|tupleStream
specifier|private
name|PushBackStream
name|tupleStream
decl_stmt|;
DECL|field|comp
specifier|private
name|Comparator
argument_list|<
name|Tuple
argument_list|>
name|comp
decl_stmt|;
DECL|field|currentGroupHead
specifier|private
name|Tuple
name|currentGroupHead
decl_stmt|;
DECL|method|ReducerStream
specifier|public
name|ReducerStream
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|,
name|Comparator
argument_list|<
name|Tuple
argument_list|>
name|comp
parameter_list|)
block|{
name|this
operator|.
name|tupleStream
operator|=
operator|new
name|PushBackStream
argument_list|(
name|tupleStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|tupleStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|tupleStream
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
argument_list|>
name|maps
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|EOF
condition|)
block|{
if|if
condition|(
name|maps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tupleStream
operator|.
name|pushBack
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|Map
name|map1
init|=
name|maps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
name|map2
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map2
operator|.
name|putAll
argument_list|(
name|map1
argument_list|)
expr_stmt|;
name|Tuple
name|groupHead
init|=
operator|new
name|Tuple
argument_list|(
name|map2
argument_list|)
decl_stmt|;
name|groupHead
operator|.
name|setMaps
argument_list|(
name|maps
argument_list|)
expr_stmt|;
return|return
name|groupHead
return|;
block|}
else|else
block|{
return|return
name|t
return|;
block|}
block|}
if|if
condition|(
name|currentGroupHead
operator|==
literal|null
condition|)
block|{
name|currentGroupHead
operator|=
name|t
expr_stmt|;
name|maps
operator|.
name|add
argument_list|(
name|t
operator|.
name|getMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|currentGroupHead
argument_list|,
name|t
argument_list|)
operator|==
literal|0
condition|)
block|{
name|maps
operator|.
name|add
argument_list|(
name|t
operator|.
name|getMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Tuple
name|groupHead
init|=
name|currentGroupHead
operator|.
name|clone
argument_list|()
decl_stmt|;
name|tupleStream
operator|.
name|pushBack
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|currentGroupHead
operator|=
literal|null
expr_stmt|;
name|groupHead
operator|.
name|setMaps
argument_list|(
name|maps
argument_list|)
expr_stmt|;
return|return
name|groupHead
return|;
block|}
block|}
block|}
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class
end_unit
