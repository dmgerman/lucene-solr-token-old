begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.ops
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_comment
comment|/**  * Implementation of replace(...., withValue="some value")  * See ReplaceOperation for description.  */
end_comment
begin_class
DECL|class|ReplaceWithValueOperation
specifier|public
class|class
name|ReplaceWithValueOperation
implements|implements
name|StreamOperation
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|wasBuiltWithFieldName
specifier|private
name|boolean
name|wasBuiltWithFieldName
decl_stmt|;
DECL|field|fieldName
specifier|private
name|String
name|fieldName
decl_stmt|;
DECL|field|original
specifier|private
name|Object
name|original
decl_stmt|;
DECL|field|replacement
specifier|private
name|Object
name|replacement
decl_stmt|;
DECL|method|ReplaceWithValueOperation
specifier|public
name|ReplaceWithValueOperation
parameter_list|(
name|String
name|forField
parameter_list|,
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|2
operator|==
name|expression
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|wasBuiltWithFieldName
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|forField
expr_stmt|;
name|this
operator|.
name|original
operator|=
name|factory
operator|.
name|constructPrimitiveObject
argument_list|(
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|3
operator|==
name|expression
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|wasBuiltWithFieldName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|original
operator|=
name|factory
operator|.
name|constructPrimitiveObject
argument_list|(
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - unknown operands found"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|StreamExpressionNamedParameter
name|replacementParameter
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"withValue"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|replacementParameter
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting a parameter named 'withValue' but didn't find one."
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|replacementParameter
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting parameter named 'withValue' to be a primitive type."
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|replacement
operator|=
name|factory
operator|.
name|constructPrimitiveObject
argument_list|(
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|replacementParameter
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|operate
specifier|public
name|void
name|operate
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
block|{
if|if
condition|(
name|matchesOriginal
argument_list|(
name|tuple
argument_list|)
condition|)
block|{
name|replace
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|matchesOriginal
specifier|private
name|boolean
name|matchesOriginal
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
block|{
name|Object
name|value
init|=
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|value
condition|)
block|{
return|return
literal|null
operator|==
name|original
return|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|original
condition|)
block|{
return|return
name|original
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|replace
specifier|private
name|void
name|replace
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|replacement
condition|)
block|{
name|tuple
operator|.
name|remove
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tuple
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// function name
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wasBuiltWithFieldName
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
literal|null
operator|==
name|original
condition|?
literal|"null"
else|:
name|original
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"withValue"
argument_list|,
literal|null
operator|==
name|replacement
condition|?
literal|"null"
else|:
name|replacement
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expression
return|;
block|}
block|}
end_class
end_unit
