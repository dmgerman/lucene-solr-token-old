begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Objects of this class will contain the result of all the intervals defined  * for a specific field.   */
end_comment
begin_class
DECL|class|IntervalFacet
specifier|public
class|class
name|IntervalFacet
block|{
comment|/**    * The field for which interval facets where calculated    */
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
comment|/**    * The list of interval facets calculated for {@link #field}    */
DECL|field|intervals
specifier|private
specifier|final
name|List
argument_list|<
name|Count
argument_list|>
name|intervals
decl_stmt|;
DECL|method|IntervalFacet
name|IntervalFacet
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|Count
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|intervals
operator|=
name|values
expr_stmt|;
block|}
comment|/**    * @return The field for which interval facets where calculated    */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/**    * @return The list of interval facets calculated for {@link #field}    */
DECL|method|getIntervals
specifier|public
name|List
argument_list|<
name|Count
argument_list|>
name|getIntervals
parameter_list|()
block|{
return|return
name|intervals
return|;
block|}
comment|/**    * Holds counts for facet intervals defined in a field    */
DECL|class|Count
specifier|public
specifier|static
class|class
name|Count
block|{
comment|/**      * The key of this interval. This is the original       * interval string or the value of the "key" local      * param      */
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
comment|/**      * The count of this interval      */
DECL|field|count
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
DECL|method|Count
name|Count
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
DECL|method|getKey
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getCount
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
block|}
end_class
end_unit
