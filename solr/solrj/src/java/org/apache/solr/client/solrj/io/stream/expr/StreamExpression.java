begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream.expr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Expression containing a function and set of parameters  */
end_comment
begin_class
DECL|class|StreamExpression
specifier|public
class|class
name|StreamExpression
implements|implements
name|StreamExpressionParameter
block|{
DECL|field|functionName
specifier|private
name|String
name|functionName
decl_stmt|;
DECL|field|parameters
specifier|private
name|List
argument_list|<
name|StreamExpressionParameter
argument_list|>
name|parameters
decl_stmt|;
DECL|method|StreamExpression
specifier|public
name|StreamExpression
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
name|this
operator|.
name|functionName
operator|=
name|functionName
expr_stmt|;
name|parameters
operator|=
operator|new
name|ArrayList
argument_list|<
name|StreamExpressionParameter
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|getFunctionName
specifier|public
name|String
name|getFunctionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|functionName
return|;
block|}
DECL|method|setFunctionName
specifier|public
name|void
name|setFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|functionName
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null functionName is not allowed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|functionName
operator|=
name|functionName
expr_stmt|;
block|}
DECL|method|withFunctionName
specifier|public
name|StreamExpression
name|withFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
name|setFunctionName
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addParameter
specifier|public
name|void
name|addParameter
parameter_list|(
name|StreamExpressionParameter
name|parameter
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
DECL|method|addParameter
specifier|public
name|void
name|addParameter
parameter_list|(
name|String
name|parameter
parameter_list|)
block|{
name|addParameter
argument_list|(
operator|new
name|StreamExpressionValue
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|withParameter
specifier|public
name|StreamExpression
name|withParameter
parameter_list|(
name|StreamExpressionParameter
name|parameter
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withParameter
specifier|public
name|StreamExpression
name|withParameter
parameter_list|(
name|String
name|parameter
parameter_list|)
block|{
return|return
name|withParameter
argument_list|(
operator|new
name|StreamExpressionValue
argument_list|(
name|parameter
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getParameters
specifier|public
name|List
argument_list|<
name|StreamExpressionParameter
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
return|;
block|}
DECL|method|setParameters
specifier|public
name|void
name|setParameters
parameter_list|(
name|List
argument_list|<
name|StreamExpressionParameter
argument_list|>
name|parameters
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|parameters
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null parameter list is not allowed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
DECL|method|withParameters
specifier|public
name|StreamExpression
name|withParameters
parameter_list|(
name|List
argument_list|<
name|StreamExpressionParameter
argument_list|>
name|parameters
parameter_list|)
block|{
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|this
operator|.
name|functionName
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
literal|0
operator|!=
name|idx
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|StreamExpression
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
name|StreamExpression
name|check
init|=
operator|(
name|StreamExpression
operator|)
name|other
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|functionName
operator|&&
literal|null
operator|!=
name|check
operator|.
name|functionName
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|functionName
operator|&&
literal|null
operator|==
name|check
operator|.
name|functionName
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|functionName
operator|&&
literal|null
operator|!=
name|check
operator|.
name|functionName
operator|&&
operator|!
name|this
operator|.
name|functionName
operator|.
name|equals
argument_list|(
name|check
operator|.
name|functionName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
operator|!=
name|check
operator|.
name|parameters
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|StreamExpressionParameter
name|left
init|=
name|this
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|StreamExpressionParameter
name|right
init|=
name|check
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|left
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
