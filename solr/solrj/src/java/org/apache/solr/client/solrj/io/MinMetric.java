begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_class
DECL|class|MinMetric
specifier|public
class|class
name|MinMetric
implements|implements
name|Metric
implements|,
name|Serializable
block|{
DECL|field|MIN
specifier|public
specifier|static
specifier|final
name|String
name|MIN
init|=
literal|"min"
decl_stmt|;
DECL|field|longMin
specifier|private
name|long
name|longMin
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|doubleMin
specifier|private
name|double
name|doubleMin
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|isDouble
specifier|private
name|boolean
name|isDouble
decl_stmt|;
DECL|field|column
specifier|private
name|String
name|column
decl_stmt|;
DECL|method|MinMetric
specifier|public
name|MinMetric
parameter_list|(
name|String
name|column
parameter_list|,
name|boolean
name|isDouble
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|isDouble
operator|=
name|isDouble
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"min:"
operator|+
name|column
return|;
block|}
DECL|method|getValue
specifier|public
name|double
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|isDouble
condition|)
block|{
return|return
name|doubleMin
return|;
block|}
else|else
block|{
return|return
name|longMin
return|;
block|}
block|}
DECL|method|update
specifier|public
name|void
name|update
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
block|{
if|if
condition|(
name|isDouble
condition|)
block|{
name|double
name|d
init|=
operator|(
name|double
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|<
name|doubleMin
condition|)
block|{
name|doubleMin
operator|=
name|d
expr_stmt|;
block|}
block|}
else|else
block|{
name|long
name|l
init|=
operator|(
name|long
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
name|longMin
condition|)
block|{
name|longMin
operator|=
name|l
expr_stmt|;
block|}
block|}
block|}
DECL|method|newInstance
specifier|public
name|Metric
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|MinMetric
argument_list|(
name|column
argument_list|,
name|isDouble
argument_list|)
return|;
block|}
DECL|method|metricValues
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metricValues
parameter_list|()
block|{
name|Map
name|m
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDouble
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|MIN
argument_list|,
name|doubleMin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doubleMin
operator|=
operator|(
name|double
operator|)
name|longMin
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|MIN
argument_list|,
name|doubleMin
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
DECL|method|update
specifier|public
name|void
name|update
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metricValues
parameter_list|)
block|{
if|if
condition|(
name|isDouble
condition|)
block|{
name|double
name|dmin
init|=
name|metricValues
operator|.
name|get
argument_list|(
name|MIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|dmin
operator|<
name|doubleMin
condition|)
block|{
name|doubleMin
operator|=
name|dmin
expr_stmt|;
block|}
block|}
else|else
block|{
name|double
name|dmin
init|=
name|metricValues
operator|.
name|get
argument_list|(
name|MIN
argument_list|)
decl_stmt|;
name|long
name|lmin
init|=
operator|(
name|long
operator|)
name|dmin
decl_stmt|;
if|if
condition|(
name|lmin
operator|<
name|longMin
condition|)
block|{
name|longMin
operator|=
name|lmin
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
