begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream.expr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import
begin_comment
comment|/**  * Explanation containing details about a stream expression  */
end_comment
begin_class
DECL|class|StreamExplanation
specifier|public
class|class
name|StreamExplanation
extends|extends
name|Explanation
block|{
DECL|field|children
specifier|private
name|List
argument_list|<
name|Explanation
argument_list|>
name|children
decl_stmt|;
DECL|method|StreamExplanation
specifier|public
name|StreamExplanation
parameter_list|(
name|String
name|expressionNodeId
parameter_list|)
block|{
name|super
argument_list|(
name|expressionNodeId
argument_list|)
expr_stmt|;
block|}
DECL|method|getChildren
specifier|public
name|List
argument_list|<
name|Explanation
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
DECL|method|setChildren
specifier|public
name|void
name|setChildren
parameter_list|(
name|List
argument_list|<
name|Explanation
argument_list|>
name|children
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
DECL|method|withChildren
specifier|public
name|StreamExplanation
name|withChildren
parameter_list|(
name|List
argument_list|<
name|Explanation
argument_list|>
name|children
parameter_list|)
block|{
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withChildren
specifier|public
name|StreamExplanation
name|withChildren
parameter_list|(
name|Explanation
index|[]
name|children
parameter_list|)
block|{
for|for
control|(
name|Explanation
name|child
range|:
name|children
control|)
block|{
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addChild
specifier|public
name|void
name|addChild
parameter_list|(
name|Explanation
name|child
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|children
condition|)
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|Explanation
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
DECL|method|toMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|super
operator|.
name|toMap
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|children
operator|&&
literal|0
operator|!=
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|childrenMaps
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Explanation
name|child
range|:
name|children
control|)
block|{
name|childrenMaps
operator|.
name|add
argument_list|(
name|child
operator|.
name|toMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"children"
argument_list|,
name|childrenMaps
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class
end_unit
