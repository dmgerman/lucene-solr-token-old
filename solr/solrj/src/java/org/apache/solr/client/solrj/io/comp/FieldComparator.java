begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.comp
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
operator|.
name|ExpressionType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_comment
comment|/**  *  An equality field Comparator which compares a field of two Tuples and determines sort order.  **/
end_comment
begin_class
DECL|class|FieldComparator
specifier|public
class|class
name|FieldComparator
implements|implements
name|StreamComparator
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|comparatorNodeId
specifier|private
name|UUID
name|comparatorNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
DECL|field|leftFieldName
specifier|private
name|String
name|leftFieldName
decl_stmt|;
DECL|field|rightFieldName
specifier|private
name|String
name|rightFieldName
decl_stmt|;
DECL|field|order
specifier|private
specifier|final
name|ComparatorOrder
name|order
decl_stmt|;
DECL|field|comparator
specifier|private
name|ComparatorLambda
name|comparator
decl_stmt|;
DECL|method|FieldComparator
specifier|public
name|FieldComparator
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|ComparatorOrder
name|order
parameter_list|)
block|{
name|leftFieldName
operator|=
name|fieldName
expr_stmt|;
name|rightFieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|assignComparator
argument_list|()
expr_stmt|;
block|}
DECL|method|FieldComparator
specifier|public
name|FieldComparator
parameter_list|(
name|String
name|leftFieldName
parameter_list|,
name|String
name|rightFieldName
parameter_list|,
name|ComparatorOrder
name|order
parameter_list|)
block|{
name|this
operator|.
name|leftFieldName
operator|=
name|leftFieldName
expr_stmt|;
name|this
operator|.
name|rightFieldName
operator|=
name|rightFieldName
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|assignComparator
argument_list|()
expr_stmt|;
block|}
DECL|method|setLeftFieldName
specifier|public
name|void
name|setLeftFieldName
parameter_list|(
name|String
name|leftFieldName
parameter_list|)
block|{
name|this
operator|.
name|leftFieldName
operator|=
name|leftFieldName
expr_stmt|;
block|}
DECL|method|getLeftFieldName
specifier|public
name|String
name|getLeftFieldName
parameter_list|()
block|{
return|return
name|leftFieldName
return|;
block|}
DECL|method|setRightFieldName
specifier|public
name|void
name|setRightFieldName
parameter_list|(
name|String
name|rightFieldName
parameter_list|)
block|{
name|this
operator|.
name|rightFieldName
operator|=
name|rightFieldName
expr_stmt|;
block|}
DECL|method|getRightFieldName
specifier|public
name|String
name|getRightFieldName
parameter_list|()
block|{
return|return
name|rightFieldName
return|;
block|}
DECL|method|getOrder
specifier|public
name|ComparatorOrder
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
DECL|method|hasDifferentFieldNames
specifier|public
name|boolean
name|hasDifferentFieldNames
parameter_list|()
block|{
return|return
operator|!
name|leftFieldName
operator|.
name|equals
argument_list|(
name|rightFieldName
argument_list|)
return|;
block|}
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|leftFieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDifferentFieldNames
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|rightFieldName
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
operator|new
name|StreamExpressionValue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Explanation
argument_list|(
name|comparatorNodeId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withExpressionType
argument_list|(
name|ExpressionType
operator|.
name|SORTER
argument_list|)
operator|.
name|withImplementingClass
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/*    * What're we doing here messing around with lambdas for the comparator logic?    * We want the compare(...) function to run as fast as possible because it will be called many many    * times over the lifetime of this object. For that reason we want to limit the number of comparisons    * taking place in the compare(...) function. Because this class supports both ascending and    * descending comparisons and the logic for each is slightly different, we want to do the     *   if(ascending){ compare like this } else { compare like this }    * check only once - we can do that in the constructor of this class, create a lambda, and then execute     * that lambda in the compare function. A little bit of branch prediction savings right here.    */
DECL|method|assignComparator
specifier|private
name|void
name|assignComparator
parameter_list|()
block|{
if|if
condition|(
name|ComparatorOrder
operator|.
name|DESCENDING
operator|==
name|order
condition|)
block|{
name|comparator
operator|=
parameter_list|(
name|leftTuple
parameter_list|,
name|rightTuple
parameter_list|)
lambda|->
block|{
name|Comparable
name|leftComp
init|=
operator|(
name|Comparable
operator|)
name|leftTuple
operator|.
name|get
argument_list|(
name|leftFieldName
argument_list|)
decl_stmt|;
name|Comparable
name|rightComp
init|=
operator|(
name|Comparable
operator|)
name|rightTuple
operator|.
name|get
argument_list|(
name|rightFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftComp
operator|==
name|rightComp
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// if both null then they are equal. if both are same ref then are equal
if|if
condition|(
literal|null
operator|==
name|leftComp
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|rightComp
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|rightComp
operator|.
name|compareTo
argument_list|(
name|leftComp
argument_list|)
return|;
block|}
expr_stmt|;
block|}
else|else
block|{
comment|// See above for black magic reasoning.
name|comparator
operator|=
parameter_list|(
name|leftTuple
parameter_list|,
name|rightTuple
parameter_list|)
lambda|->
block|{
name|Comparable
name|leftComp
init|=
operator|(
name|Comparable
operator|)
name|leftTuple
operator|.
name|get
argument_list|(
name|leftFieldName
argument_list|)
decl_stmt|;
name|Comparable
name|rightComp
init|=
operator|(
name|Comparable
operator|)
name|rightTuple
operator|.
name|get
argument_list|(
name|rightFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftComp
operator|==
name|rightComp
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// if both null then they are equal. if both are same ref then are equal
if|if
condition|(
literal|null
operator|==
name|leftComp
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|rightComp
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|leftComp
operator|.
name|compareTo
argument_list|(
name|rightComp
argument_list|)
return|;
block|}
expr_stmt|;
block|}
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|Tuple
name|leftTuple
parameter_list|,
name|Tuple
name|rightTuple
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|leftTuple
argument_list|,
name|rightTuple
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDerivedFrom
specifier|public
name|boolean
name|isDerivedFrom
parameter_list|(
name|StreamComparator
name|base
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|base
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|base
operator|instanceof
name|FieldComparator
condition|)
block|{
name|FieldComparator
name|baseComp
init|=
operator|(
name|FieldComparator
operator|)
name|base
decl_stmt|;
return|return
operator|(
name|leftFieldName
operator|.
name|equals
argument_list|(
name|baseComp
operator|.
name|leftFieldName
argument_list|)
operator|||
name|rightFieldName
operator|.
name|equals
argument_list|(
name|baseComp
operator|.
name|rightFieldName
argument_list|)
operator|)
operator|&&
name|order
operator|==
name|baseComp
operator|.
name|order
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|MultipleFieldComparator
condition|)
block|{
comment|// must equal the first one
name|MultipleFieldComparator
name|baseComps
init|=
operator|(
name|MultipleFieldComparator
operator|)
name|base
decl_stmt|;
if|if
condition|(
name|baseComps
operator|.
name|getComps
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|isDerivedFrom
argument_list|(
name|baseComps
operator|.
name|getComps
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|copyAliased
specifier|public
name|FieldComparator
name|copyAliased
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
parameter_list|)
block|{
return|return
operator|new
name|FieldComparator
argument_list|(
name|aliases
operator|.
name|containsKey
argument_list|(
name|leftFieldName
argument_list|)
condition|?
name|aliases
operator|.
name|get
argument_list|(
name|leftFieldName
argument_list|)
else|:
name|leftFieldName
argument_list|,
name|aliases
operator|.
name|containsKey
argument_list|(
name|rightFieldName
argument_list|)
condition|?
name|aliases
operator|.
name|get
argument_list|(
name|rightFieldName
argument_list|)
else|:
name|rightFieldName
argument_list|,
name|order
argument_list|)
return|;
block|}
block|}
end_class
end_unit
