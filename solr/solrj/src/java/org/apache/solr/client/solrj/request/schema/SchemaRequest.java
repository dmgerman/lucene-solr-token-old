begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.request.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|schema
operator|.
name|SchemaResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStreamBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONWriter
import|;
end_import
begin_comment
comment|/**  *<p>This class offers access to the operations exposed by the Solr Schema API.</p>  *<p>Most of the operations of this class offer a very abstract interface avoiding  * in this manner eventual changes due to Solr Schema API updates. On the other  * hand, the creation of request parameters for creating new fields or field types  * can be tedious because it is not strongly typed (the user has to build on his own  * a {@link NamedList} argument containing the field/field type properties).</p>  *<p>The class does not currently offer explicit support for the Schema API operations exposed  * through Managed Resources, but such operations can be built with little effort manually  * based on this class within the client applications.</p>  *<p>This class is experimental and it is subject to change.</p>  *  * @see<a href="https://cwiki.apache.org/confluence/display/solr/Schema+API">Solr Schema API</a>  * @see<a href="https://cwiki.apache.org/confluence/display/solr/Managed+Resources">Solr managed resources</a>  * @since solr 5.3  */
end_comment
begin_class
DECL|class|SchemaRequest
specifier|public
class|class
name|SchemaRequest
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
argument_list|>
block|{
comment|/**    * Default constructor.    * It can be used to retrieve the entire schema.    *    * @see #process(SolrClient)    */
DECL|method|SchemaRequest
specifier|public
name|SchemaRequest
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SchemaRequest
specifier|public
name|SchemaRequest
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createAddFieldTypeNamedList
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createAddFieldTypeNamedList
parameter_list|(
name|FieldTypeDefinition
name|fieldTypeDefinition
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|addFieldTypeNamedList
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addFieldTypeNamedList
operator|.
name|addAll
argument_list|(
name|fieldTypeDefinition
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|AnalyzerDefinition
name|analyzerDefinition
init|=
name|fieldTypeDefinition
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzerDefinition
operator|!=
literal|null
condition|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|analyzerNamedList
init|=
name|createAnalyzerNamedList
argument_list|(
name|analyzerDefinition
argument_list|)
decl_stmt|;
name|addFieldTypeNamedList
operator|.
name|add
argument_list|(
literal|"analyzer"
argument_list|,
name|analyzerNamedList
argument_list|)
expr_stmt|;
block|}
name|AnalyzerDefinition
name|indexAnalyzerDefinition
init|=
name|fieldTypeDefinition
operator|.
name|getIndexAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexAnalyzerDefinition
operator|!=
literal|null
condition|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|indexAnalyzerNamedList
init|=
name|createAnalyzerNamedList
argument_list|(
name|indexAnalyzerDefinition
argument_list|)
decl_stmt|;
name|addFieldTypeNamedList
operator|.
name|add
argument_list|(
literal|"indexAnalyzer"
argument_list|,
name|indexAnalyzerNamedList
argument_list|)
expr_stmt|;
block|}
name|AnalyzerDefinition
name|queryAnalyzerDefinition
init|=
name|fieldTypeDefinition
operator|.
name|getQueryAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryAnalyzerDefinition
operator|!=
literal|null
condition|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|queryAnalyzerNamedList
init|=
name|createAnalyzerNamedList
argument_list|(
name|queryAnalyzerDefinition
argument_list|)
decl_stmt|;
name|addFieldTypeNamedList
operator|.
name|add
argument_list|(
literal|"queryAnalyzer"
argument_list|,
name|queryAnalyzerNamedList
argument_list|)
expr_stmt|;
block|}
name|AnalyzerDefinition
name|multiTermAnalyzerDefinition
init|=
name|fieldTypeDefinition
operator|.
name|getMultiTermAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|multiTermAnalyzerDefinition
operator|!=
literal|null
condition|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|multiTermAnalyzerNamedList
init|=
name|createAnalyzerNamedList
argument_list|(
name|multiTermAnalyzerDefinition
argument_list|)
decl_stmt|;
name|addFieldTypeNamedList
operator|.
name|add
argument_list|(
literal|"multiTermAnalyzer"
argument_list|,
name|multiTermAnalyzerNamedList
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|similarityAttributes
init|=
name|fieldTypeDefinition
operator|.
name|getSimilarity
argument_list|()
decl_stmt|;
if|if
condition|(
name|similarityAttributes
operator|!=
literal|null
operator|&&
operator|!
name|similarityAttributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addFieldTypeNamedList
operator|.
name|add
argument_list|(
literal|"similarity"
argument_list|,
operator|new
name|NamedList
argument_list|<>
argument_list|(
name|similarityAttributes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addFieldTypeNamedList
return|;
block|}
DECL|method|createAnalyzerNamedList
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createAnalyzerNamedList
parameter_list|(
name|AnalyzerDefinition
name|analyzerDefinition
parameter_list|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|analyzerNamedList
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|analyzerAttributes
init|=
name|analyzerDefinition
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzerAttributes
operator|!=
literal|null
condition|)
name|analyzerNamedList
operator|.
name|addAll
argument_list|(
name|analyzerAttributes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|charFiltersAttributes
init|=
name|analyzerDefinition
operator|.
name|getCharFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|charFiltersAttributes
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|charFiltersList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|charFilterAttributes
range|:
name|charFiltersAttributes
control|)
name|charFiltersList
operator|.
name|add
argument_list|(
operator|new
name|NamedList
argument_list|<>
argument_list|(
name|charFilterAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerNamedList
operator|.
name|add
argument_list|(
literal|"charFilters"
argument_list|,
name|charFiltersList
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tokenizerAttributes
init|=
name|analyzerDefinition
operator|.
name|getTokenizer
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenizerAttributes
operator|!=
literal|null
condition|)
block|{
name|analyzerNamedList
operator|.
name|add
argument_list|(
literal|"tokenizer"
argument_list|,
operator|new
name|NamedList
argument_list|<>
argument_list|(
name|tokenizerAttributes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|filtersAttributes
init|=
name|analyzerDefinition
operator|.
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|filtersAttributes
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|filtersList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filterAttributes
range|:
name|filtersAttributes
control|)
name|filtersList
operator|.
name|add
argument_list|(
operator|new
name|NamedList
argument_list|<>
argument_list|(
name|filterAttributes
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerNamedList
operator|.
name|add
argument_list|(
literal|"filters"
argument_list|,
name|filtersList
argument_list|)
expr_stmt|;
block|}
return|return
name|analyzerNamedList
return|;
block|}
DECL|method|createAddFieldNamedList
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createAddFieldNamedList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|addFieldProps
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldAttributes
operator|!=
literal|null
condition|)
name|addFieldProps
operator|.
name|addAll
argument_list|(
name|fieldAttributes
argument_list|)
expr_stmt|;
return|return
name|addFieldProps
return|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
argument_list|()
return|;
block|}
comment|/**    * Schema API request class that can be used to retrieve the name of the schema.    */
DECL|class|SchemaName
specifier|public
specifier|static
class|class
name|SchemaName
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|SchemaNameResponse
argument_list|>
block|{
DECL|method|SchemaName
specifier|public
name|SchemaName
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SchemaName
specifier|public
name|SchemaName
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/name"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|SchemaNameResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|SchemaNameResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request that can be used to retrieve the version    * of the schema for the specified collection.    */
DECL|class|SchemaVersion
specifier|public
specifier|static
class|class
name|SchemaVersion
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|SchemaVersionResponse
argument_list|>
block|{
DECL|method|SchemaVersion
specifier|public
name|SchemaVersion
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SchemaVersion
specifier|public
name|SchemaVersion
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/version"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|SchemaVersionResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|SchemaVersionResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request class that lists the field definitions contained in the schema.    */
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|FieldsResponse
argument_list|>
block|{
DECL|method|Fields
specifier|public
name|Fields
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Fields
specifier|public
name|Fields
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/fields"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|FieldsResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|FieldsResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request that lists the field definition for the specified field    * contained in the schema.    */
DECL|class|Field
specifier|public
specifier|static
class|class
name|Field
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|FieldResponse
argument_list|>
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldName the name of the field for which the definition is to be retrieved      */
DECL|method|Field
specifier|public
name|Field
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
argument_list|(
name|fieldName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Field
specifier|public
name|Field
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/fields/"
operator|+
name|fieldName
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|FieldResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|FieldResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request that lists the dynamic field definitions contained in the schema.    */
DECL|class|DynamicFields
specifier|public
specifier|static
class|class
name|DynamicFields
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|DynamicFieldsResponse
argument_list|>
block|{
DECL|method|DynamicFields
specifier|public
name|DynamicFields
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DynamicFields
specifier|public
name|DynamicFields
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/dynamicfields"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|DynamicFieldsResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|DynamicFieldsResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request that lists the dynamic field definition for the specified field    * contained in the schema.    */
DECL|class|DynamicField
specifier|public
specifier|static
class|class
name|DynamicField
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|DynamicFieldResponse
argument_list|>
block|{
comment|/**      * Creates a new instance of the class.      *      * @param dynamicFieldName the name of the dynamic field for which the definition is to be retrieved      */
DECL|method|DynamicField
specifier|public
name|DynamicField
parameter_list|(
name|String
name|dynamicFieldName
parameter_list|)
block|{
name|this
argument_list|(
name|dynamicFieldName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DynamicField
specifier|public
name|DynamicField
parameter_list|(
name|String
name|dynamicFieldName
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/dynamicfields/"
operator|+
name|dynamicFieldName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|DynamicFieldResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|DynamicFieldResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request that lists the types definitions contained    * in the schema.    */
DECL|class|FieldTypes
specifier|public
specifier|static
class|class
name|FieldTypes
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|FieldTypesResponse
argument_list|>
block|{
DECL|method|FieldTypes
specifier|public
name|FieldTypes
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FieldTypes
specifier|public
name|FieldTypes
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/fieldtypes"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|FieldTypesResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|FieldTypesResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request that retrieves the type definitions for the specified field    * type contained in the schema.    */
DECL|class|FieldType
specifier|public
specifier|static
class|class
name|FieldType
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|FieldTypeResponse
argument_list|>
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldTypeName the name of the field type for which the definition is to be retrieved      */
DECL|method|FieldType
specifier|public
name|FieldType
parameter_list|(
name|String
name|fieldTypeName
parameter_list|)
block|{
name|this
argument_list|(
name|fieldTypeName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FieldType
specifier|public
name|FieldType
parameter_list|(
name|String
name|fieldTypeName
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/fieldtypes/"
operator|+
name|fieldTypeName
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|FieldTypeResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|FieldTypeResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request that retrieves the source and destination of    * each copy field in the schema.    */
DECL|class|CopyFields
specifier|public
specifier|static
class|class
name|CopyFields
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|CopyFieldsResponse
argument_list|>
block|{
DECL|method|CopyFields
specifier|public
name|CopyFields
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CopyFields
specifier|public
name|CopyFields
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/copyfields"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|CopyFieldsResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|CopyFieldsResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Schema API request that retrieves the field name that is defined as    * the uniqueKey for the index of the specified collection.    */
DECL|class|UniqueKey
specifier|public
specifier|static
class|class
name|UniqueKey
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|UniqueKeyResponse
argument_list|>
block|{
DECL|method|UniqueKey
specifier|public
name|UniqueKey
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|UniqueKey
specifier|public
name|UniqueKey
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/uniquekey"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|UniqueKeyResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|UniqueKeyResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Retrieves the class name of the global similarity defined (if any) in the schema.    */
DECL|class|GlobalSimilarity
specifier|public
specifier|static
class|class
name|GlobalSimilarity
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|GlobalSimilarityResponse
argument_list|>
block|{
DECL|method|GlobalSimilarity
specifier|public
name|GlobalSimilarity
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|GlobalSimilarity
specifier|public
name|GlobalSimilarity
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/similarity"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|GlobalSimilarityResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|GlobalSimilarityResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Retrieves the default operator if it is defined in the schema.    */
DECL|class|DefaultQueryOperator
specifier|public
specifier|static
class|class
name|DefaultQueryOperator
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|DefaultQueryOperatorResponse
argument_list|>
block|{
DECL|method|DefaultQueryOperator
specifier|public
name|DefaultQueryOperator
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DefaultQueryOperator
specifier|public
name|DefaultQueryOperator
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/schema/solrqueryparser/defaultoperator"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|DefaultQueryOperatorResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|DefaultQueryOperatorResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Adds a new field definition to the schema.    * If the field already exists, the method {@link #process(SolrClient, String)} will fail.    * Note that the request will be translated to json, so please use concrete values (e.g. : true, 1)    * instead of their string representation (e.g. : "true", "1") for the field attributes expecting    * boolean or number values.    */
DECL|class|AddField
specifier|public
specifier|static
class|class
name|AddField
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldAttributes field type attributes that can be used to enrich the field definition.      * @see<a href="https://cwiki.apache.org/confluence/display/solr/Defining+Fields">Defining Solr fields</a>      */
DECL|method|AddField
specifier|public
name|AddField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|)
block|{
name|this
argument_list|(
name|fieldAttributes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AddField
specifier|public
name|AddField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|fieldAttributes
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|addFieldParameters
init|=
name|createAddFieldNamedList
argument_list|(
name|fieldAttributes
argument_list|)
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"add-field"
argument_list|,
name|addFieldParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Replaces a field's definition.  Note that the full definition for a field must be supplied - this command    * will not partially modify a field's definition.  If the field does not exist in the schema the method call    * {@link #process(SolrClient, String)} will fail.    *    * @see<a href="https://cwiki.apache.org/confluence/display/solr/Defining+Fields">Defining Solr fields</a>    */
DECL|class|ReplaceField
specifier|public
specifier|static
class|class
name|ReplaceField
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldAttributes field type attributes that can be used to enrich the field definition.      */
DECL|method|ReplaceField
specifier|public
name|ReplaceField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|)
block|{
name|this
argument_list|(
name|fieldAttributes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ReplaceField
specifier|public
name|ReplaceField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|fieldAttributes
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|replaceFieldParameters
init|=
name|createAddFieldNamedList
argument_list|(
name|fieldAttributes
argument_list|)
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"replace-field"
argument_list|,
name|replaceFieldParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Removes a field definition from the schema. If the field does not exist in the schema,    * or if the field is the source or destination of a copy field rule the method call    * {@link #process(SolrClient, String)} will fail.    */
DECL|class|DeleteField
specifier|public
specifier|static
class|class
name|DeleteField
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldName the name of the new field to be removed      */
DECL|method|DeleteField
specifier|public
name|DeleteField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
argument_list|(
name|fieldName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DeleteField
specifier|public
name|DeleteField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|fieldName
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|deleteFieldParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|deleteFieldParameters
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"delete-field"
argument_list|,
name|deleteFieldParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Adds a new dynamic field rule to the schema of the specified collection.    *    * @see<a href="https://cwiki.apache.org/confluence/display/solr/Defining+Fields">Defining Solr fields</a>    * @see<a href="https://cwiki.apache.org/confluence/display/solr/Dynamic+Fields">Solr dynamic fields</a>    */
DECL|class|AddDynamicField
specifier|public
specifier|static
class|class
name|AddDynamicField
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldAttributes field type attributes that can be used to enrich the field definition.      */
DECL|method|AddDynamicField
specifier|public
name|AddDynamicField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|)
block|{
name|this
argument_list|(
name|fieldAttributes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AddDynamicField
specifier|public
name|AddDynamicField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|fieldAttributes
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldAttributes
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|addDynamicFieldParameters
init|=
name|createAddFieldNamedList
argument_list|(
name|fieldAttributes
argument_list|)
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"add-dynamic-field"
argument_list|,
name|addDynamicFieldParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Replaces a dynamic field rule in the schema of the specified collection.    * Note that the full definition for a dynamic field rule must be supplied - this command    * will not partially modify a dynamic field rule's definition.    * If the dynamic field rule does not exist in the schema the method call    * {@link #process(SolrClient, String)} will fail.    */
DECL|class|ReplaceDynamicField
specifier|public
specifier|static
class|class
name|ReplaceDynamicField
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param dynamicFieldAttributes field type attributes that can be used to enrich the field definition.      * @see<a href="https://cwiki.apache.org/confluence/display/solr/Defining+Fields">Defining Solr fields</a>      * @see<a href="https://cwiki.apache.org/confluence/display/solr/Dynamic+Fields">Solr dynamic fields</a>      */
DECL|method|ReplaceDynamicField
specifier|public
name|ReplaceDynamicField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dynamicFieldAttributes
parameter_list|)
block|{
name|this
argument_list|(
name|dynamicFieldAttributes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ReplaceDynamicField
specifier|public
name|ReplaceDynamicField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dynamicFieldAttributes
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|dynamicFieldAttributes
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dynamicFieldAttributes
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|replaceDynamicFieldParameters
init|=
name|createAddFieldNamedList
argument_list|(
name|dynamicFieldAttributes
argument_list|)
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"replace-dynamic-field"
argument_list|,
name|replaceDynamicFieldParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Deletes a dynamic field rule from your schema. If the dynamic field rule does not exist in the schema,    * or if the schema contains a copy field rule with a target or destination that matches only this    * dynamic field rule the method call {@link #process(SolrClient, String)} will fail.    */
DECL|class|DeleteDynamicField
specifier|public
specifier|static
class|class
name|DeleteDynamicField
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param dynamicFieldName the name of the dynamic field to be removed      */
DECL|method|DeleteDynamicField
specifier|public
name|DeleteDynamicField
parameter_list|(
name|String
name|dynamicFieldName
parameter_list|)
block|{
name|this
argument_list|(
name|dynamicFieldName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DeleteDynamicField
specifier|public
name|DeleteDynamicField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|fieldName
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|deleteDynamicFieldParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|deleteDynamicFieldParameters
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"delete-dynamic-field"
argument_list|,
name|deleteDynamicFieldParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Update request used to add a new field type to the schema.    */
DECL|class|AddFieldType
specifier|public
specifier|static
class|class
name|AddFieldType
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldTypeDefinition the field type definition      * @see<a href="https://cwiki.apache.org/confluence/display/solr/Solr+Field+Types">Solr field types</a>      */
DECL|method|AddFieldType
specifier|public
name|AddFieldType
parameter_list|(
name|FieldTypeDefinition
name|fieldTypeDefinition
parameter_list|)
block|{
name|this
argument_list|(
name|fieldTypeDefinition
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AddFieldType
specifier|public
name|AddFieldType
parameter_list|(
name|FieldTypeDefinition
name|fieldTypeDefinition
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|fieldTypeDefinition
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|FieldTypeDefinition
name|fieldTypeDefinition
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|addFieldTypeParameters
init|=
name|createAddFieldTypeNamedList
argument_list|(
name|fieldTypeDefinition
argument_list|)
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"add-field-type"
argument_list|,
name|addFieldTypeParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Replaces a field type in schema belonging to the schema of the specified collection.    * Note that the full definition for a field type must be supplied- this command will not partially modify    * a field type's definition.  If the field type does not exist in the schema the    * method call {@link #process(SolrClient, String)} will fail.    */
DECL|class|ReplaceFieldType
specifier|public
specifier|static
class|class
name|ReplaceFieldType
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldTypeDefinition the field type definition      * @see<a href="https://cwiki.apache.org/confluence/display/solr/Solr+Field+Types">Solr field types</a>      */
DECL|method|ReplaceFieldType
specifier|public
name|ReplaceFieldType
parameter_list|(
name|FieldTypeDefinition
name|fieldTypeDefinition
parameter_list|)
block|{
name|this
argument_list|(
name|fieldTypeDefinition
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ReplaceFieldType
specifier|public
name|ReplaceFieldType
parameter_list|(
name|FieldTypeDefinition
name|fieldTypeDefinition
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|fieldTypeDefinition
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|FieldTypeDefinition
name|fieldTypeDefinition
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|replaceFieldTypeParameters
init|=
name|createAddFieldTypeNamedList
argument_list|(
name|fieldTypeDefinition
argument_list|)
decl_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"replace-field-type"
argument_list|,
name|replaceFieldTypeParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Removes a field type from the schema of the specified collection.    * If the field type does not exist in the schema, or if any    * field or dynamic field rule in the schema uses the field type, the    * method call {@link #process(SolrClient, String)} will fail.    */
DECL|class|DeleteFieldType
specifier|public
specifier|static
class|class
name|DeleteFieldType
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param fieldTypeName the name of the field type to be removed      */
DECL|method|DeleteFieldType
specifier|public
name|DeleteFieldType
parameter_list|(
name|String
name|fieldTypeName
parameter_list|)
block|{
name|this
argument_list|(
name|fieldTypeName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DeleteFieldType
specifier|public
name|DeleteFieldType
parameter_list|(
name|String
name|fieldTypeName
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|fieldTypeName
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|String
name|fieldTypeName
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|deleteFieldTypeParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|deleteFieldTypeParameters
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|fieldTypeName
argument_list|)
expr_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"delete-field-type"
argument_list|,
name|deleteFieldTypeParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Adds a new copy field rule to the schema of the specified collection.    */
DECL|class|AddCopyField
specifier|public
specifier|static
class|class
name|AddCopyField
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param source the source field name      * @param dest   the collection of the destination field names      * @see<a href="https://cwiki.apache.org/confluence/display/solr/Copying+Fields">Copying fields</a>      */
DECL|method|AddCopyField
specifier|public
name|AddCopyField
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|)
block|{
name|this
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
operator|(
name|SolrParams
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of the request.      *      * @param source   the source field name      * @param dest     the collection of the destination field names      * @param maxChars the number of characters to be copied from the source to the dest. Specifying      *                 0 as value, means that all the source characters will be copied to the dest.      * @see<a href="https://cwiki.apache.org/confluence/display/solr/Copying+Fields">Copying fields</a>      */
DECL|method|AddCopyField
specifier|public
name|AddCopyField
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|,
name|Integer
name|maxChars
parameter_list|)
block|{
name|this
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
name|maxChars
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AddCopyField
specifier|public
name|AddCopyField
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
literal|null
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|AddCopyField
specifier|public
name|AddCopyField
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|,
name|Integer
name|maxChars
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
name|maxChars
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|,
name|Integer
name|maxchars
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|addCopyFieldParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addCopyFieldParameters
operator|.
name|add
argument_list|(
literal|"source"
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|addCopyFieldParameters
operator|.
name|add
argument_list|(
literal|"dest"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxchars
operator|!=
literal|null
condition|)
block|{
name|addCopyFieldParameters
operator|.
name|add
argument_list|(
literal|"maxChars"
argument_list|,
name|maxchars
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"add-copy-field"
argument_list|,
name|addCopyFieldParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    * Deletes a copy field rule from the schema of the specified collection.    * If the copy field rule does not exist in the schema then the    * method call {@link #process(SolrClient, String)} will fail.    */
DECL|class|DeleteCopyField
specifier|public
specifier|static
class|class
name|DeleteCopyField
extends|extends
name|SingleUpdate
block|{
comment|/**      * Creates a new instance of the request.      *      * @param source the source field name      * @param dest   the collection of the destination field names      */
DECL|method|DeleteCopyField
specifier|public
name|DeleteCopyField
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|)
block|{
name|this
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DeleteCopyField
specifier|public
name|DeleteCopyField
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|createRequestParameters
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequestParameters
specifier|private
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|createRequestParameters
parameter_list|(
name|String
name|source
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|addCopyFieldParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addCopyFieldParameters
operator|.
name|add
argument_list|(
literal|"source"
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|addCopyFieldParameters
operator|.
name|add
argument_list|(
literal|"dest"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|requestParameters
operator|.
name|add
argument_list|(
literal|"delete-copy-field"
argument_list|,
name|addCopyFieldParameters
argument_list|)
expr_stmt|;
return|return
name|requestParameters
return|;
block|}
block|}
DECL|class|Update
specifier|public
specifier|abstract
specifier|static
class|class
name|Update
extends|extends
name|AbstractSchemaRequest
argument_list|<
name|SchemaResponse
operator|.
name|UpdateResponse
argument_list|>
block|{
DECL|method|Update
specifier|public
name|Update
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Update
specifier|public
name|Update
parameter_list|(
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|POST
argument_list|,
literal|"/schema"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
DECL|method|getRequestParameters
specifier|protected
specifier|abstract
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getRequestParameters
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getContentStreams
specifier|public
name|Collection
argument_list|<
name|ContentStream
argument_list|>
name|getContentStreams
parameter_list|()
throws|throws
name|IOException
block|{
name|CharArr
name|json
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
operator|new
name|SchemaRequestJSONWriter
argument_list|(
name|json
argument_list|)
operator|.
name|write
argument_list|(
name|getRequestParameters
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|ContentStreamBase
operator|.
name|StringStream
argument_list|(
name|json
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SchemaResponse
operator|.
name|UpdateResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|SchemaResponse
operator|.
name|UpdateResponse
argument_list|()
return|;
block|}
block|}
DECL|class|SingleUpdate
specifier|private
specifier|static
specifier|abstract
class|class
name|SingleUpdate
extends|extends
name|Update
block|{
DECL|field|requestParameters
specifier|private
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
decl_stmt|;
DECL|method|SingleUpdate
specifier|public
name|SingleUpdate
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
parameter_list|)
block|{
name|this
argument_list|(
name|requestParameters
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SingleUpdate
specifier|public
name|SingleUpdate
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|requestParameters
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestParameters
operator|=
name|requestParameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRequestParameters
specifier|protected
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getRequestParameters
parameter_list|()
block|{
return|return
name|requestParameters
return|;
block|}
block|}
comment|/**    *<p>The Schema API offers the possibility to perform one or more add requests in a single command.</p>    *<p>The API is transactional and all commands in a single {@link #process(SolrClient, String)} call    * either succeed or fail together.</p>    */
DECL|class|MultiUpdate
specifier|public
specifier|static
class|class
name|MultiUpdate
extends|extends
name|Update
block|{
DECL|field|updateSchemaRequests
specifier|private
name|List
argument_list|<
name|Update
argument_list|>
name|updateSchemaRequests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MultiUpdate
specifier|public
name|MultiUpdate
parameter_list|(
name|List
argument_list|<
name|Update
argument_list|>
name|updateSchemaRequests
parameter_list|)
block|{
name|this
argument_list|(
name|updateSchemaRequests
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MultiUpdate
specifier|public
name|MultiUpdate
parameter_list|(
name|List
argument_list|<
name|Update
argument_list|>
name|updateSchemaRequests
parameter_list|,
name|SolrParams
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateSchemaRequests
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"updateSchemaRequests must be non-null"
argument_list|)
throw|;
block|}
for|for
control|(
name|Update
name|updateSchemaRequest
range|:
name|updateSchemaRequests
control|)
block|{
if|if
condition|(
name|updateSchemaRequest
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"updateSchemaRequests elements must be non-null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|updateSchemaRequests
operator|.
name|add
argument_list|(
name|updateSchemaRequest
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRequestParameters
specifier|protected
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getRequestParameters
parameter_list|()
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|multipleRequestsParameters
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Update
name|updateSchemaRequest
range|:
name|updateSchemaRequests
control|)
block|{
name|multipleRequestsParameters
operator|.
name|addAll
argument_list|(
name|updateSchemaRequest
operator|.
name|getRequestParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|multipleRequestsParameters
return|;
block|}
block|}
comment|/**    * Simple extension of the noggit JSONWriter used to be write objects    * of type {@link NamedList}.    * Writing of objects of the type {@link NamedList} is done in very much    * the same way as for a map.    *<p>    * This writer is particularly useful when doing multiple update requests.    * In update Schema API there can be done multiple add operations of the same    * type (e.g. : add-field-type), they are grouped in an associative array, even though    * this can't be done normally in JSON. For such a use-case, the {@link NamedList}    * objects are particularly useful because they can group key-value mappings    * having the same values for the keys (unlike maps).    */
DECL|class|SchemaRequestJSONWriter
specifier|private
specifier|static
class|class
name|SchemaRequestJSONWriter
extends|extends
name|JSONWriter
block|{
DECL|method|SchemaRequestJSONWriter
specifier|public
name|SchemaRequestJSONWriter
parameter_list|(
name|CharArr
name|out
parameter_list|,
name|int
name|indentSize
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|,
name|indentSize
argument_list|)
expr_stmt|;
block|}
DECL|method|SchemaRequestJSONWriter
specifier|public
name|SchemaRequestJSONWriter
parameter_list|(
name|CharArr
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|NamedList
condition|)
block|{
name|write
argument_list|(
operator|(
name|NamedList
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
else|else
name|super
operator|.
name|write
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see #write(Map)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|val
parameter_list|)
block|{
name|this
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|Iterator
name|i$
init|=
name|val
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i$
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
operator|)
name|i$
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|writeValueSeparator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sz
operator|>
literal|1
condition|)
block|{
name|this
operator|.
name|indent
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeNameSeparator
argument_list|()
expr_stmt|;
name|this
operator|.
name|write
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
