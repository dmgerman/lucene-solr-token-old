begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.io.graph
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|graph
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|MultipleFieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|FieldEqualitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExplanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
operator|.
name|ExpressionType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SolrjNamedThreadFactory
import|;
end_import
begin_class
DECL|class|ShortestPathStream
specifier|public
class|class
name|ShortestPathStream
extends|extends
name|TupleStream
implements|implements
name|Expressible
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|fromNode
specifier|private
name|String
name|fromNode
decl_stmt|;
DECL|field|toNode
specifier|private
name|String
name|toNode
decl_stmt|;
DECL|field|fromField
specifier|private
name|String
name|fromField
decl_stmt|;
DECL|field|toField
specifier|private
name|String
name|toField
decl_stmt|;
DECL|field|joinBatchSize
specifier|private
name|int
name|joinBatchSize
decl_stmt|;
DECL|field|maxDepth
specifier|private
name|int
name|maxDepth
decl_stmt|;
DECL|field|zkHost
specifier|private
name|String
name|zkHost
decl_stmt|;
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|shortestPaths
specifier|private
name|LinkedList
argument_list|<
name|Tuple
argument_list|>
name|shortestPaths
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
DECL|field|found
specifier|private
name|boolean
name|found
decl_stmt|;
DECL|field|streamContext
specifier|private
name|StreamContext
name|streamContext
decl_stmt|;
DECL|field|threads
specifier|private
name|int
name|threads
decl_stmt|;
DECL|field|queryParams
specifier|private
name|SolrParams
name|queryParams
decl_stmt|;
annotation|@
name|Deprecated
DECL|method|ShortestPathStream
specifier|public
name|ShortestPathStream
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|fromNode
parameter_list|,
name|String
name|toNode
parameter_list|,
name|String
name|fromField
parameter_list|,
name|String
name|toField
parameter_list|,
name|Map
name|queryParams
parameter_list|,
name|int
name|joinBatchSize
parameter_list|,
name|int
name|threads
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
name|init
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|fromNode
argument_list|,
name|toNode
argument_list|,
name|fromField
argument_list|,
name|toField
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|queryParams
argument_list|)
argument_list|,
name|joinBatchSize
argument_list|,
name|threads
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
block|}
DECL|method|ShortestPathStream
specifier|public
name|ShortestPathStream
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|fromNode
parameter_list|,
name|String
name|toNode
parameter_list|,
name|String
name|fromField
parameter_list|,
name|String
name|toField
parameter_list|,
name|SolrParams
name|queryParams
parameter_list|,
name|int
name|joinBatchSize
parameter_list|,
name|int
name|threads
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
name|init
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|fromNode
argument_list|,
name|toNode
argument_list|,
name|fromField
argument_list|,
name|toField
argument_list|,
name|queryParams
argument_list|,
name|joinBatchSize
argument_list|,
name|threads
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
block|}
DECL|method|ShortestPathStream
specifier|public
name|ShortestPathStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|collectionName
init|=
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StreamExpressionNamedParameter
argument_list|>
name|namedParams
init|=
name|factory
operator|.
name|getNamedOperands
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|StreamExpressionNamedParameter
name|zkHostExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"zkHost"
argument_list|)
decl_stmt|;
comment|// Collection Name
if|if
condition|(
literal|null
operator|==
name|collectionName
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - collectionName expected as first operand"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|fromNode
init|=
literal|null
decl_stmt|;
name|StreamExpressionNamedParameter
name|fromExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"from"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromExpression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - from param is required"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|fromNode
operator|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|fromExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|String
name|toNode
init|=
literal|null
decl_stmt|;
name|StreamExpressionNamedParameter
name|toExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"to"
argument_list|)
decl_stmt|;
if|if
condition|(
name|toExpression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - to param is required"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|toNode
operator|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|toExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|String
name|fromField
init|=
literal|null
decl_stmt|;
name|String
name|toField
init|=
literal|null
decl_stmt|;
name|StreamExpressionNamedParameter
name|edgeExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"edge"
argument_list|)
decl_stmt|;
if|if
condition|(
name|edgeExpression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - edge param is required"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|edge
init|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|edgeExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
index|[]
name|fields
init|=
name|edge
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - edge param separated by and = and must contain two fields"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|fromField
operator|=
name|fields
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
name|toField
operator|=
name|fields
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|int
name|threads
init|=
literal|6
decl_stmt|;
name|StreamExpressionNamedParameter
name|threadsExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"threads"
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadsExpression
operator|!=
literal|null
condition|)
block|{
name|threads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|threadsExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|partitionSize
init|=
literal|250
decl_stmt|;
name|StreamExpressionNamedParameter
name|partitionExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"partitionSize"
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionExpression
operator|!=
literal|null
condition|)
block|{
name|partitionSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|partitionExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|maxDepth
init|=
literal|0
decl_stmt|;
name|StreamExpressionNamedParameter
name|depthExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"maxDepth"
argument_list|)
decl_stmt|;
if|if
condition|(
name|depthExpression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - maxDepth param is required"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|maxDepth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|depthExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|StreamExpressionNamedParameter
name|namedParam
range|:
name|namedParams
control|)
block|{
if|if
condition|(
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"zkHost"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"to"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"from"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"edge"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"maxDepth"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"threads"
argument_list|)
operator|&&
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"partitionSize"
argument_list|)
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|namedParam
operator|.
name|getName
argument_list|()
argument_list|,
name|namedParam
operator|.
name|getParameter
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// zkHost, optional - if not provided then will look into factory list to get
name|String
name|zkHost
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|zkHostExpression
condition|)
block|{
name|zkHost
operator|=
name|factory
operator|.
name|getCollectionZkHost
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkHost
operator|==
literal|null
condition|)
block|{
name|zkHost
operator|=
name|factory
operator|.
name|getDefaultZkHost
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
condition|)
block|{
name|zkHost
operator|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|zkHost
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - zkHost not found for collection '%s'"
argument_list|,
name|expression
argument_list|,
name|collectionName
argument_list|)
argument_list|)
throw|;
block|}
comment|// We've got all the required items
name|init
argument_list|(
name|zkHost
argument_list|,
name|collectionName
argument_list|,
name|fromNode
argument_list|,
name|toNode
argument_list|,
name|fromField
argument_list|,
name|toField
argument_list|,
name|params
argument_list|,
name|partitionSize
argument_list|,
name|threads
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|fromNode
parameter_list|,
name|String
name|toNode
parameter_list|,
name|String
name|fromField
parameter_list|,
name|String
name|toField
parameter_list|,
name|SolrParams
name|queryParams
parameter_list|,
name|int
name|joinBatchSize
parameter_list|,
name|int
name|threads
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
name|this
operator|.
name|zkHost
operator|=
name|zkHost
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|fromNode
operator|=
name|fromNode
expr_stmt|;
name|this
operator|.
name|toNode
operator|=
name|toNode
expr_stmt|;
name|this
operator|.
name|fromField
operator|=
name|fromField
expr_stmt|;
name|this
operator|.
name|toField
operator|=
name|toField
expr_stmt|;
name|this
operator|.
name|queryParams
operator|=
name|queryParams
expr_stmt|;
name|this
operator|.
name|joinBatchSize
operator|=
name|joinBatchSize
expr_stmt|;
name|this
operator|.
name|threads
operator|=
name|threads
expr_stmt|;
name|this
operator|.
name|maxDepth
operator|=
name|maxDepth
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// collection
name|expression
operator|.
name|addParameter
argument_list|(
name|collection
argument_list|)
expr_stmt|;
comment|// parameters
name|ModifiableSolrParams
name|mParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|queryParams
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|param
range|:
name|mParams
operator|.
name|getMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// SOLR-8409: This is a special case where the params contain a " character
comment|// Do note that in any other BASE streams with parameters where a " might come into play
comment|// that this same replacement needs to take place.
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\""
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"zkHost"
argument_list|,
name|zkHost
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"maxDepth"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxDepth
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"threads"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|threads
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"partitionSize"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|joinBatchSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"from"
argument_list|,
name|fromNode
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"to"
argument_list|,
name|toNode
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"edge"
argument_list|,
name|fromField
operator|+
literal|"="
operator|+
name|toField
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expression
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExplanation
name|explanation
init|=
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|explanation
operator|.
name|setFunctionName
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setImplementingClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setExpressionType
argument_list|(
name|ExpressionType
operator|.
name|GRAPH_SOURCE
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// child is a datastore so add it at this point
name|StreamExplanation
name|child
init|=
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|+
literal|"-datastore"
argument_list|)
decl_stmt|;
name|child
operator|.
name|setFunctionName
argument_list|(
literal|"solr (graph)"
argument_list|)
expr_stmt|;
name|child
operator|.
name|setImplementingClass
argument_list|(
literal|"Solr/Lucene"
argument_list|)
expr_stmt|;
name|child
operator|.
name|setExpressionType
argument_list|(
name|ExpressionType
operator|.
name|DATASTORE
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|mParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|queryParams
argument_list|)
decl_stmt|;
name|child
operator|.
name|setExpression
argument_list|(
name|mParams
operator|.
name|getMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s=%s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
return|return
name|explanation
return|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|streamContext
operator|=
name|context
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
return|return
name|l
return|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|allVisited
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|visited
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|visited
operator|.
name|put
argument_list|(
name|this
operator|.
name|fromNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|allVisited
operator|.
name|add
argument_list|(
name|visited
argument_list|)
expr_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|nextVisited
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Edge
argument_list|>
name|targets
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ExecutorService
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
name|ExecutorUtil
operator|.
name|newMDCAwareFixedThreadPool
argument_list|(
name|threads
argument_list|,
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"ShortestPathStream"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Breadth first search
name|TRAVERSE
label|:
while|while
condition|(
name|targets
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|depth
operator|<
name|maxDepth
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|visited
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|nodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|nextVisited
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|int
name|batchCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|queryNodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|JOIN
label|:
comment|//Queue up all the batches
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|queryNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
operator|++
name|batchCount
expr_stmt|;
if|if
condition|(
name|batchCount
operator|==
name|joinBatchSize
operator|||
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|JoinRunner
name|joinRunner
init|=
operator|new
name|JoinRunner
argument_list|(
name|queryNodes
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|List
argument_list|<
name|Edge
argument_list|>
argument_list|>
name|future
init|=
name|threadPool
operator|.
name|submit
argument_list|(
name|joinRunner
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|batchCount
operator|=
literal|0
expr_stmt|;
name|queryNodes
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
comment|//Process the batches as they become available
name|OUTER
label|:
for|for
control|(
name|Future
argument_list|<
name|List
argument_list|<
name|Edge
argument_list|>
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|List
argument_list|<
name|Edge
argument_list|>
name|edges
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|INNER
label|:
for|for
control|(
name|Edge
name|edge
range|:
name|edges
control|)
block|{
if|if
condition|(
name|toNode
operator|.
name|equals
argument_list|(
name|edge
operator|.
name|to
argument_list|)
condition|)
block|{
name|targets
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextVisited
operator|.
name|containsKey
argument_list|(
name|edge
operator|.
name|to
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parents
init|=
name|nextVisited
operator|.
name|get
argument_list|(
name|edge
operator|.
name|to
argument_list|)
decl_stmt|;
name|parents
operator|.
name|add
argument_list|(
name|edge
operator|.
name|from
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|parents
operator|.
name|add
argument_list|(
name|edge
operator|.
name|from
argument_list|)
expr_stmt|;
name|nextVisited
operator|.
name|put
argument_list|(
name|edge
operator|.
name|to
argument_list|,
name|parents
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|cycle
argument_list|(
name|edge
operator|.
name|to
argument_list|,
name|allVisited
argument_list|)
condition|)
block|{
if|if
condition|(
name|nextVisited
operator|.
name|containsKey
argument_list|(
name|edge
operator|.
name|to
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parents
init|=
name|nextVisited
operator|.
name|get
argument_list|(
name|edge
operator|.
name|to
argument_list|)
decl_stmt|;
name|parents
operator|.
name|add
argument_list|(
name|edge
operator|.
name|from
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|parents
operator|.
name|add
argument_list|(
name|edge
operator|.
name|from
argument_list|)
expr_stmt|;
name|nextVisited
operator|.
name|put
argument_list|(
name|edge
operator|.
name|to
argument_list|,
name|parents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|allVisited
operator|.
name|add
argument_list|(
name|nextVisited
argument_list|)
expr_stmt|;
name|visited
operator|=
name|nextVisited
expr_stmt|;
operator|++
name|depth
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|finalPaths
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|targets
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Edge
name|edge
range|:
name|targets
control|)
block|{
name|List
argument_list|<
name|LinkedList
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|path
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|path
operator|.
name|addFirst
argument_list|(
name|edge
operator|.
name|to
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//Walk back up the tree a collect the parent nodes.
name|INNER
label|:
for|for
control|(
name|int
name|i
init|=
name|allVisited
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|v
init|=
name|allVisited
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|LinkedList
argument_list|>
name|it
init|=
name|paths
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
name|newPaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LinkedList
name|p
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parents
init|=
name|v
operator|.
name|get
argument_list|(
name|p
operator|.
name|peekFirst
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|parent
range|:
name|parents
control|)
block|{
name|LinkedList
name|newPath
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|newPath
operator|.
name|addAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|newPath
operator|.
name|addFirst
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|newPaths
operator|.
name|add
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
block|}
name|paths
operator|=
name|newPaths
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|LinkedList
name|p
range|:
name|paths
control|)
block|{
name|String
name|s
init|=
name|p
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|finalPaths
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|Tuple
name|shortestPath
init|=
operator|new
name|Tuple
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
name|shortestPath
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|shortestPaths
operator|.
name|add
argument_list|(
name|shortestPath
argument_list|)
expr_stmt|;
name|finalPaths
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|JoinRunner
specifier|private
class|class
name|JoinRunner
implements|implements
name|Callable
argument_list|<
name|List
argument_list|<
name|Edge
argument_list|>
argument_list|>
block|{
DECL|field|nodes
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nodes
decl_stmt|;
DECL|field|edges
specifier|private
name|List
argument_list|<
name|Edge
argument_list|>
name|edges
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|method|JoinRunner
specifier|public
name|JoinRunner
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
DECL|method|call
specifier|public
name|List
argument_list|<
name|Edge
argument_list|>
name|call
parameter_list|()
block|{
name|ModifiableSolrParams
name|joinParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|queryParams
argument_list|)
decl_stmt|;
name|String
name|fl
init|=
name|fromField
operator|+
literal|","
operator|+
name|toField
decl_stmt|;
name|joinParams
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
name|fl
argument_list|)
expr_stmt|;
name|joinParams
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
name|joinParams
operator|.
name|set
argument_list|(
literal|"sort"
argument_list|,
name|toField
operator|+
literal|" asc,"
operator|+
name|fromField
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|StringBuffer
name|nodeQuery
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|nodeQuery
operator|.
name|append
argument_list|(
name|node
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
name|q
init|=
name|fromField
operator|+
literal|":("
operator|+
name|nodeQuery
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|")"
decl_stmt|;
name|joinParams
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|TupleStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
operator|new
name|UniqueStream
argument_list|(
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|joinParams
argument_list|)
argument_list|,
operator|new
name|MultipleFieldEqualitor
argument_list|(
operator|new
name|FieldEqualitor
argument_list|(
name|toField
argument_list|)
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
name|fromField
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
name|BATCH
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|tuple
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
break|break
name|BATCH
break|;
block|}
name|String
name|_toNode
init|=
name|tuple
operator|.
name|getString
argument_list|(
name|toField
argument_list|)
decl_stmt|;
name|String
name|_fromNode
init|=
name|tuple
operator|.
name|getString
argument_list|(
name|fromField
argument_list|)
decl_stmt|;
name|Edge
name|edge
init|=
operator|new
name|Edge
argument_list|(
name|_fromNode
argument_list|,
name|_toNode
argument_list|)
decl_stmt|;
name|edges
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ce
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ce
argument_list|)
throw|;
block|}
block|}
return|return
name|edges
return|;
block|}
block|}
DECL|class|Edge
specifier|private
class|class
name|Edge
block|{
DECL|field|from
specifier|private
name|String
name|from
decl_stmt|;
DECL|field|to
specifier|private
name|String
name|to
decl_stmt|;
DECL|method|Edge
specifier|public
name|Edge
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
block|}
block|}
DECL|method|cycle
specifier|private
name|boolean
name|cycle
parameter_list|(
name|String
name|node
parameter_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|allVisited
parameter_list|)
block|{
comment|//Check all visited trees for each level to see if we've encountered this node before.
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|visited
range|:
name|allVisited
control|)
block|{
if|if
condition|(
name|visited
operator|.
name|containsKey
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|found
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|shortestPaths
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|Tuple
name|t
init|=
name|shortestPaths
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
return|return
name|t
return|;
block|}
else|else
block|{
name|Map
name|m
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
literal|"sorry"
argument_list|,
literal|"No path found"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Tuple
argument_list|(
name|m
argument_list|)
return|;
block|}
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
