begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_comment
comment|/* String[] buckets = {"a","b"}; Metric BucketStream bucketStream = new BucketStream(stream,buckets,metrics,"my-metrics","name");  bucketStream.get( */
end_comment
begin_class
DECL|class|MetricStream
specifier|public
class|class
name|MetricStream
extends|extends
name|TupleStream
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|tupleStream
specifier|private
name|TupleStream
name|tupleStream
decl_stmt|;
DECL|field|buckets
specifier|private
name|Bucket
index|[]
name|buckets
decl_stmt|;
DECL|field|metrics
specifier|private
name|Metric
index|[]
name|metrics
decl_stmt|;
DECL|field|outKey
specifier|private
name|String
name|outKey
decl_stmt|;
DECL|field|bucketMap
specifier|private
name|Map
argument_list|<
name|HashKey
argument_list|,
name|Metric
index|[]
argument_list|>
name|bucketMap
decl_stmt|;
DECL|field|bucketMetrics
specifier|private
name|BucketMetrics
index|[]
name|bucketMetrics
decl_stmt|;
DECL|field|metricsKey
specifier|private
specifier|static
specifier|final
name|HashKey
name|metricsKey
init|=
operator|new
name|HashKey
argument_list|(
literal|"metrics"
argument_list|)
decl_stmt|;
DECL|field|topN
specifier|private
name|int
name|topN
decl_stmt|;
DECL|field|comp
specifier|private
name|Comparator
argument_list|<
name|BucketMetrics
argument_list|>
name|comp
decl_stmt|;
DECL|field|rcomp
specifier|private
name|Comparator
argument_list|<
name|BucketMetrics
argument_list|>
name|rcomp
decl_stmt|;
DECL|method|MetricStream
specifier|public
name|MetricStream
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|,
name|Bucket
index|[]
name|buckets
parameter_list|,
name|Metric
index|[]
name|metrics
parameter_list|,
name|String
name|outKey
parameter_list|,
name|Comparator
argument_list|<
name|BucketMetrics
argument_list|>
name|comp
parameter_list|,
name|int
name|topN
parameter_list|)
block|{
name|this
operator|.
name|tupleStream
operator|=
name|tupleStream
expr_stmt|;
name|this
operator|.
name|buckets
operator|=
name|buckets
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|outKey
operator|=
name|outKey
expr_stmt|;
name|this
operator|.
name|topN
operator|=
name|topN
expr_stmt|;
name|this
operator|.
name|rcomp
operator|=
operator|new
name|ReverseOrdComp
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
name|this
operator|.
name|bucketMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
DECL|method|MetricStream
specifier|public
name|MetricStream
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|,
name|Metric
index|[]
name|metrics
parameter_list|,
name|String
name|outKey
parameter_list|)
block|{
name|this
operator|.
name|tupleStream
operator|=
name|tupleStream
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|outKey
operator|=
name|outKey
expr_stmt|;
name|this
operator|.
name|bucketMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
DECL|method|getOutKey
specifier|public
name|String
name|getOutKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|outKey
return|;
block|}
DECL|method|getBucketMetrics
specifier|public
name|BucketMetrics
index|[]
name|getBucketMetrics
parameter_list|()
block|{
return|return
name|bucketMetrics
return|;
block|}
DECL|method|setBucketMetrics
specifier|public
name|void
name|setBucketMetrics
parameter_list|(
name|BucketMetrics
index|[]
name|bucketMetrics
parameter_list|)
block|{
name|this
operator|.
name|bucketMetrics
operator|=
name|bucketMetrics
expr_stmt|;
block|}
DECL|method|merge
name|BucketMetrics
index|[]
name|merge
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|>
name|all
parameter_list|)
block|{
name|Map
argument_list|<
name|HashKey
argument_list|,
name|Metric
index|[]
argument_list|>
name|bucketAccumulator
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
name|top
range|:
name|all
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ks
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|top
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|>
name|ms
init|=
operator|(
name|List
argument_list|<
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|>
operator|)
name|top
operator|.
name|get
argument_list|(
literal|"metrics"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|ks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|bucketMs
init|=
name|ms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HashKey
name|hashKey
init|=
operator|new
name|HashKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketAccumulator
operator|.
name|containsKey
argument_list|(
name|hashKey
argument_list|)
condition|)
block|{
name|Metric
index|[]
name|mergeMetrics
init|=
name|bucketAccumulator
operator|.
name|get
argument_list|(
name|hashKey
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|mergeMetrics
operator|.
name|length
condition|;
name|m
operator|++
control|)
block|{
name|mergeMetrics
index|[
name|m
index|]
operator|.
name|update
argument_list|(
name|bucketMs
operator|.
name|get
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Metric
index|[]
name|mergedMetrics
init|=
operator|new
name|Metric
index|[
name|metrics
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|metrics
operator|.
name|length
condition|;
name|m
operator|++
control|)
block|{
name|mergedMetrics
index|[
name|m
index|]
operator|=
name|metrics
index|[
name|m
index|]
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|mergedMetrics
index|[
name|m
index|]
operator|.
name|update
argument_list|(
name|bucketMs
operator|.
name|get
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bucketAccumulator
operator|.
name|put
argument_list|(
name|hashKey
argument_list|,
name|mergedMetrics
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|HashKey
argument_list|,
name|Metric
index|[]
argument_list|>
argument_list|>
name|it
init|=
name|bucketAccumulator
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PriorityQueue
argument_list|<
name|BucketMetrics
argument_list|>
name|priorityQueue
init|=
operator|new
name|PriorityQueue
argument_list|(
name|topN
argument_list|,
name|rcomp
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|HashKey
argument_list|,
name|Metric
index|[]
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|BucketMetrics
name|bms
init|=
operator|new
name|BucketMetrics
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorityQueue
operator|.
name|size
argument_list|()
operator|<
name|topN
condition|)
block|{
name|priorityQueue
operator|.
name|add
argument_list|(
name|bms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BucketMetrics
name|peek
init|=
name|priorityQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|bms
argument_list|,
name|peek
argument_list|)
operator|<
literal|0
condition|)
block|{
name|priorityQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|priorityQueue
operator|.
name|add
argument_list|(
name|bms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|s
init|=
name|priorityQueue
operator|.
name|size
argument_list|()
decl_stmt|;
name|BucketMetrics
index|[]
name|bucketMetrics
init|=
operator|new
name|BucketMetrics
index|[
name|s
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|bucketMetrics
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|BucketMetrics
name|b
init|=
name|priorityQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|bucketMetrics
index|[
name|i
index|]
operator|=
name|b
expr_stmt|;
block|}
return|return
name|bucketMetrics
return|;
block|}
DECL|class|ReverseOrdComp
specifier|private
class|class
name|ReverseOrdComp
implements|implements
name|Comparator
argument_list|<
name|BucketMetrics
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|comp
specifier|private
name|Comparator
argument_list|<
name|BucketMetrics
argument_list|>
name|comp
decl_stmt|;
DECL|method|ReverseOrdComp
specifier|public
name|ReverseOrdComp
parameter_list|(
name|Comparator
argument_list|<
name|BucketMetrics
argument_list|>
name|comp
parameter_list|)
block|{
name|this
operator|.
name|comp
operator|=
name|comp
expr_stmt|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|BucketMetrics
name|e1
parameter_list|,
name|BucketMetrics
name|e2
parameter_list|)
block|{
return|return
name|comp
operator|.
name|compare
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|tupleStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|tupleStream
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|Tuple
name|tuple
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|HashKey
argument_list|,
name|Metric
index|[]
argument_list|>
argument_list|>
name|it
init|=
name|bucketMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|comp
operator|==
literal|null
condition|)
block|{
comment|//Handle No bucket constructor
name|Map
operator|.
name|Entry
argument_list|<
name|HashKey
argument_list|,
name|Metric
index|[]
argument_list|>
name|noBucket
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|BucketMetrics
name|bms
init|=
operator|new
name|BucketMetrics
argument_list|(
name|noBucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|noBucket
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|bucketMetrics
operator|=
operator|new
name|BucketMetrics
index|[
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|bucketMetrics
index|[
literal|0
index|]
operator|=
name|bms
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|outMetrics
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outKeys
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|bms
operator|.
name|getMetrics
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|outMetricValues
init|=
name|metric
operator|.
name|metricValues
argument_list|()
decl_stmt|;
name|String
name|outKey
init|=
name|metric
operator|.
name|getName
argument_list|()
decl_stmt|;
name|outMetrics
operator|.
name|add
argument_list|(
name|outMetricValues
argument_list|)
expr_stmt|;
name|outKeys
operator|.
name|add
argument_list|(
name|outKey
argument_list|)
expr_stmt|;
block|}
name|Map
name|outMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"buckets"
argument_list|,
name|outKeys
argument_list|)
expr_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"metrics"
argument_list|,
name|outMetrics
argument_list|)
expr_stmt|;
name|tuple
operator|.
name|set
argument_list|(
name|this
operator|.
name|outKey
argument_list|,
name|outMap
argument_list|)
expr_stmt|;
return|return
name|tuple
return|;
block|}
name|PriorityQueue
argument_list|<
name|BucketMetrics
argument_list|>
name|priorityQueue
init|=
operator|new
name|PriorityQueue
argument_list|(
name|topN
argument_list|,
name|rcomp
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|HashKey
argument_list|,
name|Metric
index|[]
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|BucketMetrics
name|bms
init|=
operator|new
name|BucketMetrics
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorityQueue
operator|.
name|size
argument_list|()
operator|<
name|topN
condition|)
block|{
name|priorityQueue
operator|.
name|add
argument_list|(
name|bms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BucketMetrics
name|peek
init|=
name|priorityQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|bms
argument_list|,
name|peek
argument_list|)
operator|<
literal|0
condition|)
block|{
name|priorityQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|priorityQueue
operator|.
name|add
argument_list|(
name|bms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|s
init|=
name|priorityQueue
operator|.
name|size
argument_list|()
decl_stmt|;
name|this
operator|.
name|bucketMetrics
operator|=
operator|new
name|BucketMetrics
index|[
name|s
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|bucketMetrics
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|BucketMetrics
name|b
init|=
name|priorityQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|this
operator|.
name|bucketMetrics
index|[
name|i
index|]
operator|=
name|b
expr_stmt|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|>
name|outMetrics
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outBuckets
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|BucketMetrics
name|bms
range|:
name|this
operator|.
name|bucketMetrics
control|)
block|{
name|List
name|outBucketMetrics
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|bms
operator|.
name|getMetrics
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|outMetricValues
init|=
name|metric
operator|.
name|metricValues
argument_list|()
decl_stmt|;
name|outBucketMetrics
operator|.
name|add
argument_list|(
name|outMetricValues
argument_list|)
expr_stmt|;
block|}
name|outBuckets
operator|.
name|add
argument_list|(
name|bms
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outMetrics
operator|.
name|add
argument_list|(
name|outBucketMetrics
argument_list|)
expr_stmt|;
block|}
name|Map
name|outMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"buckets"
argument_list|,
name|outBuckets
argument_list|)
expr_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"metrics"
argument_list|,
name|outMetrics
argument_list|)
expr_stmt|;
name|tuple
operator|.
name|set
argument_list|(
name|this
operator|.
name|outKey
argument_list|,
name|outMap
argument_list|)
expr_stmt|;
return|return
name|tuple
return|;
block|}
name|HashKey
name|hashKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buckets
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|bucketValues
init|=
operator|new
name|String
index|[
name|buckets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bucketValues
index|[
name|i
index|]
operator|=
name|buckets
index|[
name|i
index|]
operator|.
name|getBucketValue
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
name|hashKey
operator|=
operator|new
name|HashKey
argument_list|(
name|bucketValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hashKey
operator|=
name|metricsKey
expr_stmt|;
block|}
name|Metric
index|[]
name|bucketMetrics
init|=
name|bucketMap
operator|.
name|get
argument_list|(
name|hashKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketMetrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Metric
name|bucketMetric
range|:
name|bucketMetrics
control|)
block|{
name|bucketMetric
operator|.
name|update
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|bucketMetrics
operator|=
operator|new
name|Metric
index|[
name|metrics
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metrics
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Metric
name|bucketMetric
init|=
name|metrics
index|[
name|i
index|]
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|bucketMetric
operator|.
name|update
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|bucketMetrics
index|[
name|i
index|]
operator|=
name|bucketMetric
expr_stmt|;
block|}
name|bucketMap
operator|.
name|put
argument_list|(
name|hashKey
argument_list|,
name|bucketMetrics
argument_list|)
expr_stmt|;
block|}
return|return
name|tuple
return|;
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class
end_unit
