begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Sends tuples emitted by a wrapped {@link TupleStream} as updates to a SolrCloud collection.  */
end_comment
begin_class
DECL|class|UpdateStream
specifier|public
class|class
name|UpdateStream
extends|extends
name|TupleStream
implements|implements
name|Expressible
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|zkHost
specifier|private
name|String
name|zkHost
decl_stmt|;
DECL|field|updateBatchSize
specifier|private
name|int
name|updateBatchSize
decl_stmt|;
DECL|field|batchNumber
specifier|private
name|int
name|batchNumber
decl_stmt|;
DECL|field|totalDocsIndex
specifier|private
name|long
name|totalDocsIndex
decl_stmt|;
DECL|field|tupleSource
specifier|private
name|PushBackStream
name|tupleSource
decl_stmt|;
DECL|field|cache
specifier|private
specifier|transient
name|SolrClientCache
name|cache
decl_stmt|;
DECL|field|cloudSolrClient
specifier|private
specifier|transient
name|CloudSolrClient
name|cloudSolrClient
decl_stmt|;
DECL|field|documentBatch
specifier|private
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|documentBatch
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|coreName
specifier|private
name|String
name|coreName
decl_stmt|;
DECL|method|UpdateStream
specifier|public
name|UpdateStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|collectionName
init|=
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|verifyCollectionName
argument_list|(
name|collectionName
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|findZkHost
argument_list|(
name|factory
argument_list|,
name|collectionName
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|verifyZkHost
argument_list|(
name|zkHost
argument_list|,
name|collectionName
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|int
name|updateBatchSize
init|=
name|extractBatchSize
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
decl_stmt|;
comment|//Extract underlying TupleStream.
name|List
argument_list|<
name|StreamExpression
argument_list|>
name|streamExpressions
init|=
name|factory
operator|.
name|getExpressionOperandsRepresentingTypes
argument_list|(
name|expression
argument_list|,
name|Expressible
operator|.
name|class
argument_list|,
name|TupleStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|!=
name|streamExpressions
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting a single stream but found %d"
argument_list|,
name|expression
argument_list|,
name|streamExpressions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|StreamExpression
name|sourceStreamExpression
init|=
name|streamExpressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|init
argument_list|(
name|collectionName
argument_list|,
name|factory
operator|.
name|constructStream
argument_list|(
name|sourceStreamExpression
argument_list|)
argument_list|,
name|zkHost
argument_list|,
name|updateBatchSize
argument_list|)
expr_stmt|;
block|}
DECL|method|UpdateStream
specifier|public
name|UpdateStream
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|TupleStream
name|tupleSource
parameter_list|,
name|String
name|zkHost
parameter_list|,
name|int
name|updateBatchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|updateBatchSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"batchSize '%d' must be greater than 0."
argument_list|,
name|updateBatchSize
argument_list|)
argument_list|)
throw|;
block|}
name|init
argument_list|(
name|collectionName
argument_list|,
name|tupleSource
argument_list|,
name|zkHost
argument_list|,
name|updateBatchSize
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|TupleStream
name|tupleSource
parameter_list|,
name|String
name|zkHost
parameter_list|,
name|int
name|updateBatchSize
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collectionName
expr_stmt|;
name|this
operator|.
name|zkHost
operator|=
name|zkHost
expr_stmt|;
name|this
operator|.
name|updateBatchSize
operator|=
name|updateBatchSize
expr_stmt|;
name|this
operator|.
name|tupleSource
operator|=
operator|new
name|PushBackStream
argument_list|(
name|tupleSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|setCloudSolrClient
argument_list|()
expr_stmt|;
name|tupleSource
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updateBatchSize
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple
init|=
name|tupleSource
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
if|if
condition|(
name|documentBatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|tuple
return|;
block|}
else|else
block|{
name|tupleSource
operator|.
name|pushBack
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
name|uploadBatchToCollection
argument_list|(
name|documentBatch
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|documentBatch
operator|.
name|size
argument_list|()
decl_stmt|;
name|documentBatch
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|createBatchSummaryTuple
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
name|documentBatch
operator|.
name|add
argument_list|(
name|convertTupleToSolrDocument
argument_list|(
name|tuple
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|uploadBatchToCollection
argument_list|(
name|documentBatch
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|documentBatch
operator|.
name|size
argument_list|()
decl_stmt|;
name|documentBatch
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|createBatchSummaryTuple
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
operator|==
literal|null
operator|&&
name|cloudSolrClient
operator|!=
literal|null
condition|)
block|{
name|cloudSolrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|tupleSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
name|tupleSource
operator|.
name|getStreamSort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|TupleStream
argument_list|>
name|sourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|TupleStream
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|sourceList
operator|.
name|add
argument_list|(
name|tupleSource
argument_list|)
expr_stmt|;
return|return
name|sourceList
return|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"zkHost"
argument_list|,
name|zkHost
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"batchSize"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|updateBatchSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tupleSource
operator|instanceof
name|Expressible
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|(
operator|(
name|Expressible
operator|)
name|tupleSource
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This ParallelStream contains a non-expressible TupleStream - it cannot be converted to an expression"
argument_list|)
throw|;
block|}
return|return
name|expression
return|;
block|}
annotation|@
name|Override
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|context
operator|.
name|getSolrClientCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|coreName
operator|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
literal|"core"
argument_list|)
expr_stmt|;
name|this
operator|.
name|tupleSource
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyCollectionName
specifier|private
name|void
name|verifyCollectionName
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|StreamExpression
name|expression
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|collectionName
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - collectionName expected as first operand"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|findZkHost
specifier|private
name|String
name|findZkHost
parameter_list|(
name|StreamFactory
name|factory
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|StreamExpression
name|expression
parameter_list|)
block|{
name|StreamExpressionNamedParameter
name|zkHostExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"zkHost"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|zkHostExpression
condition|)
block|{
name|String
name|zkHost
init|=
name|factory
operator|.
name|getCollectionZkHost
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkHost
operator|==
literal|null
condition|)
block|{
return|return
name|factory
operator|.
name|getDefaultZkHost
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|zkHost
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
condition|)
block|{
return|return
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|verifyZkHost
specifier|private
name|void
name|verifyZkHost
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|StreamExpression
name|expression
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|zkHost
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - zkHost not found for collection '%s'"
argument_list|,
name|expression
argument_list|,
name|collectionName
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|extractBatchSize
specifier|private
name|int
name|extractBatchSize
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExpressionNamedParameter
name|batchSizeParam
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"batchSize"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|batchSizeParam
operator|||
literal|null
operator|==
name|batchSizeParam
operator|.
name|getParameter
argument_list|()
operator|||
operator|!
operator|(
name|batchSizeParam
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting a 'batchSize' parameter of type positive integer but didn't find one"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|batchSizeStr
init|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|batchSizeParam
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|parseBatchSize
argument_list|(
name|batchSizeStr
argument_list|,
name|expression
argument_list|)
return|;
block|}
DECL|method|parseBatchSize
specifier|private
name|int
name|parseBatchSize
parameter_list|(
name|String
name|batchSizeStr
parameter_list|,
name|StreamExpression
name|expression
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|batchSize
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|batchSizeStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|batchSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - batchSize '%d' must be greater than 0."
argument_list|,
name|expression
argument_list|,
name|batchSize
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|batchSize
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - batchSize '%s' is not a valid integer."
argument_list|,
name|expression
argument_list|,
name|batchSizeStr
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|setCloudSolrClient
specifier|private
name|void
name|setCloudSolrClient
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|cache
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cloudSolrClient
operator|=
name|this
operator|.
name|cache
operator|.
name|getCloudSolrClient
argument_list|(
name|zkHost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|cloudSolrClient
operator|=
operator|new
name|Builder
argument_list|()
operator|.
name|withZkHost
argument_list|(
name|zkHost
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|cloudSolrClient
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|convertTupleToSolrDocument
specifier|private
name|SolrInputDocument
name|convertTupleToSolrDocument
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|field
range|:
name|tuple
operator|.
name|fields
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|String
operator|)
name|field
operator|)
operator|.
name|equals
argument_list|(
literal|"_version_"
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|tuple
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|addMultivaluedField
argument_list|(
name|doc
argument_list|,
operator|(
name|String
operator|)
name|field
argument_list|,
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|addField
argument_list|(
operator|(
name|String
operator|)
name|field
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tuple [{}] was converted into SolrInputDocument [{}]."
argument_list|,
name|tuple
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|addMultivaluedField
specifier|private
name|void
name|addMultivaluedField
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|uploadBatchToCollection
specifier|private
name|void
name|uploadBatchToCollection
parameter_list|(
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|documentBatch
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|documentBatch
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
try|try
block|{
name|cloudSolrClient
operator|.
name|add
argument_list|(
name|collection
argument_list|,
name|documentBatch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to add documents to collection due to unexpected error."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unexpected error when adding documents to collection %s- %s:%s"
argument_list|,
name|collection
argument_list|,
name|className
argument_list|,
name|message
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|createBatchSummaryTuple
specifier|private
name|Tuple
name|createBatchSummaryTuple
parameter_list|(
name|int
name|batchSize
parameter_list|)
block|{
assert|assert
name|batchSize
operator|>
literal|0
assert|;
name|Map
name|m
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|this
operator|.
name|totalDocsIndex
operator|+=
name|batchSize
expr_stmt|;
operator|++
name|batchNumber
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"batchIndexed"
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"totalIndexed"
argument_list|,
name|this
operator|.
name|totalDocsIndex
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"batchNumber"
argument_list|,
name|batchNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|coreName
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
literal|"worker"
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Tuple
argument_list|(
name|m
argument_list|)
return|;
block|}
block|}
end_class
end_unit
