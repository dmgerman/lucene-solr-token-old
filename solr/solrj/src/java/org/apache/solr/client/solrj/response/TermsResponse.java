begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Encapsulates responses from TermsComponent  */
end_comment
begin_class
DECL|class|TermsResponse
specifier|public
class|class
name|TermsResponse
block|{
DECL|field|termMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Term
argument_list|>
argument_list|>
name|termMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Term
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TermsResponse
specifier|public
name|TermsResponse
parameter_list|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Number
argument_list|>
argument_list|>
name|termsInfo
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|termsInfo
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldName
init|=
name|termsInfo
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|itemList
init|=
operator|new
name|ArrayList
argument_list|<
name|Term
argument_list|>
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Number
argument_list|>
name|items
init|=
name|termsInfo
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|items
operator|.
name|getName
argument_list|(
name|j
argument_list|)
argument_list|,
name|items
operator|.
name|getVal
argument_list|(
name|j
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
name|itemList
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|termMap
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|itemList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get's the term list for a given field    *     * @return the term list or null if no terms for the given field exist    */
DECL|method|getTerms
specifier|public
name|List
argument_list|<
name|Term
argument_list|>
name|getTerms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|termMap
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
DECL|method|getTermMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Term
argument_list|>
argument_list|>
name|getTermMap
parameter_list|()
block|{
return|return
name|termMap
return|;
block|}
DECL|class|Term
specifier|public
specifier|static
class|class
name|Term
block|{
DECL|field|term
specifier|private
name|String
name|term
decl_stmt|;
DECL|field|frequency
specifier|private
name|long
name|frequency
decl_stmt|;
DECL|method|Term
specifier|public
name|Term
parameter_list|(
name|String
name|term
parameter_list|,
name|long
name|frequency
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|frequency
operator|=
name|frequency
expr_stmt|;
block|}
DECL|method|getTerm
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|term
return|;
block|}
DECL|method|setTerm
specifier|public
name|void
name|setTerm
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
DECL|method|getFrequency
specifier|public
name|long
name|getFrequency
parameter_list|()
block|{
return|return
name|frequency
return|;
block|}
DECL|method|setFrequency
specifier|public
name|void
name|setFrequency
parameter_list|(
name|long
name|frequency
parameter_list|)
block|{
name|this
operator|.
name|frequency
operator|=
name|frequency
expr_stmt|;
block|}
DECL|method|addFrequency
specifier|public
name|void
name|addFrequency
parameter_list|(
name|long
name|frequency
parameter_list|)
block|{
name|this
operator|.
name|frequency
operator|+=
name|frequency
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
