begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.graph
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|graph
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_class
DECL|class|Traversal
specifier|public
class|class
name|Traversal
block|{
DECL|field|graph
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
argument_list|>
name|graph
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|fields
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|collections
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|scatter
specifier|private
name|Set
argument_list|<
name|Scatter
argument_list|>
name|scatter
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
DECL|field|collectionSet
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|collectionSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
DECL|field|trackTraversal
specifier|private
name|boolean
name|trackTraversal
decl_stmt|;
DECL|field|depth
specifier|private
name|int
name|depth
decl_stmt|;
DECL|method|addLevel
specifier|public
name|void
name|addLevel
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|level
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|graph
operator|.
name|add
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|collections
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|collectionSet
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
operator|++
name|depth
expr_stmt|;
block|}
DECL|method|getDepth
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|depth
return|;
block|}
DECL|method|getTrackTraversal
specifier|public
name|boolean
name|getTrackTraversal
parameter_list|()
block|{
return|return
name|this
operator|.
name|trackTraversal
return|;
block|}
DECL|method|visited
specifier|public
name|boolean
name|visited
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|ancestorId
parameter_list|,
name|Tuple
name|tuple
parameter_list|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|level
range|:
name|graph
control|)
block|{
name|Node
name|node
init|=
name|level
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|add
argument_list|(
name|depth
operator|+
literal|"^"
operator|+
name|ancestorId
argument_list|,
name|tuple
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isMultiCollection
specifier|public
name|boolean
name|isMultiCollection
parameter_list|()
block|{
return|return
name|collectionSet
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
DECL|method|getGraph
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
argument_list|>
name|getGraph
parameter_list|()
block|{
return|return
name|graph
return|;
block|}
DECL|method|setScatter
specifier|public
name|void
name|setScatter
parameter_list|(
name|Set
argument_list|<
name|Scatter
argument_list|>
name|scatter
parameter_list|)
block|{
name|this
operator|.
name|scatter
operator|=
name|scatter
expr_stmt|;
block|}
DECL|method|getScatter
specifier|public
name|Set
argument_list|<
name|Scatter
argument_list|>
name|getScatter
parameter_list|()
block|{
return|return
name|this
operator|.
name|scatter
return|;
block|}
DECL|method|setTrackTraversal
specifier|public
name|void
name|setTrackTraversal
parameter_list|(
name|boolean
name|trackTraversal
parameter_list|)
block|{
name|this
operator|.
name|trackTraversal
operator|=
name|trackTraversal
expr_stmt|;
block|}
DECL|method|getCollections
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCollections
parameter_list|()
block|{
return|return
name|this
operator|.
name|collections
return|;
block|}
DECL|method|getFields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|fields
return|;
block|}
DECL|enum|Scatter
specifier|public
enum|enum
name|Scatter
block|{
DECL|enum constant|BRANCHES
name|BRANCHES
block|,
DECL|enum constant|LEAVES
name|LEAVES
block|;   }
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|TraversalIterator
argument_list|(
name|this
argument_list|,
name|scatter
argument_list|)
return|;
block|}
block|}
end_class
end_unit
