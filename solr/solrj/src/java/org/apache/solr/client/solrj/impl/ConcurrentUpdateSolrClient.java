begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|EntityTemplate
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|ResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|RequestWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|ClientUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|UpdateParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SolrjNamedThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import
begin_comment
comment|/**  * ConcurrentUpdateSolrClient buffers all added documents and writes  * them into open HTTP connections. This class is thread safe.  *   * Params from {@link UpdateRequest} are converted to http request  * parameters. When params change between UpdateRequests a new HTTP  * request is started.  *   * Although any SolrClient request can be made with this implementation, it is  * only recommended to use ConcurrentUpdateSolrClient with /update  * requests. The class {@link HttpSolrClient} is better suited for the  * query interface.  */
end_comment
begin_class
DECL|class|ConcurrentUpdateSolrClient
specifier|public
class|class
name|ConcurrentUpdateSolrClient
extends|extends
name|SolrClient
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
name|HttpSolrClient
name|client
decl_stmt|;
DECL|field|queue
specifier|final
name|BlockingQueue
argument_list|<
name|Update
argument_list|>
name|queue
decl_stmt|;
DECL|field|scheduler
specifier|final
name|ExecutorService
name|scheduler
decl_stmt|;
DECL|field|runners
specifier|final
name|Queue
argument_list|<
name|Runner
argument_list|>
name|runners
decl_stmt|;
DECL|field|lock
specifier|volatile
name|CountDownLatch
name|lock
init|=
literal|null
decl_stmt|;
comment|// used to block everything
DECL|field|threadCount
specifier|final
name|int
name|threadCount
decl_stmt|;
DECL|field|shutdownExecutor
name|boolean
name|shutdownExecutor
init|=
literal|false
decl_stmt|;
DECL|field|pollQueueTime
name|int
name|pollQueueTime
init|=
literal|250
decl_stmt|;
DECL|field|streamDeletes
specifier|private
specifier|final
name|boolean
name|streamDeletes
decl_stmt|;
DECL|field|internalHttpClient
specifier|private
name|boolean
name|internalHttpClient
decl_stmt|;
DECL|field|connectionTimeout
specifier|private
specifier|volatile
name|Integer
name|connectionTimeout
decl_stmt|;
DECL|field|soTimeout
specifier|private
specifier|volatile
name|Integer
name|soTimeout
decl_stmt|;
comment|/**    * Uses an internally managed HttpClient instance.    *     * @param solrServerUrl    *          The Solr server URL    * @param queueSize    *          The buffer size before the documents are sent to the server    * @param threadCount    *          The number of background threads used to empty the queue    *              * @deprecated use {@link Builder} instead.    */
annotation|@
name|Deprecated
DECL|method|ConcurrentUpdateSolrClient
specifier|public
name|ConcurrentUpdateSolrClient
parameter_list|(
name|String
name|solrServerUrl
parameter_list|,
name|int
name|queueSize
parameter_list|,
name|int
name|threadCount
parameter_list|)
block|{
name|this
argument_list|(
name|solrServerUrl
argument_list|,
literal|null
argument_list|,
name|queueSize
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
name|shutdownExecutor
operator|=
literal|true
expr_stmt|;
name|internalHttpClient
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * @deprecated use {@link Builder} instead.    */
annotation|@
name|Deprecated
DECL|method|ConcurrentUpdateSolrClient
specifier|public
name|ConcurrentUpdateSolrClient
parameter_list|(
name|String
name|solrServerUrl
parameter_list|,
name|HttpClient
name|client
parameter_list|,
name|int
name|queueSize
parameter_list|,
name|int
name|threadCount
parameter_list|)
block|{
name|this
argument_list|(
name|solrServerUrl
argument_list|,
name|client
argument_list|,
name|queueSize
argument_list|,
name|threadCount
argument_list|,
name|ExecutorUtil
operator|.
name|newMDCAwareCachedThreadPool
argument_list|(
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"concurrentUpdateScheduler"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shutdownExecutor
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Uses the supplied HttpClient to send documents to the Solr server.    *     * @deprecated use {@link Builder} instead.    */
annotation|@
name|Deprecated
DECL|method|ConcurrentUpdateSolrClient
specifier|public
name|ConcurrentUpdateSolrClient
parameter_list|(
name|String
name|solrServerUrl
parameter_list|,
name|HttpClient
name|client
parameter_list|,
name|int
name|queueSize
parameter_list|,
name|int
name|threadCount
parameter_list|,
name|ExecutorService
name|es
parameter_list|)
block|{
name|this
argument_list|(
name|solrServerUrl
argument_list|,
name|client
argument_list|,
name|queueSize
argument_list|,
name|threadCount
argument_list|,
name|es
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Uses the supplied HttpClient to send documents to the Solr server.    *     * @deprecated use {@link Builder} instead.  This will soon be a    * protected method, and will only be available for use in implementing subclasses.    */
annotation|@
name|Deprecated
DECL|method|ConcurrentUpdateSolrClient
specifier|public
name|ConcurrentUpdateSolrClient
parameter_list|(
name|String
name|solrServerUrl
parameter_list|,
name|HttpClient
name|client
parameter_list|,
name|int
name|queueSize
parameter_list|,
name|int
name|threadCount
parameter_list|,
name|ExecutorService
name|es
parameter_list|,
name|boolean
name|streamDeletes
parameter_list|)
block|{
name|this
operator|.
name|internalHttpClient
operator|=
operator|(
name|client
operator|==
literal|null
operator|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|solrServerUrl
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|client
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
operator|.
name|setFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|queueSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadCount
operator|=
name|threadCount
expr_stmt|;
name|runners
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|streamDeletes
operator|=
name|streamDeletes
expr_stmt|;
if|if
condition|(
name|es
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|=
name|es
expr_stmt|;
name|shutdownExecutor
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|scheduler
operator|=
name|ExecutorUtil
operator|.
name|newMDCAwareCachedThreadPool
argument_list|(
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"concurrentUpdateScheduler"
argument_list|)
argument_list|)
expr_stmt|;
name|shutdownExecutor
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getQueryParams
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getQueryParams
parameter_list|()
block|{
return|return
name|this
operator|.
name|client
operator|.
name|getQueryParams
argument_list|()
return|;
block|}
comment|/**    * Expert Method.    * @param queryParams set of param keys to only send via the query string    */
DECL|method|setQueryParams
specifier|public
name|void
name|setQueryParams
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queryParams
parameter_list|)
block|{
name|this
operator|.
name|client
operator|.
name|setQueryParams
argument_list|(
name|queryParams
argument_list|)
expr_stmt|;
block|}
comment|/**    * Opens a connection and sends everything...    */
DECL|class|Runner
class|class
name|Runner
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"starting runner: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// This loop is so we can continue if an element was added to the queue after the last runner exited.
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|sendUpdateStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
throw|throw
operator|(
name|OutOfMemoryError
operator|)
name|e
throw|;
block|}
name|handleError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|runners
init|)
block|{
comment|// check to see if anything else was added to the queue
if|if
condition|(
name|runners
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|scheduler
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
comment|// If there is something else to process, keep last runner alive by staying in the loop.
block|}
else|else
block|{
name|runners
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|runners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// notify anyone waiting in blockUntilFinished
name|runners
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"finished: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Pull from the queue multiple times and streams over a single connection.
comment|// Exits on exception, interruption, or an empty queue to pull from.
comment|//
DECL|method|sendUpdateStream
name|void
name|sendUpdateStream
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HttpPost
name|method
init|=
literal|null
decl_stmt|;
name|HttpResponse
name|response
init|=
literal|null
decl_stmt|;
name|InputStream
name|rspBody
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Update
name|update
init|=
name|queue
operator|.
name|poll
argument_list|(
name|pollQueueTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|update
operator|==
literal|null
condition|)
break|break;
name|String
name|contentType
init|=
name|client
operator|.
name|requestWriter
operator|.
name|getUpdateContentType
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isXml
init|=
name|ClientUtils
operator|.
name|TEXT_XML
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
specifier|final
name|ModifiableSolrParams
name|origParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|update
operator|.
name|getRequest
argument_list|()
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|EntityTemplate
name|template
init|=
operator|new
name|EntityTemplate
argument_list|(
operator|new
name|ContentProducer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|isXml
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<stream>"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
comment|// can be anything
block|}
name|Update
name|upd
init|=
name|update
decl_stmt|;
while|while
condition|(
name|upd
operator|!=
literal|null
condition|)
block|{
name|UpdateRequest
name|req
init|=
name|upd
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|SolrParams
name|currentParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|origParams
operator|.
name|toNamedList
argument_list|()
operator|.
name|equals
argument_list|(
name|currentParams
operator|.
name|toNamedList
argument_list|()
argument_list|)
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|upd
argument_list|)
expr_stmt|;
comment|// params are different, push back to queue
break|break;
block|}
name|client
operator|.
name|requestWriter
operator|.
name|write
argument_list|(
name|req
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|isXml
condition|)
block|{
comment|// check for commit or optimize
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|String
name|fmt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|UpdateParams
operator|.
name|OPTIMIZE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|fmt
operator|=
literal|"<optimize waitSearcher=\"%s\" />"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|UpdateParams
operator|.
name|COMMIT
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|fmt
operator|=
literal|"<commit waitSearcher=\"%s\" />"
expr_stmt|;
block|}
if|if
condition|(
name|fmt
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|content
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|fmt
argument_list|,
name|params
operator|.
name|getBool
argument_list|(
name|UpdateParams
operator|.
name|WAIT_SEARCHER
argument_list|,
literal|false
argument_list|)
operator|+
literal|""
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|pollQueueTime
operator|>
literal|0
operator|&&
name|threadCount
operator|==
literal|1
operator|&&
name|req
operator|.
name|isLastDocInBatch
argument_list|()
condition|)
block|{
comment|// no need to wait to see another doc in the queue if we've hit the last doc in a batch
name|upd
operator|=
name|queue
operator|.
name|poll
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upd
operator|=
name|queue
operator|.
name|poll
argument_list|(
name|pollQueueTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isXml
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</stream>"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// The parser 'wt=' and 'version=' params are used instead of the
comment|// original params
name|ModifiableSolrParams
name|requestParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|origParams
argument_list|)
decl_stmt|;
name|requestParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|client
operator|.
name|parser
operator|.
name|getWriterType
argument_list|()
argument_list|)
expr_stmt|;
name|requestParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|,
name|client
operator|.
name|parser
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|basePath
init|=
name|client
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|update
operator|.
name|getCollection
argument_list|()
operator|!=
literal|null
condition|)
name|basePath
operator|+=
literal|"/"
operator|+
name|update
operator|.
name|getCollection
argument_list|()
expr_stmt|;
name|method
operator|=
operator|new
name|HttpPost
argument_list|(
name|basePath
operator|+
literal|"/update"
operator|+
name|requestParams
operator|.
name|toQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
operator|.
name|Builder
name|requestConfigBuilder
init|=
name|HttpClientUtil
operator|.
name|createDefaultRequestConfigBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|soTimeout
operator|!=
literal|null
condition|)
block|{
name|requestConfigBuilder
operator|.
name|setSocketTimeout
argument_list|(
name|soTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connectionTimeout
operator|!=
literal|null
condition|)
block|{
name|requestConfigBuilder
operator|.
name|setConnectTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
name|method
operator|.
name|setConfig
argument_list|(
name|requestConfigBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setEntity
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|method
operator|.
name|addHeader
argument_list|(
literal|"User-Agent"
argument_list|,
name|HttpSolrClient
operator|.
name|AGENT
argument_list|)
expr_stmt|;
name|method
operator|.
name|addHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|getHttpClient
argument_list|()
operator|.
name|execute
argument_list|(
name|method
argument_list|,
name|HttpClientUtil
operator|.
name|createNewHttpClientRequestContext
argument_list|()
argument_list|)
expr_stmt|;
name|rspBody
operator|=
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|int
name|statusCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusCode
operator|!=
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n\n\n\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"request: "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|SolrException
name|solrExc
init|=
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|getErrorCode
argument_list|(
name|statusCode
argument_list|)
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// parse out the metadata from the SolrException
try|try
block|{
name|String
name|encoding
init|=
literal|"UTF-8"
decl_stmt|;
comment|// default
if|if
condition|(
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentType
argument_list|()
operator|.
name|getElements
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|NameValuePair
name|param
init|=
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentType
argument_list|()
operator|.
name|getElements
argument_list|()
index|[
literal|0
index|]
operator|.
name|getParameterByName
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|encoding
operator|=
name|param
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resp
init|=
name|client
operator|.
name|parser
operator|.
name|processResponse
argument_list|(
name|rspBody
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|error
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|solrExc
operator|.
name|setMetadata
argument_list|(
operator|(
name|NamedList
argument_list|<
name|String
argument_list|>
operator|)
name|error
operator|.
name|get
argument_list|(
literal|"metadata"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|// don't want to fail to report error if parsing the response fails
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse error response from "
operator|+
name|client
operator|.
name|getBaseURL
argument_list|()
operator|+
literal|" due to: "
operator|+
name|exc
argument_list|)
expr_stmt|;
block|}
name|handleError
argument_list|(
name|solrExc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onSuccess
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|Utils
operator|.
name|consumeFully
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error consuming and closing http response stream."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// *must* be called with runners monitor held, e.g. synchronized(runners){ addRunner() }
DECL|method|addRunner
specifier|private
name|void
name|addRunner
parameter_list|()
block|{
name|MDC
operator|.
name|put
argument_list|(
literal|"ConcurrentUpdateSolrClient.url"
argument_list|,
name|client
operator|.
name|getBaseURL
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Runner
name|r
init|=
operator|new
name|Runner
argument_list|()
decl_stmt|;
name|runners
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|execute
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// this can throw an exception if the scheduler has been shutdown, but that should be fine.
block|}
finally|finally
block|{
name|MDC
operator|.
name|remove
argument_list|(
literal|"ConcurrentUpdateSolrClient.url"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Class representing an UpdateRequest and an optional collection.    */
DECL|class|Update
class|class
name|Update
block|{
DECL|field|request
name|UpdateRequest
name|request
decl_stmt|;
DECL|field|collection
name|String
name|collection
decl_stmt|;
comment|/**      *       * @param request the update request.      * @param collection The collection, can be null.      */
DECL|method|Update
specifier|public
name|Update
parameter_list|(
name|UpdateRequest
name|request
parameter_list|,
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
comment|/**      * @return the update request.      */
DECL|method|getRequest
specifier|public
name|UpdateRequest
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
DECL|method|setRequest
specifier|public
name|void
name|setRequest
parameter_list|(
name|UpdateRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
comment|/**      * @return the collection, can be null.      */
DECL|method|getCollection
specifier|public
name|String
name|getCollection
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
DECL|method|setCollection
specifier|public
name|void
name|setCollection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|request
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|request
parameter_list|(
specifier|final
name|SolrRequest
name|request
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|request
operator|instanceof
name|UpdateRequest
operator|)
condition|)
block|{
return|return
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|,
name|collection
argument_list|)
return|;
block|}
name|UpdateRequest
name|req
init|=
operator|(
name|UpdateRequest
operator|)
name|request
decl_stmt|;
comment|// this happens for commit...
if|if
condition|(
name|streamDeletes
condition|)
block|{
if|if
condition|(
operator|(
name|req
operator|.
name|getDocuments
argument_list|()
operator|==
literal|null
operator|||
name|req
operator|.
name|getDocuments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|req
operator|.
name|getDeleteById
argument_list|()
operator|==
literal|null
operator|||
name|req
operator|.
name|getDeleteById
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|req
operator|.
name|getDeleteByIdMap
argument_list|()
operator|==
literal|null
operator|||
name|req
operator|.
name|getDeleteByIdMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|req
operator|.
name|getDeleteQuery
argument_list|()
operator|==
literal|null
condition|)
block|{
name|blockUntilFinished
argument_list|()
expr_stmt|;
return|return
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|,
name|collection
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|req
operator|.
name|getDocuments
argument_list|()
operator|==
literal|null
operator|||
name|req
operator|.
name|getDocuments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|blockUntilFinished
argument_list|()
expr_stmt|;
return|return
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|,
name|collection
argument_list|)
return|;
block|}
block|}
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
comment|// check if it is waiting for the searcher
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|UpdateParams
operator|.
name|WAIT_SEARCHER
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"blocking for commit/optimize"
argument_list|)
expr_stmt|;
name|blockUntilFinished
argument_list|()
expr_stmt|;
comment|// empty the queue
return|return
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|,
name|collection
argument_list|)
return|;
block|}
block|}
try|try
block|{
name|CountDownLatch
name|tmpLock
init|=
name|lock
decl_stmt|;
if|if
condition|(
name|tmpLock
operator|!=
literal|null
condition|)
block|{
name|tmpLock
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|Update
name|update
init|=
operator|new
name|Update
argument_list|(
name|req
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|queue
operator|.
name|offer
argument_list|(
name|update
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
synchronized|synchronized
init|(
name|runners
init|)
block|{
comment|// see if queue is half full and we can add more runners
comment|// special case: if only using a threadCount of 1 and the queue
comment|// is filling up, allow 1 add'l runner to help process the queue
if|if
condition|(
name|runners
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|queue
operator|.
name|remainingCapacity
argument_list|()
operator|<
name|queue
operator|.
name|size
argument_list|()
operator|&&
name|runners
operator|.
name|size
argument_list|()
operator|<
name|threadCount
operator|)
condition|)
block|{
comment|// We need more runners, so start a new one.
name|addRunner
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// break out of the retry loop if we added the element to the queue
comment|// successfully, *and*
comment|// while we are still holding the runners lock to prevent race
comment|// conditions.
if|if
condition|(
name|success
condition|)
break|break;
block|}
block|}
comment|// Retry to add to the queue w/o the runners lock held (else we risk
comment|// temporary deadlock)
comment|// This retry could also fail because
comment|// 1) existing runners were not able to take off any new elements in the
comment|// queue
comment|// 2) the queue was filled back up since our last try
comment|// If we succeed, the queue may have been completely emptied, and all
comment|// runners stopped.
comment|// In all cases, we should loop back to the top to see if we need to
comment|// start more runners.
comment|//
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|success
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|update
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// RETURN A DUMMY result
name|NamedList
argument_list|<
name|Object
argument_list|>
name|dummy
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|dummy
operator|.
name|add
argument_list|(
literal|"NOTE"
argument_list|,
literal|"the request is processed in a background stream"
argument_list|)
expr_stmt|;
return|return
name|dummy
return|;
block|}
DECL|method|blockUntilFinished
specifier|public
specifier|synchronized
name|void
name|blockUntilFinished
parameter_list|()
block|{
name|lock
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|runners
init|)
block|{
comment|// NOTE: if the executor is shut down, runners may never become empty (a scheduled task may never be run,
comment|// which means it would never remove itself from the runners list.  This is why we don't wait forever
comment|// and periodically check if the scheduler is shutting down.
while|while
condition|(
operator|!
name|runners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|runners
operator|.
name|wait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scheduler
operator|.
name|isShutdown
argument_list|()
condition|)
break|break;
comment|// Need to check if the queue is empty before really considering this is finished (SOLR-4260)
name|int
name|queueSize
init|=
name|queue
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|queueSize
operator|>
literal|0
operator|&&
name|runners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: can this still happen?
name|log
operator|.
name|warn
argument_list|(
literal|"No more runners, but queue still has "
operator|+
name|queueSize
operator|+
literal|" adding more runners to process remaining requests on queue"
argument_list|)
expr_stmt|;
name|addRunner
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|lock
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|handleError
specifier|public
name|void
name|handleError
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"error"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|/**    * Intended to be used as an extension point for doing post processing after a request completes.    */
DECL|method|onSuccess
specifier|public
name|void
name|onSuccess
parameter_list|(
name|HttpResponse
name|resp
parameter_list|)
block|{
comment|// no-op by design, override to add functionality
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|internalHttpClient
condition|)
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
name|shutdownExecutor
condition|)
block|{
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|scheduler
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|scheduler
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
name|log
operator|.
name|error
argument_list|(
literal|"ExecutorService did not terminate"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setConnectionTimeout
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|timeout
expr_stmt|;
block|}
comment|/**    * set soTimeout (read timeout) on the underlying HttpConnectionManager. This is desirable for queries, but probably    * not for indexing.    */
DECL|method|setSoTimeout
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|soTimeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|shutdownNow
specifier|public
name|void
name|shutdownNow
parameter_list|()
block|{
if|if
condition|(
name|internalHttpClient
condition|)
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
name|shutdownExecutor
condition|)
block|{
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// Cancel currently executing tasks
try|try
block|{
if|if
condition|(
operator|!
name|scheduler
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
name|log
operator|.
name|error
argument_list|(
literal|"ExecutorService did not terminate"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setParser
specifier|public
name|void
name|setParser
parameter_list|(
name|ResponseParser
name|responseParser
parameter_list|)
block|{
name|client
operator|.
name|setParser
argument_list|(
name|responseParser
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param pollQueueTime time for an open connection to wait for updates when    * the queue is empty.     */
DECL|method|setPollQueueTime
specifier|public
name|void
name|setPollQueueTime
parameter_list|(
name|int
name|pollQueueTime
parameter_list|)
block|{
name|this
operator|.
name|pollQueueTime
operator|=
name|pollQueueTime
expr_stmt|;
block|}
DECL|method|setRequestWriter
specifier|public
name|void
name|setRequestWriter
parameter_list|(
name|RequestWriter
name|requestWriter
parameter_list|)
block|{
name|client
operator|.
name|setRequestWriter
argument_list|(
name|requestWriter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs {@link ConcurrentUpdateSolrClient} instances from provided configuration.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|baseSolrUrl
specifier|private
name|String
name|baseSolrUrl
decl_stmt|;
DECL|field|httpClient
specifier|private
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|queueSize
specifier|private
name|int
name|queueSize
decl_stmt|;
DECL|field|threadCount
specifier|private
name|int
name|threadCount
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|streamDeletes
specifier|private
name|boolean
name|streamDeletes
decl_stmt|;
comment|/**      * Create a Builder object, based on the provided Solr URL.      *       * @param baseSolrUrl the base URL of the Solr server that will be targeted by any created clients.      */
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|baseSolrUrl
parameter_list|)
block|{
name|this
operator|.
name|baseSolrUrl
operator|=
name|baseSolrUrl
expr_stmt|;
block|}
comment|/**      * Provides a {@link HttpClient} for the builder to use when creating clients.      */
DECL|method|withHttpClient
specifier|public
name|Builder
name|withHttpClient
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|)
block|{
name|this
operator|.
name|httpClient
operator|=
name|httpClient
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The number of documents to batch together before sending to Solr.      */
DECL|method|withQueueSize
specifier|public
name|Builder
name|withQueueSize
parameter_list|(
name|int
name|queueSize
parameter_list|)
block|{
if|if
condition|(
name|queueSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"queueSize must be a positive integer."
argument_list|)
throw|;
block|}
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The number of threads used to empty {@link ConcurrentUpdateSolrClient}s queue.      */
DECL|method|withThreadCount
specifier|public
name|Builder
name|withThreadCount
parameter_list|(
name|int
name|threadCount
parameter_list|)
block|{
if|if
condition|(
name|threadCount
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"threadCount must be a positive integer."
argument_list|)
throw|;
block|}
name|this
operator|.
name|threadCount
operator|=
name|threadCount
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Provides the {@link ExecutorService} for clients to use when servicing requests.      */
DECL|method|withExecutorService
specifier|public
name|Builder
name|withExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures created clients to always stream delete requests.      */
DECL|method|alwaysStreamDeletes
specifier|public
name|Builder
name|alwaysStreamDeletes
parameter_list|()
block|{
name|this
operator|.
name|streamDeletes
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures created clients to not stream delete requests.      */
DECL|method|neverStreamDeletes
specifier|public
name|Builder
name|neverStreamDeletes
parameter_list|()
block|{
name|this
operator|.
name|streamDeletes
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Create a {@link ConcurrentUpdateSolrClient} based on the provided configuration options.      */
DECL|method|build
specifier|public
name|ConcurrentUpdateSolrClient
name|build
parameter_list|()
block|{
if|if
condition|(
name|baseSolrUrl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create HttpSolrClient without a valid baseSolrUrl!"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ConcurrentUpdateSolrClient
argument_list|(
name|baseSolrUrl
argument_list|,
name|httpClient
argument_list|,
name|queueSize
argument_list|,
name|threadCount
argument_list|,
name|executorService
argument_list|,
name|streamDeletes
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
