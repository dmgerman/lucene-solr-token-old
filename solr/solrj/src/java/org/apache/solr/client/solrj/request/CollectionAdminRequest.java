begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|SolrIdentifierValidator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_comment
comment|/**  * This class is experimental and subject to change.  *  * @since solr 4.5  */
end_comment
begin_class
DECL|class|CollectionAdminRequest
specifier|public
specifier|abstract
class|class
name|CollectionAdminRequest
parameter_list|<
name|T
extends|extends
name|CollectionAdminResponse
parameter_list|>
extends|extends
name|SolrRequest
argument_list|<
name|T
argument_list|>
block|{
DECL|field|action
specifier|protected
specifier|final
name|CollectionAction
name|action
decl_stmt|;
DECL|field|PROPERTY_PREFIX
specifier|private
specifier|static
name|String
name|PROPERTY_PREFIX
init|=
literal|"property."
decl_stmt|;
DECL|method|CollectionAdminRequest
specifier|public
name|CollectionAdminRequest
parameter_list|(
name|CollectionAction
name|action
parameter_list|)
block|{
name|this
argument_list|(
literal|"/admin/collections"
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
DECL|method|CollectionAdminRequest
specifier|public
name|CollectionAdminRequest
parameter_list|(
name|String
name|path
parameter_list|,
name|CollectionAction
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no action specified!"
argument_list|)
throw|;
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|getContentStreams
specifier|public
name|Collection
argument_list|<
name|ContentStream
argument_list|>
name|getContentStreams
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
DECL|method|addProperties
specifier|protected
name|void
name|addProperties
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
for|for
control|(
name|String
name|propertyName
range|:
name|props
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|params
operator|.
name|set
argument_list|(
name|PROPERTY_PREFIX
operator|+
name|propertyName
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Base class for asynchronous collection admin requests    */
DECL|class|AsyncCollectionAdminRequest
specifier|public
specifier|abstract
specifier|static
class|class
name|AsyncCollectionAdminRequest
extends|extends
name|CollectionAdminRequest
argument_list|<
name|CollectionAdminResponse
argument_list|>
block|{
DECL|method|AsyncCollectionAdminRequest
specifier|public
name|AsyncCollectionAdminRequest
parameter_list|(
name|CollectionAction
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|CollectionAdminResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|CollectionAdminResponse
argument_list|()
return|;
block|}
DECL|method|generateAsyncId
specifier|private
specifier|static
name|String
name|generateAsyncId
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|asyncId
specifier|protected
name|String
name|asyncId
init|=
literal|null
decl_stmt|;
DECL|method|getAsyncId
specifier|public
name|String
name|getAsyncId
parameter_list|()
block|{
return|return
name|asyncId
return|;
block|}
comment|/**      * @deprecated Use {@link #processAsync(String, SolrClient)} or {@link #processAsync(SolrClient)}      */
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
specifier|abstract
name|AsyncCollectionAdminRequest
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
function_decl|;
comment|/**      * Process this request asynchronously, generating and returning a request id      * @param client a Solr client      * @return the request id      * @see CollectionAdminRequest.RequestStatus      */
DECL|method|processAsync
specifier|public
name|String
name|processAsync
parameter_list|(
name|SolrClient
name|client
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
return|return
name|processAsync
argument_list|(
name|generateAsyncId
argument_list|()
argument_list|,
name|client
argument_list|)
return|;
block|}
comment|/**      * Process this request asynchronously, using a specified request id      * @param asyncId the request id      * @param client a Solr client      * @return the request id      */
DECL|method|processAsync
specifier|public
name|String
name|processAsync
parameter_list|(
name|String
name|asyncId
parameter_list|,
name|SolrClient
name|client
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|this
operator|.
name|asyncId
operator|=
name|asyncId
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resp
init|=
name|client
operator|.
name|request
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|get
argument_list|(
literal|"error"
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
operator|(
name|String
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"error"
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|(
name|String
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"requestid"
argument_list|)
return|;
block|}
comment|/**      * Send this request to a Solr server, and wait (up to a timeout) for the request to      * complete or fail      * @param client a Solr client      * @param timeoutSeconds the maximum time to wait      * @return the status of the request on completion or timeout      */
DECL|method|processAndWait
specifier|public
name|RequestStatusState
name|processAndWait
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|long
name|timeoutSeconds
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
return|return
name|processAndWait
argument_list|(
name|generateAsyncId
argument_list|()
argument_list|,
name|client
argument_list|,
name|timeoutSeconds
argument_list|)
return|;
block|}
comment|/**      * Send this request to a Solr server, and wait (up to a timeout) for the request to      * complete or fail      * @param asyncId an id for the request      * @param client a Solr client      * @param timeoutSeconds the maximum time to wait      * @return the status of the request on completion or timeout      */
DECL|method|processAndWait
specifier|public
name|RequestStatusState
name|processAndWait
parameter_list|(
name|String
name|asyncId
parameter_list|,
name|SolrClient
name|client
parameter_list|,
name|long
name|timeoutSeconds
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|processAsync
argument_list|(
name|asyncId
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|requestStatus
argument_list|(
name|asyncId
argument_list|)
operator|.
name|waitFor
argument_list|(
name|client
argument_list|,
name|timeoutSeconds
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CommonAdminParams
operator|.
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
DECL|class|AsyncCollectionSpecificAdminRequest
specifier|protected
specifier|abstract
specifier|static
class|class
name|AsyncCollectionSpecificAdminRequest
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|method|AsyncCollectionSpecificAdminRequest
specifier|public
name|AsyncCollectionSpecificAdminRequest
parameter_list|(
name|CollectionAction
name|action
parameter_list|,
name|String
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
specifier|abstract
name|AsyncCollectionSpecificAdminRequest
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must call setCollectionName() on this request"
argument_list|)
throw|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|collection
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
DECL|class|AsyncShardSpecificAdminRequest
specifier|protected
specifier|abstract
specifier|static
class|class
name|AsyncShardSpecificAdminRequest
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|field|shard
specifier|protected
name|String
name|shard
decl_stmt|;
DECL|method|AsyncShardSpecificAdminRequest
specifier|public
name|AsyncShardSpecificAdminRequest
parameter_list|(
name|CollectionAction
name|action
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
specifier|abstract
name|AsyncShardSpecificAdminRequest
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
function_decl|;
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
specifier|abstract
name|AsyncShardSpecificAdminRequest
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must call setCollectionName() on this request"
argument_list|)
throw|;
if|if
condition|(
name|shard
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must call setShardName() on this request"
argument_list|)
throw|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|shard
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
DECL|class|ShardSpecificAdminRequest
specifier|protected
specifier|abstract
specifier|static
class|class
name|ShardSpecificAdminRequest
extends|extends
name|CollectionAdminRequest
block|{
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|field|shard
specifier|protected
name|String
name|shard
decl_stmt|;
DECL|method|ShardSpecificAdminRequest
specifier|public
name|ShardSpecificAdminRequest
parameter_list|(
name|CollectionAction
name|action
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
specifier|abstract
name|ShardSpecificAdminRequest
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
function_decl|;
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
specifier|abstract
name|ShardSpecificAdminRequest
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must call setCollectionName() on this request"
argument_list|)
throw|;
if|if
condition|(
name|shard
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must call setShardName() on this request"
argument_list|)
throw|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|shard
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|SolrResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|CollectionAdminResponse
argument_list|()
return|;
block|}
block|}
comment|//---------------------------------------------------------------------------------------
comment|//
comment|//---------------------------------------------------------------------------------------
DECL|class|CollectionAdminRoleRequest
specifier|protected
specifier|abstract
specifier|static
class|class
name|CollectionAdminRoleRequest
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|node
specifier|protected
name|String
name|node
decl_stmt|;
DECL|field|role
specifier|protected
name|String
name|role
decl_stmt|;
DECL|method|CollectionAdminRoleRequest
specifier|public
name|CollectionAdminRoleRequest
parameter_list|(
name|CollectionAction
name|action
parameter_list|,
name|String
name|node
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAsyncId
specifier|public
name|CollectionAdminRoleRequest
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setNode
specifier|public
specifier|abstract
name|CollectionAdminRoleRequest
name|setNode
parameter_list|(
name|String
name|node
parameter_list|)
function_decl|;
DECL|method|getNode
specifier|public
name|String
name|getNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|node
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setRole
specifier|public
specifier|abstract
name|CollectionAdminRoleRequest
name|setRole
parameter_list|(
name|String
name|role
parameter_list|)
function_decl|;
DECL|method|getRole
specifier|public
name|String
name|getRole
parameter_list|()
block|{
return|return
name|this
operator|.
name|role
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"role"
argument_list|,
name|this
operator|.
name|role
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"node"
argument_list|,
name|this
operator|.
name|node
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
comment|/** Specific Collection API call implementations **/
comment|/**    * Returns a SolrRequest for creating a collection    * @param collection the collection name    * @param config     the collection config    * @param numShards  the number of shards in the collection    * @param numReplicas the replication factor of the collection    */
DECL|method|createCollection
specifier|public
specifier|static
name|Create
name|createCollection
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|config
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|numReplicas
parameter_list|)
block|{
return|return
operator|new
name|Create
argument_list|(
name|collection
argument_list|,
name|config
argument_list|,
name|numShards
argument_list|,
name|numReplicas
argument_list|)
return|;
block|}
comment|// CREATE request
DECL|class|Create
specifier|public
specifier|static
class|class
name|Create
extends|extends
name|AsyncCollectionSpecificAdminRequest
block|{
DECL|field|configName
specifier|protected
name|String
name|configName
init|=
literal|null
decl_stmt|;
DECL|field|createNodeSet
specifier|protected
name|String
name|createNodeSet
init|=
literal|null
decl_stmt|;
DECL|field|routerName
specifier|protected
name|String
name|routerName
decl_stmt|;
DECL|field|shards
specifier|protected
name|String
name|shards
decl_stmt|;
DECL|field|routerField
specifier|protected
name|String
name|routerField
decl_stmt|;
DECL|field|numShards
specifier|protected
name|Integer
name|numShards
decl_stmt|;
DECL|field|maxShardsPerNode
specifier|protected
name|Integer
name|maxShardsPerNode
decl_stmt|;
DECL|field|replicationFactor
specifier|protected
name|Integer
name|replicationFactor
decl_stmt|;
DECL|field|properties
specifier|private
name|Properties
name|properties
decl_stmt|;
DECL|field|autoAddReplicas
specifier|protected
name|Boolean
name|autoAddReplicas
decl_stmt|;
DECL|field|stateFormat
specifier|protected
name|Integer
name|stateFormat
decl_stmt|;
DECL|field|rule
DECL|field|snitch
specifier|private
name|String
index|[]
name|rule
decl_stmt|,
name|snitch
decl_stmt|;
comment|/**      * @deprecated Use {@link #createCollection(String, String, int, int)}      */
annotation|@
name|Deprecated
DECL|method|Create
specifier|public
name|Create
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Create
specifier|private
name|Create
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|config
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|numReplicas
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CREATE
argument_list|,
name|SolrIdentifierValidator
operator|.
name|validateCollectionName
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|configName
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|numShards
operator|=
name|numShards
expr_stmt|;
name|this
operator|.
name|replicationFactor
operator|=
name|numReplicas
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setConfigName
specifier|public
name|Create
name|setConfigName
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|this
operator|.
name|configName
operator|=
name|config
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setCreateNodeSet
specifier|public
name|Create
name|setCreateNodeSet
parameter_list|(
name|String
name|nodeSet
parameter_list|)
block|{
name|this
operator|.
name|createNodeSet
operator|=
name|nodeSet
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRouterName
specifier|public
name|Create
name|setRouterName
parameter_list|(
name|String
name|routerName
parameter_list|)
block|{
name|this
operator|.
name|routerName
operator|=
name|routerName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRouterField
specifier|public
name|Create
name|setRouterField
parameter_list|(
name|String
name|routerField
parameter_list|)
block|{
name|this
operator|.
name|routerField
operator|=
name|routerField
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setNumShards
specifier|public
name|Create
name|setNumShards
parameter_list|(
name|Integer
name|numShards
parameter_list|)
block|{
name|this
operator|.
name|numShards
operator|=
name|numShards
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMaxShardsPerNode
specifier|public
name|Create
name|setMaxShardsPerNode
parameter_list|(
name|Integer
name|numShards
parameter_list|)
block|{
name|this
operator|.
name|maxShardsPerNode
operator|=
name|numShards
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setAutoAddReplicas
specifier|public
name|Create
name|setAutoAddReplicas
parameter_list|(
name|boolean
name|autoAddReplicas
parameter_list|)
block|{
name|this
operator|.
name|autoAddReplicas
operator|=
name|autoAddReplicas
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setReplicationFactor
specifier|public
name|Create
name|setReplicationFactor
parameter_list|(
name|Integer
name|repl
parameter_list|)
block|{
name|this
operator|.
name|replicationFactor
operator|=
name|repl
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setStateFormat
specifier|public
name|Create
name|setStateFormat
parameter_list|(
name|Integer
name|stateFormat
parameter_list|)
block|{
name|this
operator|.
name|stateFormat
operator|=
name|stateFormat
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRule
specifier|public
name|Create
name|setRule
parameter_list|(
name|String
modifier|...
name|s
parameter_list|)
block|{
name|this
operator|.
name|rule
operator|=
name|s
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setSnitch
specifier|public
name|Create
name|setSnitch
parameter_list|(
name|String
modifier|...
name|s
parameter_list|)
block|{
name|this
operator|.
name|snitch
operator|=
name|s
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getConfigName
specifier|public
name|String
name|getConfigName
parameter_list|()
block|{
return|return
name|configName
return|;
block|}
DECL|method|getCreateNodeSet
specifier|public
name|String
name|getCreateNodeSet
parameter_list|()
block|{
return|return
name|createNodeSet
return|;
block|}
DECL|method|getRouterName
specifier|public
name|String
name|getRouterName
parameter_list|()
block|{
return|return
name|routerName
return|;
block|}
DECL|method|getShards
specifier|public
name|String
name|getShards
parameter_list|()
block|{
return|return
name|shards
return|;
block|}
DECL|method|getNumShards
specifier|public
name|Integer
name|getNumShards
parameter_list|()
block|{
return|return
name|numShards
return|;
block|}
DECL|method|getMaxShardsPerNode
specifier|public
name|Integer
name|getMaxShardsPerNode
parameter_list|()
block|{
return|return
name|maxShardsPerNode
return|;
block|}
DECL|method|getReplicationFactor
specifier|public
name|Integer
name|getReplicationFactor
parameter_list|()
block|{
return|return
name|replicationFactor
return|;
block|}
DECL|method|getAutoAddReplicas
specifier|public
name|Boolean
name|getAutoAddReplicas
parameter_list|()
block|{
return|return
name|autoAddReplicas
return|;
block|}
DECL|method|getStateFormat
specifier|public
name|Integer
name|getStateFormat
parameter_list|()
block|{
return|return
name|stateFormat
return|;
block|}
comment|/**      * Provide the name of the shards to be created, separated by commas      *       * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.      *       * @throws IllegalArgumentException if any of the shard names contain invalid characters.      */
DECL|method|setShards
specifier|public
name|Create
name|setShards
parameter_list|(
name|String
name|shards
parameter_list|)
block|{
for|for
control|(
name|String
name|shard
range|:
name|shards
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|SolrIdentifierValidator
operator|.
name|validateShardName
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|shards
operator|=
name|shards
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Provide the name of the collection to be created.      *       * Collection names must consist entirely of periods, underscores and alphanumerics.  Other characters are not allowed.      *       * @throws IllegalArgumentException if the collection name contains invalid characters.      */
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|Create
name|setCollectionName
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|SolrException
block|{
name|this
operator|.
name|collection
operator|=
name|SolrIdentifierValidator
operator|.
name|validateCollectionName
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|Create
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getProperties
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties
specifier|public
name|Create
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"createNodeSet"
argument_list|,
name|createNodeSet
argument_list|)
expr_stmt|;
if|if
condition|(
name|numShards
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxShardsPerNode
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"maxShardsPerNode"
argument_list|,
name|maxShardsPerNode
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"router.name"
argument_list|,
name|routerName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|shards
argument_list|)
expr_stmt|;
if|if
condition|(
name|routerField
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"router.field"
argument_list|,
name|routerField
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replicationFactor
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"replicationFactor"
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoAddReplicas
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|AUTO_ADD_REPLICAS
argument_list|,
name|autoAddReplicas
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|addProperties
argument_list|(
name|params
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stateFormat
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|DocCollection
operator|.
name|STATE_FORMAT
argument_list|,
name|stateFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rule
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"rule"
argument_list|,
name|rule
argument_list|)
expr_stmt|;
if|if
condition|(
name|snitch
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"snitch"
argument_list|,
name|snitch
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to reload a collection    */
DECL|method|reloadCollection
specifier|public
specifier|static
name|Reload
name|reloadCollection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
return|return
operator|new
name|Reload
argument_list|(
name|collection
argument_list|)
return|;
block|}
comment|// RELOAD request
DECL|class|Reload
specifier|public
specifier|static
class|class
name|Reload
extends|extends
name|AsyncCollectionSpecificAdminRequest
block|{
comment|/**      * @deprecated use {@link #reloadCollection(String)}      */
annotation|@
name|Deprecated
DECL|method|Reload
specifier|public
name|Reload
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|RELOAD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Reload
specifier|private
name|Reload
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|RELOAD
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|Reload
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|Reload
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/*    * Returns a RebalanceLeaders object to rebalance leaders for a collection    */
DECL|method|rebalanceLeaders
specifier|public
specifier|static
name|RebalanceLeaders
name|rebalanceLeaders
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
return|return
operator|new
name|RebalanceLeaders
argument_list|(
name|collection
argument_list|)
return|;
block|}
DECL|class|RebalanceLeaders
specifier|public
specifier|static
class|class
name|RebalanceLeaders
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|maxAtOnce
specifier|protected
name|Integer
name|maxAtOnce
decl_stmt|;
DECL|field|maxWaitSeconds
specifier|protected
name|Integer
name|maxWaitSeconds
decl_stmt|;
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|method|setMaxAtOnce
specifier|public
name|RebalanceLeaders
name|setMaxAtOnce
parameter_list|(
name|Integer
name|maxAtOnce
parameter_list|)
block|{
name|this
operator|.
name|maxAtOnce
operator|=
name|maxAtOnce
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMaxWaitSeconds
specifier|public
name|RebalanceLeaders
name|setMaxWaitSeconds
parameter_list|(
name|Integer
name|maxWaitSeconds
parameter_list|)
block|{
name|this
operator|.
name|maxWaitSeconds
operator|=
name|maxWaitSeconds
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getMaxAtOnce
specifier|public
name|Integer
name|getMaxAtOnce
parameter_list|()
block|{
return|return
name|maxAtOnce
return|;
block|}
DECL|method|getMaxWaitSeconds
specifier|public
name|Integer
name|getMaxWaitSeconds
parameter_list|()
block|{
return|return
name|maxWaitSeconds
return|;
block|}
DECL|method|RebalanceLeaders
specifier|public
name|RebalanceLeaders
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|REBALANCELEADERS
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAsyncId
specifier|public
name|RebalanceLeaders
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|maxWaitSeconds
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"maxWaitSeconds"
argument_list|,
name|this
operator|.
name|maxWaitSeconds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|maxAtOnce
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"maxAtOnce"
argument_list|,
name|this
operator|.
name|maxAtOnce
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to delete a collection    */
DECL|method|deleteCollection
specifier|public
specifier|static
name|Delete
name|deleteCollection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
return|return
operator|new
name|Delete
argument_list|(
name|collection
argument_list|)
return|;
block|}
comment|// DELETE request
DECL|class|Delete
specifier|public
specifier|static
class|class
name|Delete
extends|extends
name|AsyncCollectionSpecificAdminRequest
block|{
comment|/**      * @deprecated Use {@link #deleteCollection(String)}      */
annotation|@
name|Deprecated
DECL|method|Delete
specifier|public
name|Delete
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Delete
specifier|private
name|Delete
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETE
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|Delete
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|Delete
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|method|backupCollection
specifier|public
specifier|static
name|Backup
name|backupCollection
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|backupName
parameter_list|)
block|{
return|return
operator|new
name|Backup
argument_list|(
name|collection
argument_list|,
name|backupName
argument_list|)
return|;
block|}
comment|// BACKUP request
DECL|class|Backup
specifier|public
specifier|static
class|class
name|Backup
extends|extends
name|AsyncCollectionSpecificAdminRequest
block|{
DECL|field|name
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|location
specifier|protected
name|String
name|location
decl_stmt|;
DECL|method|Backup
specifier|public
name|Backup
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|BACKUP
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|Backup
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|Backup
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getLocation
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
DECL|method|setLocation
specifier|public
name|Backup
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|//note: optional
return|return
name|params
return|;
block|}
block|}
DECL|method|restoreCollection
specifier|public
specifier|static
name|Restore
name|restoreCollection
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|backupName
parameter_list|)
block|{
return|return
operator|new
name|Restore
argument_list|(
name|collection
argument_list|,
name|backupName
argument_list|)
return|;
block|}
comment|// RESTORE request
DECL|class|Restore
specifier|public
specifier|static
class|class
name|Restore
extends|extends
name|AsyncCollectionSpecificAdminRequest
block|{
DECL|field|backupName
specifier|protected
specifier|final
name|String
name|backupName
decl_stmt|;
DECL|field|location
specifier|protected
name|String
name|location
decl_stmt|;
comment|// in common with collection creation:
DECL|field|configName
specifier|protected
name|String
name|configName
decl_stmt|;
DECL|field|maxShardsPerNode
specifier|protected
name|Integer
name|maxShardsPerNode
decl_stmt|;
DECL|field|replicationFactor
specifier|protected
name|Integer
name|replicationFactor
decl_stmt|;
DECL|field|autoAddReplicas
specifier|protected
name|Boolean
name|autoAddReplicas
decl_stmt|;
DECL|field|properties
specifier|protected
name|Properties
name|properties
decl_stmt|;
DECL|method|Restore
specifier|public
name|Restore
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|backupName
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|RESTORE
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|this
operator|.
name|backupName
operator|=
name|backupName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAsyncId
specifier|public
name|Restore
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setCollectionName
specifier|public
name|Restore
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getLocation
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
DECL|method|setLocation
specifier|public
name|Restore
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Collection creation params in common:
DECL|method|setConfigName
specifier|public
name|Restore
name|setConfigName
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|this
operator|.
name|configName
operator|=
name|config
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getConfigName
specifier|public
name|String
name|getConfigName
parameter_list|()
block|{
return|return
name|configName
return|;
block|}
DECL|method|getMaxShardsPerNode
specifier|public
name|Integer
name|getMaxShardsPerNode
parameter_list|()
block|{
return|return
name|maxShardsPerNode
return|;
block|}
DECL|method|setMaxShardsPerNode
specifier|public
name|Restore
name|setMaxShardsPerNode
parameter_list|(
name|int
name|maxShardsPerNode
parameter_list|)
block|{
name|this
operator|.
name|maxShardsPerNode
operator|=
name|maxShardsPerNode
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getReplicationFactor
specifier|public
name|Integer
name|getReplicationFactor
parameter_list|()
block|{
return|return
name|replicationFactor
return|;
block|}
DECL|method|setReplicationFactor
specifier|public
name|Restore
name|setReplicationFactor
parameter_list|(
name|Integer
name|repl
parameter_list|)
block|{
name|this
operator|.
name|replicationFactor
operator|=
name|repl
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getAutoAddReplicas
specifier|public
name|Boolean
name|getAutoAddReplicas
parameter_list|()
block|{
return|return
name|autoAddReplicas
return|;
block|}
DECL|method|setAutoAddReplicas
specifier|public
name|Restore
name|setAutoAddReplicas
parameter_list|(
name|boolean
name|autoAddReplicas
parameter_list|)
block|{
name|this
operator|.
name|autoAddReplicas
operator|=
name|autoAddReplicas
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getProperties
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties
specifier|public
name|Restore
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// TODO support createNodeSet, rule, snitch
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|//note: optional
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
name|configName
argument_list|)
expr_stmt|;
comment|//note: optional
if|if
condition|(
name|maxShardsPerNode
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"maxShardsPerNode"
argument_list|,
name|maxShardsPerNode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replicationFactor
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"replicationFactor"
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoAddReplicas
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|AUTO_ADD_REPLICAS
argument_list|,
name|autoAddReplicas
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|addProperties
argument_list|(
name|params
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to create a new shard in a collection    */
DECL|method|createShard
specifier|public
specifier|static
name|CreateShard
name|createShard
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
return|return
operator|new
name|CreateShard
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
return|;
block|}
comment|// CREATESHARD request
DECL|class|CreateShard
specifier|public
specifier|static
class|class
name|CreateShard
extends|extends
name|AsyncShardSpecificAdminRequest
block|{
DECL|field|nodeSet
specifier|protected
name|String
name|nodeSet
decl_stmt|;
DECL|field|properties
specifier|protected
name|Properties
name|properties
decl_stmt|;
DECL|method|setNodeSet
specifier|public
name|CreateShard
name|setNodeSet
parameter_list|(
name|String
name|nodeSet
parameter_list|)
block|{
name|this
operator|.
name|nodeSet
operator|=
name|nodeSet
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getNodeSet
specifier|public
name|String
name|getNodeSet
parameter_list|()
block|{
return|return
name|nodeSet
return|;
block|}
DECL|method|getProperties
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties
specifier|public
name|CreateShard
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @deprecated use {@link #createShard(String, String)}      */
annotation|@
name|Deprecated
DECL|method|CreateShard
specifier|public
name|CreateShard
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CREATESHARD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CreateShard
specifier|private
name|CreateShard
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CREATESHARD
argument_list|,
name|collection
argument_list|,
name|SolrIdentifierValidator
operator|.
name|validateShardName
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|CreateShard
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Provide the name of the shard to be created.      *       * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.      *       * @throws IllegalArgumentException if the shard name contains invalid characters.      */
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
name|CreateShard
name|setShardName
parameter_list|(
name|String
name|shardName
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|SolrIdentifierValidator
operator|.
name|validateShardName
argument_list|(
name|shardName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|CreateShard
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeSet
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"createNodeSet"
argument_list|,
name|nodeSet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|addProperties
argument_list|(
name|params
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to split a shard in a collection    */
DECL|method|splitShard
specifier|public
specifier|static
name|SplitShard
name|splitShard
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
return|return
operator|new
name|SplitShard
argument_list|(
name|collection
argument_list|)
return|;
block|}
comment|// SPLITSHARD request
DECL|class|SplitShard
specifier|public
specifier|static
class|class
name|SplitShard
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|field|ranges
specifier|protected
name|String
name|ranges
decl_stmt|;
DECL|field|splitKey
specifier|protected
name|String
name|splitKey
decl_stmt|;
DECL|field|shard
specifier|protected
name|String
name|shard
decl_stmt|;
DECL|field|properties
specifier|private
name|Properties
name|properties
decl_stmt|;
DECL|method|SplitShard
specifier|private
name|SplitShard
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|SPLITSHARD
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
comment|/**      * @deprecated Use {@link #splitShard(String)}      */
annotation|@
name|Deprecated
DECL|method|SplitShard
specifier|public
name|SplitShard
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|SPLITSHARD
argument_list|)
expr_stmt|;
block|}
DECL|method|setRanges
specifier|public
name|SplitShard
name|setRanges
parameter_list|(
name|String
name|ranges
parameter_list|)
block|{
name|this
operator|.
name|ranges
operator|=
name|ranges
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getRanges
specifier|public
name|String
name|getRanges
parameter_list|()
block|{
return|return
name|ranges
return|;
block|}
DECL|method|setSplitKey
specifier|public
name|SplitShard
name|setSplitKey
parameter_list|(
name|String
name|splitKey
parameter_list|)
block|{
name|this
operator|.
name|splitKey
operator|=
name|splitKey
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSplitKey
specifier|public
name|String
name|getSplitKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitKey
return|;
block|}
DECL|method|getProperties
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties
specifier|public
name|SplitShard
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|SplitShard
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setShardName
specifier|public
name|SplitShard
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|SplitShard
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must set collection name for this request."
argument_list|)
throw|;
block|}
name|params
operator|.
name|set
argument_list|(
name|CollectionAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|shard
operator|==
literal|null
operator|&&
name|this
operator|.
name|splitKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must set shardname OR splitkey for this request."
argument_list|)
throw|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shard"
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"split.key"
argument_list|,
name|this
operator|.
name|splitKey
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"ranges"
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|addProperties
argument_list|(
name|params
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to delete a shard from a collection    */
DECL|method|deleteShard
specifier|public
specifier|static
name|DeleteShard
name|deleteShard
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
return|return
operator|new
name|DeleteShard
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
return|;
block|}
comment|// DELETESHARD request
DECL|class|DeleteShard
specifier|public
specifier|static
class|class
name|DeleteShard
extends|extends
name|AsyncShardSpecificAdminRequest
block|{
DECL|field|deleteInstanceDir
specifier|private
name|Boolean
name|deleteInstanceDir
decl_stmt|;
DECL|field|deleteDataDir
specifier|private
name|Boolean
name|deleteDataDir
decl_stmt|;
comment|/**      * @deprecated Use {@link #deleteShard(String, String)}      */
annotation|@
name|Deprecated
DECL|method|DeleteShard
specifier|public
name|DeleteShard
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETESHARD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DeleteShard
specifier|private
name|DeleteShard
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETESHARD
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|getDeleteInstanceDir
specifier|public
name|Boolean
name|getDeleteInstanceDir
parameter_list|()
block|{
return|return
name|deleteInstanceDir
return|;
block|}
DECL|method|setDeleteInstanceDir
specifier|public
name|DeleteShard
name|setDeleteInstanceDir
parameter_list|(
name|Boolean
name|deleteInstanceDir
parameter_list|)
block|{
name|this
operator|.
name|deleteInstanceDir
operator|=
name|deleteInstanceDir
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getDeleteDataDir
specifier|public
name|Boolean
name|getDeleteDataDir
parameter_list|()
block|{
return|return
name|deleteDataDir
return|;
block|}
DECL|method|setDeleteDataDir
specifier|public
name|DeleteShard
name|setDeleteDataDir
parameter_list|(
name|Boolean
name|deleteDataDir
parameter_list|)
block|{
name|this
operator|.
name|deleteDataDir
operator|=
name|deleteDataDir
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|DeleteShard
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
name|DeleteShard
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|DeleteShard
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteInstanceDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
name|deleteInstanceDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteDataDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
name|deleteDataDir
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to force a leader election for a shard in a collection    *    * WARNING: This may cause data loss if the new leader does not contain updates    * acknowledged by the old leader.  Use only if leadership elections are entirely    * broken.    */
DECL|method|forceLeaderElection
specifier|public
specifier|static
name|ForceLeader
name|forceLeaderElection
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
return|return
operator|new
name|ForceLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
return|;
block|}
comment|// FORCELEADER request
DECL|class|ForceLeader
specifier|public
specifier|static
class|class
name|ForceLeader
extends|extends
name|ShardSpecificAdminRequest
block|{
comment|/**      * @deprecated Use {@link #forceLeaderElection(String, String)}      */
annotation|@
name|Deprecated
DECL|method|ForceLeader
specifier|public
name|ForceLeader
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|FORCELEADER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ForceLeader
specifier|private
name|ForceLeader
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|FORCELEADER
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|ForceLeader
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
name|ForceLeader
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * A response object for {@link RequestStatus} requests    */
DECL|class|RequestStatusResponse
specifier|public
specifier|static
class|class
name|RequestStatusResponse
extends|extends
name|CollectionAdminResponse
block|{
DECL|method|getRequestStatus
specifier|public
name|RequestStatusState
name|getRequestStatus
parameter_list|()
block|{
name|NamedList
name|innerResponse
init|=
operator|(
name|NamedList
operator|)
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
return|return
name|RequestStatusState
operator|.
name|fromKey
argument_list|(
operator|(
name|String
operator|)
name|innerResponse
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest for checking the status of an asynchronous request    *    * @see CollectionAdminRequest.AsyncCollectionAdminRequest    */
DECL|method|requestStatus
specifier|public
specifier|static
name|RequestStatus
name|requestStatus
parameter_list|(
name|String
name|requestId
parameter_list|)
block|{
return|return
operator|new
name|RequestStatus
argument_list|(
name|requestId
argument_list|)
return|;
block|}
comment|// REQUESTSTATUS request
DECL|class|RequestStatus
specifier|public
specifier|static
class|class
name|RequestStatus
extends|extends
name|CollectionAdminRequest
argument_list|<
name|RequestStatusResponse
argument_list|>
block|{
DECL|field|requestId
specifier|protected
name|String
name|requestId
init|=
literal|null
decl_stmt|;
DECL|method|RequestStatus
specifier|private
name|RequestStatus
parameter_list|(
name|String
name|requestId
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|REQUESTSTATUS
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
block|}
comment|/**      * @deprecated Use {@link #requestStatus(String)}      */
annotation|@
name|Deprecated
DECL|method|RequestStatus
specifier|public
name|RequestStatus
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|REQUESTSTATUS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setRequestId
specifier|public
name|RequestStatus
name|setRequestId
parameter_list|(
name|String
name|requestId
parameter_list|)
block|{
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getRequestId
specifier|public
name|String
name|getRequestId
parameter_list|()
block|{
return|return
name|this
operator|.
name|requestId
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must call setRequestId() on this request"
argument_list|)
throw|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|RequestStatusResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|RequestStatusResponse
argument_list|()
return|;
block|}
comment|/**      * Wait until the asynchronous request is either completed or failed, up to a timeout      * @param client a SolrClient      * @param timeoutSeconds the maximum time to wait in seconds      * @return the last seen state of the request      */
DECL|method|waitFor
specifier|public
name|RequestStatusState
name|waitFor
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|long
name|timeoutSeconds
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|long
name|finishTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
name|timeoutSeconds
argument_list|)
decl_stmt|;
name|RequestStatusState
name|state
init|=
name|RequestStatusState
operator|.
name|NOT_FOUND
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|finishTime
condition|)
block|{
name|state
operator|=
name|this
operator|.
name|process
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|RequestStatusState
operator|.
name|COMPLETED
operator|||
name|state
operator|==
name|RequestStatusState
operator|.
name|FAILED
condition|)
block|{
name|deleteAsyncId
argument_list|(
name|requestId
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to delete an asynchronous request status    */
DECL|method|deleteAsyncId
specifier|public
specifier|static
name|DeleteStatus
name|deleteAsyncId
parameter_list|(
name|String
name|requestId
parameter_list|)
block|{
return|return
operator|new
name|DeleteStatus
argument_list|(
name|requestId
argument_list|)
return|;
block|}
DECL|method|deleteAllAsyncIds
specifier|public
specifier|static
name|DeleteStatus
name|deleteAllAsyncIds
parameter_list|()
block|{
return|return
operator|new
name|DeleteStatus
argument_list|()
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|// DELETESTATUS request
DECL|class|DeleteStatus
specifier|public
specifier|static
class|class
name|DeleteStatus
extends|extends
name|CollectionAdminRequest
argument_list|<
name|CollectionAdminResponse
argument_list|>
block|{
DECL|field|requestId
specifier|protected
name|String
name|requestId
init|=
literal|null
decl_stmt|;
DECL|field|flush
specifier|protected
name|Boolean
name|flush
init|=
literal|null
decl_stmt|;
DECL|method|DeleteStatus
specifier|private
name|DeleteStatus
parameter_list|(
name|String
name|requestId
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETESTATUS
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
block|}
comment|/**      * @deprecated Use {@link #deleteAsyncId(String)} or {@link #deleteAllAsyncIds()}      */
annotation|@
name|Deprecated
DECL|method|DeleteStatus
specifier|public
name|DeleteStatus
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETESTATUS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setRequestId
specifier|public
name|DeleteStatus
name|setRequestId
parameter_list|(
name|String
name|requestId
parameter_list|)
block|{
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setFlush
specifier|public
name|DeleteStatus
name|setFlush
parameter_list|(
name|Boolean
name|flush
parameter_list|)
block|{
name|this
operator|.
name|flush
operator|=
name|flush
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getRequestId
specifier|public
name|String
name|getRequestId
parameter_list|()
block|{
return|return
name|this
operator|.
name|requestId
return|;
block|}
DECL|method|getFlush
specifier|public
name|Boolean
name|getFlush
parameter_list|()
block|{
return|return
name|this
operator|.
name|flush
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestId
operator|==
literal|null
operator|&&
name|flush
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either requestid or flush parameter must be specified."
argument_list|)
throw|;
if|if
condition|(
name|requestId
operator|!=
literal|null
operator|&&
name|flush
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Both requestid and flush parameters can not be specified together."
argument_list|)
throw|;
if|if
condition|(
name|requestId
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
if|if
condition|(
name|flush
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|CollectionAdminParams
operator|.
name|FLUSH
argument_list|,
name|flush
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|CollectionAdminResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|CollectionAdminResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to create a new alias    * @param aliasName           the alias name    * @param aliasedCollections  the collections to alias    */
DECL|method|createAlias
specifier|public
specifier|static
name|CreateAlias
name|createAlias
parameter_list|(
name|String
name|aliasName
parameter_list|,
name|String
name|aliasedCollections
parameter_list|)
block|{
return|return
operator|new
name|CreateAlias
argument_list|(
name|aliasName
argument_list|,
name|aliasedCollections
argument_list|)
return|;
block|}
comment|// CREATEALIAS request
DECL|class|CreateAlias
specifier|public
specifier|static
class|class
name|CreateAlias
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|aliasName
specifier|protected
name|String
name|aliasName
decl_stmt|;
DECL|field|aliasedCollections
specifier|protected
name|String
name|aliasedCollections
decl_stmt|;
DECL|method|CreateAlias
specifier|private
name|CreateAlias
parameter_list|(
name|String
name|aliasName
parameter_list|,
name|String
name|aliasedCollections
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CREATEALIAS
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliasName
operator|=
name|SolrIdentifierValidator
operator|.
name|validateAliasName
argument_list|(
name|aliasName
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliasedCollections
operator|=
name|aliasedCollections
expr_stmt|;
block|}
comment|/**      * @deprecated Use {@link #createAlias(String, String)}      */
annotation|@
name|Deprecated
DECL|method|CreateAlias
specifier|public
name|CreateAlias
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CREATEALIAS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Provide the name of the alias to be created.      *       * Alias names must consist entirely of periods, underscores and alphanumerics.  Other characters are not allowed.      *       * @throws IllegalArgumentException if the alias name contains invalid characters.      */
annotation|@
name|Deprecated
DECL|method|setAliasName
specifier|public
name|CreateAlias
name|setAliasName
parameter_list|(
name|String
name|aliasName
parameter_list|)
block|{
name|this
operator|.
name|aliasName
operator|=
name|SolrIdentifierValidator
operator|.
name|validateAliasName
argument_list|(
name|aliasName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getAliasName
specifier|public
name|String
name|getAliasName
parameter_list|()
block|{
return|return
name|aliasName
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setAliasedCollections
specifier|public
name|CreateAlias
name|setAliasedCollections
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|aliasedCollections
operator|=
name|alias
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getAliasedCollections
specifier|public
name|String
name|getAliasedCollections
parameter_list|()
block|{
return|return
name|this
operator|.
name|aliasedCollections
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|CreateAlias
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|aliasName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collections"
argument_list|,
name|aliasedCollections
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to delete an alias    */
DECL|method|deleteAlias
specifier|public
specifier|static
name|DeleteAlias
name|deleteAlias
parameter_list|(
name|String
name|aliasName
parameter_list|)
block|{
return|return
operator|new
name|DeleteAlias
argument_list|(
name|aliasName
argument_list|)
return|;
block|}
comment|// DELETEALIAS request
DECL|class|DeleteAlias
specifier|public
specifier|static
class|class
name|DeleteAlias
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|aliasName
specifier|protected
name|String
name|aliasName
decl_stmt|;
DECL|method|DeleteAlias
specifier|private
name|DeleteAlias
parameter_list|(
name|String
name|aliasName
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETEALIAS
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliasName
operator|=
name|aliasName
expr_stmt|;
block|}
comment|/**      * @deprecated Use {@link #deleteAlias(String)}      */
annotation|@
name|Deprecated
DECL|method|DeleteAlias
specifier|public
name|DeleteAlias
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETEALIAS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setAliasName
specifier|public
name|DeleteAlias
name|setAliasName
parameter_list|(
name|String
name|aliasName
parameter_list|)
block|{
name|this
operator|.
name|aliasName
operator|=
name|aliasName
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|DeleteAlias
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|aliasName
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to add a replica to a shard in a collection    */
DECL|method|addReplicaToShard
specifier|public
specifier|static
name|AddReplica
name|addReplicaToShard
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
return|return
operator|new
name|AddReplica
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns a SolrRequest to add a replica to a collection using a route key    */
DECL|method|addReplicaByRouteKey
specifier|public
specifier|static
name|AddReplica
name|addReplicaByRouteKey
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|routeKey
parameter_list|)
block|{
return|return
operator|new
name|AddReplica
argument_list|(
name|collection
argument_list|,
literal|null
argument_list|,
name|routeKey
argument_list|)
return|;
block|}
comment|// ADDREPLICA request
DECL|class|AddReplica
specifier|public
specifier|static
class|class
name|AddReplica
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|field|shard
specifier|protected
name|String
name|shard
decl_stmt|;
DECL|field|node
specifier|protected
name|String
name|node
decl_stmt|;
DECL|field|routeKey
specifier|protected
name|String
name|routeKey
decl_stmt|;
DECL|field|instanceDir
specifier|protected
name|String
name|instanceDir
decl_stmt|;
DECL|field|dataDir
specifier|protected
name|String
name|dataDir
decl_stmt|;
DECL|field|properties
specifier|protected
name|Properties
name|properties
decl_stmt|;
comment|/**      * @deprecated Use {@link #addReplicaByRouteKey(String, String)} or {@link #addReplicaToShard(String, String)}      */
annotation|@
name|Deprecated
DECL|method|AddReplica
specifier|public
name|AddReplica
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|ADDREPLICA
argument_list|)
expr_stmt|;
block|}
DECL|method|AddReplica
specifier|private
name|AddReplica
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|routeKey
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|ADDREPLICA
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|routeKey
operator|=
name|routeKey
expr_stmt|;
block|}
DECL|method|getProperties
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties
specifier|public
name|AddReplica
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getNode
specifier|public
name|String
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
DECL|method|setNode
specifier|public
name|AddReplica
name|setNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getRouteKey
specifier|public
name|String
name|getRouteKey
parameter_list|()
block|{
return|return
name|routeKey
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setRouteKey
specifier|public
name|AddReplica
name|setRouteKey
parameter_list|(
name|String
name|routeKey
parameter_list|)
block|{
name|this
operator|.
name|routeKey
operator|=
name|routeKey
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getInstanceDir
specifier|public
name|String
name|getInstanceDir
parameter_list|()
block|{
return|return
name|instanceDir
return|;
block|}
DECL|method|setInstanceDir
specifier|public
name|AddReplica
name|setInstanceDir
parameter_list|(
name|String
name|instanceDir
parameter_list|)
block|{
name|this
operator|.
name|instanceDir
operator|=
name|instanceDir
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getDataDir
specifier|public
name|String
name|getDataDir
parameter_list|()
block|{
return|return
name|dataDir
return|;
block|}
DECL|method|setDataDir
specifier|public
name|AddReplica
name|setDataDir
parameter_list|(
name|String
name|dataDir
parameter_list|)
block|{
name|this
operator|.
name|dataDir
operator|=
name|dataDir
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|AddReplica
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
name|AddReplica
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|AddReplica
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must call setCollection() on this request"
argument_list|)
throw|;
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|shard
operator|==
literal|null
operator|||
name|shard
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|routeKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either shard or routeKey must be provided"
argument_list|)
throw|;
block|}
name|params
operator|.
name|add
argument_list|(
name|ShardParams
operator|.
name|_ROUTE_
argument_list|,
name|routeKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"node"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instanceDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"instanceDir"
argument_list|,
name|instanceDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"dataDir"
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|addProperties
argument_list|(
name|params
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to delete a replica from a shard in a collection    */
DECL|method|deleteReplica
specifier|public
specifier|static
name|DeleteReplica
name|deleteReplica
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replica
parameter_list|)
block|{
return|return
operator|new
name|DeleteReplica
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|,
name|replica
argument_list|)
return|;
block|}
comment|// DELETEREPLICA request
DECL|class|DeleteReplica
specifier|public
specifier|static
class|class
name|DeleteReplica
extends|extends
name|AsyncShardSpecificAdminRequest
block|{
DECL|field|replica
specifier|protected
name|String
name|replica
decl_stmt|;
DECL|field|onlyIfDown
specifier|protected
name|Boolean
name|onlyIfDown
decl_stmt|;
DECL|field|deleteDataDir
specifier|private
name|Boolean
name|deleteDataDir
decl_stmt|;
DECL|field|deleteInstanceDir
specifier|private
name|Boolean
name|deleteInstanceDir
decl_stmt|;
DECL|field|deleteIndexDir
specifier|private
name|Boolean
name|deleteIndexDir
decl_stmt|;
comment|/**      * @deprecated Use {@link #deleteReplica(String, String, String)}      */
annotation|@
name|Deprecated
DECL|method|DeleteReplica
specifier|public
name|DeleteReplica
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETEREPLICA
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DeleteReplica
specifier|private
name|DeleteReplica
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replica
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETEREPLICA
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|this
operator|.
name|replica
operator|=
name|replica
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setReplica
specifier|public
name|DeleteReplica
name|setReplica
parameter_list|(
name|String
name|replica
parameter_list|)
block|{
name|this
operator|.
name|replica
operator|=
name|replica
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getReplica
specifier|public
name|String
name|getReplica
parameter_list|()
block|{
return|return
name|this
operator|.
name|replica
return|;
block|}
DECL|method|setOnlyIfDown
specifier|public
name|DeleteReplica
name|setOnlyIfDown
parameter_list|(
name|boolean
name|onlyIfDown
parameter_list|)
block|{
name|this
operator|.
name|onlyIfDown
operator|=
name|onlyIfDown
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getOnlyIfDown
specifier|public
name|Boolean
name|getOnlyIfDown
parameter_list|()
block|{
return|return
name|this
operator|.
name|onlyIfDown
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|DeleteReplica
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
name|DeleteReplica
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|DeleteReplica
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|REPLICA_PROP
argument_list|,
name|this
operator|.
name|replica
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyIfDown
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"onlyIfDown"
argument_list|,
name|onlyIfDown
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteDataDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
name|deleteDataDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteInstanceDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
name|deleteInstanceDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteIndexDir
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INDEX
argument_list|,
name|deleteIndexDir
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
DECL|method|getDeleteDataDir
specifier|public
name|Boolean
name|getDeleteDataDir
parameter_list|()
block|{
return|return
name|deleteDataDir
return|;
block|}
DECL|method|setDeleteDataDir
specifier|public
name|DeleteReplica
name|setDeleteDataDir
parameter_list|(
name|Boolean
name|deleteDataDir
parameter_list|)
block|{
name|this
operator|.
name|deleteDataDir
operator|=
name|deleteDataDir
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getDeleteInstanceDir
specifier|public
name|Boolean
name|getDeleteInstanceDir
parameter_list|()
block|{
return|return
name|deleteInstanceDir
return|;
block|}
DECL|method|setDeleteInstanceDir
specifier|public
name|DeleteReplica
name|setDeleteInstanceDir
parameter_list|(
name|Boolean
name|deleteInstanceDir
parameter_list|)
block|{
name|this
operator|.
name|deleteInstanceDir
operator|=
name|deleteInstanceDir
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to set a cluster property    */
DECL|method|setClusterProperty
specifier|public
specifier|static
name|ClusterProp
name|setClusterProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
block|{
return|return
operator|new
name|ClusterProp
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
return|;
block|}
comment|// CLUSTERPROP request
DECL|class|ClusterProp
specifier|public
specifier|static
class|class
name|ClusterProp
extends|extends
name|CollectionAdminRequest
argument_list|<
name|CollectionAdminResponse
argument_list|>
block|{
DECL|field|propertyName
specifier|private
name|String
name|propertyName
decl_stmt|;
DECL|field|propertyValue
specifier|private
name|String
name|propertyValue
decl_stmt|;
comment|/**      * @deprecated Use {@link #setClusterProperty(String, String)}      */
annotation|@
name|Deprecated
DECL|method|ClusterProp
specifier|public
name|ClusterProp
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CLUSTERPROP
argument_list|)
expr_stmt|;
block|}
DECL|method|ClusterProp
specifier|private
name|ClusterProp
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CLUSTERPROP
argument_list|)
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|this
operator|.
name|propertyValue
operator|=
name|propertyValue
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setPropertyName
specifier|public
name|ClusterProp
name|setPropertyName
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getPropertyName
specifier|public
name|String
name|getPropertyName
parameter_list|()
block|{
return|return
name|this
operator|.
name|propertyName
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setPropertyValue
specifier|public
name|ClusterProp
name|setPropertyValue
parameter_list|(
name|String
name|propertyValue
parameter_list|)
block|{
name|this
operator|.
name|propertyValue
operator|=
name|propertyValue
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getPropertyValue
specifier|public
name|String
name|getPropertyValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|propertyValue
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"val"
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|CollectionAdminResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|CollectionAdminResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to migrate data matching a split key to another collection    */
DECL|method|migrateData
specifier|public
specifier|static
name|Migrate
name|migrateData
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|targetCollection
parameter_list|,
name|String
name|splitKey
parameter_list|)
block|{
return|return
operator|new
name|Migrate
argument_list|(
name|collection
argument_list|,
name|targetCollection
argument_list|,
name|splitKey
argument_list|)
return|;
block|}
comment|// MIGRATE request
DECL|class|Migrate
specifier|public
specifier|static
class|class
name|Migrate
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|targetCollection
specifier|private
name|String
name|targetCollection
decl_stmt|;
DECL|field|splitKey
specifier|private
name|String
name|splitKey
decl_stmt|;
DECL|field|forwardTimeout
specifier|private
name|Integer
name|forwardTimeout
decl_stmt|;
DECL|field|properties
specifier|private
name|Properties
name|properties
decl_stmt|;
comment|/**      * @deprecated Use {@link #migrateData(String, String, String)}      */
annotation|@
name|Deprecated
DECL|method|Migrate
specifier|public
name|Migrate
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|MIGRATE
argument_list|)
expr_stmt|;
block|}
DECL|method|Migrate
specifier|private
name|Migrate
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|targetCollection
parameter_list|,
name|String
name|splitKey
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|MIGRATE
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|targetCollection
operator|=
name|targetCollection
expr_stmt|;
name|this
operator|.
name|splitKey
operator|=
name|splitKey
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|Migrate
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCollectionName
specifier|public
name|String
name|getCollectionName
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setTargetCollection
specifier|public
name|Migrate
name|setTargetCollection
parameter_list|(
name|String
name|targetCollection
parameter_list|)
block|{
name|this
operator|.
name|targetCollection
operator|=
name|targetCollection
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTargetCollection
specifier|public
name|String
name|getTargetCollection
parameter_list|()
block|{
return|return
name|this
operator|.
name|targetCollection
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setSplitKey
specifier|public
name|Migrate
name|setSplitKey
parameter_list|(
name|String
name|splitKey
parameter_list|)
block|{
name|this
operator|.
name|splitKey
operator|=
name|splitKey
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSplitKey
specifier|public
name|String
name|getSplitKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|splitKey
return|;
block|}
DECL|method|setForwardTimeout
specifier|public
name|Migrate
name|setForwardTimeout
parameter_list|(
name|int
name|forwardTimeout
parameter_list|)
block|{
name|this
operator|.
name|forwardTimeout
operator|=
name|forwardTimeout
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getForwardTimeout
specifier|public
name|Integer
name|getForwardTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|forwardTimeout
return|;
block|}
DECL|method|setProperties
specifier|public
name|Migrate
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getProperties
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|this
operator|.
name|properties
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|Migrate
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"target.collection"
argument_list|,
name|targetCollection
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"split.key"
argument_list|,
name|splitKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|forwardTimeout
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"forward.timeout"
argument_list|,
name|forwardTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|addProperties
argument_list|(
name|params
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to add a role to a node    */
DECL|method|addRole
specifier|public
specifier|static
name|AddRole
name|addRole
parameter_list|(
name|String
name|node
parameter_list|,
name|String
name|role
parameter_list|)
block|{
return|return
operator|new
name|AddRole
argument_list|(
name|node
argument_list|,
name|role
argument_list|)
return|;
block|}
comment|// ADDROLE request
DECL|class|AddRole
specifier|public
specifier|static
class|class
name|AddRole
extends|extends
name|CollectionAdminRoleRequest
block|{
comment|/**      * @deprecated Use {@link #addRole(String, String)}      */
annotation|@
name|Deprecated
DECL|method|AddRole
specifier|public
name|AddRole
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|ADDROLE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AddRole
specifier|private
name|AddRole
parameter_list|(
name|String
name|node
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|ADDROLE
argument_list|,
name|node
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setNode
specifier|public
name|AddRole
name|setNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setRole
specifier|public
name|AddRole
name|setRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to remove a role from a node    */
DECL|method|removeRole
specifier|public
specifier|static
name|RemoveRole
name|removeRole
parameter_list|(
name|String
name|node
parameter_list|,
name|String
name|role
parameter_list|)
block|{
return|return
operator|new
name|RemoveRole
argument_list|(
name|node
argument_list|,
name|role
argument_list|)
return|;
block|}
comment|// REMOVEROLE request
DECL|class|RemoveRole
specifier|public
specifier|static
class|class
name|RemoveRole
extends|extends
name|CollectionAdminRoleRequest
block|{
comment|/**      * @deprecated Use {@link #removeRole(String, String)}      */
annotation|@
name|Deprecated
DECL|method|RemoveRole
specifier|public
name|RemoveRole
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|REMOVEROLE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|RemoveRole
specifier|private
name|RemoveRole
parameter_list|(
name|String
name|node
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|REMOVEROLE
argument_list|,
name|node
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setNode
specifier|public
name|RemoveRole
name|setNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setRole
specifier|public
name|RemoveRole
name|setRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * Return a SolrRequest to get the Overseer status    */
DECL|method|getOverseerStatus
specifier|public
specifier|static
name|OverseerStatus
name|getOverseerStatus
parameter_list|()
block|{
return|return
operator|new
name|OverseerStatus
argument_list|()
return|;
block|}
comment|// OVERSEERSTATUS request
DECL|class|OverseerStatus
specifier|public
specifier|static
class|class
name|OverseerStatus
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|method|OverseerStatus
specifier|public
name|OverseerStatus
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|OVERSEERSTATUS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|OverseerStatus
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * Return a SolrRequest to get the Cluster status    */
DECL|method|getClusterStatus
specifier|public
specifier|static
name|ClusterStatus
name|getClusterStatus
parameter_list|()
block|{
return|return
operator|new
name|ClusterStatus
argument_list|()
return|;
block|}
comment|// CLUSTERSTATUS request
DECL|class|ClusterStatus
specifier|public
specifier|static
class|class
name|ClusterStatus
extends|extends
name|CollectionAdminRequest
argument_list|<
name|CollectionAdminResponse
argument_list|>
block|{
DECL|field|shardName
specifier|protected
name|String
name|shardName
init|=
literal|null
decl_stmt|;
DECL|field|collection
specifier|protected
name|String
name|collection
init|=
literal|null
decl_stmt|;
DECL|field|routeKey
specifier|protected
name|String
name|routeKey
init|=
literal|null
decl_stmt|;
DECL|method|ClusterStatus
specifier|public
name|ClusterStatus
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|CLUSTERSTATUS
argument_list|)
expr_stmt|;
block|}
DECL|method|setCollectionName
specifier|public
name|ClusterStatus
name|setCollectionName
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collectionName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCollectionName
specifier|public
name|String
name|getCollectionName
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
DECL|method|setShardName
specifier|public
name|ClusterStatus
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shardName
operator|=
name|shard
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getShardName
specifier|public
name|String
name|getShardName
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardName
return|;
block|}
DECL|method|getRouteKey
specifier|public
name|String
name|getRouteKey
parameter_list|()
block|{
return|return
name|routeKey
return|;
block|}
DECL|method|setRouteKey
specifier|public
name|ClusterStatus
name|setRouteKey
parameter_list|(
name|String
name|routeKey
parameter_list|)
block|{
name|this
operator|.
name|routeKey
operator|=
name|routeKey
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|super
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardName
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|routeKey
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|ShardParams
operator|.
name|_ROUTE_
argument_list|,
name|routeKey
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|CollectionAdminResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|CollectionAdminResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to get a list of collections in the cluster    */
DECL|method|listCollections
specifier|public
specifier|static
name|List
name|listCollections
parameter_list|()
block|{
return|return
operator|new
name|List
argument_list|()
return|;
block|}
comment|// LIST request
DECL|class|List
specifier|public
specifier|static
class|class
name|List
extends|extends
name|CollectionAdminRequest
argument_list|<
name|CollectionAdminResponse
argument_list|>
block|{
DECL|method|List
specifier|public
name|List
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|LIST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResponse
specifier|protected
name|CollectionAdminResponse
name|createResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|)
block|{
return|return
operator|new
name|CollectionAdminResponse
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to add a property to a specific replica    */
DECL|method|addReplicaProperty
specifier|public
specifier|static
name|AddReplicaProp
name|addReplicaProperty
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replica
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
block|{
return|return
operator|new
name|AddReplicaProp
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|,
name|replica
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
return|;
block|}
comment|// ADDREPLICAPROP request
DECL|class|AddReplicaProp
specifier|public
specifier|static
class|class
name|AddReplicaProp
extends|extends
name|AsyncShardSpecificAdminRequest
block|{
DECL|field|replica
specifier|private
name|String
name|replica
decl_stmt|;
DECL|field|propertyName
specifier|private
name|String
name|propertyName
decl_stmt|;
DECL|field|propertyValue
specifier|private
name|String
name|propertyValue
decl_stmt|;
DECL|field|shardUnique
specifier|private
name|Boolean
name|shardUnique
decl_stmt|;
comment|/**      * @deprecated Use {@link #addReplicaProperty(String, String, String, String, String)}      */
annotation|@
name|Deprecated
DECL|method|AddReplicaProp
specifier|public
name|AddReplicaProp
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|ADDREPLICAPROP
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AddReplicaProp
specifier|private
name|AddReplicaProp
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replica
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|ADDREPLICAPROP
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|this
operator|.
name|replica
operator|=
name|replica
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|this
operator|.
name|propertyValue
operator|=
name|propertyValue
expr_stmt|;
block|}
DECL|method|getReplica
specifier|public
name|String
name|getReplica
parameter_list|()
block|{
return|return
name|replica
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setReplica
specifier|public
name|AddReplicaProp
name|setReplica
parameter_list|(
name|String
name|replica
parameter_list|)
block|{
name|this
operator|.
name|replica
operator|=
name|replica
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getPropertyName
specifier|public
name|String
name|getPropertyName
parameter_list|()
block|{
return|return
name|propertyName
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setPropertyName
specifier|public
name|AddReplicaProp
name|setPropertyName
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getPropertyValue
specifier|public
name|String
name|getPropertyValue
parameter_list|()
block|{
return|return
name|propertyValue
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setPropertyValue
specifier|public
name|AddReplicaProp
name|setPropertyValue
parameter_list|(
name|String
name|propertyValue
parameter_list|)
block|{
name|this
operator|.
name|propertyValue
operator|=
name|propertyValue
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getShardUnique
specifier|public
name|Boolean
name|getShardUnique
parameter_list|()
block|{
return|return
name|shardUnique
return|;
block|}
DECL|method|setShardUnique
specifier|public
name|AddReplicaProp
name|setShardUnique
parameter_list|(
name|Boolean
name|shardUnique
parameter_list|)
block|{
name|this
operator|.
name|shardUnique
operator|=
name|shardUnique
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|AddReplicaProp
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
name|AddReplicaProp
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|AddReplicaProp
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|REPLICA
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"property"
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"property.value"
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardUnique
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"shardUnique"
argument_list|,
name|shardUnique
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to delete a property from a specific replica    */
DECL|method|deleteReplicaProperty
specifier|public
specifier|static
name|DeleteReplicaProp
name|deleteReplicaProperty
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replica
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|new
name|DeleteReplicaProp
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|,
name|replica
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
comment|// DELETEREPLICAPROP request
DECL|class|DeleteReplicaProp
specifier|public
specifier|static
class|class
name|DeleteReplicaProp
extends|extends
name|AsyncShardSpecificAdminRequest
block|{
DECL|field|replica
specifier|private
name|String
name|replica
decl_stmt|;
DECL|field|propertyName
specifier|private
name|String
name|propertyName
decl_stmt|;
comment|/**      * @deprecated Use {@link #deleteReplicaProperty(String, String, String, String)}      */
annotation|@
name|Deprecated
DECL|method|DeleteReplicaProp
specifier|public
name|DeleteReplicaProp
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETEREPLICAPROP
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DeleteReplicaProp
specifier|private
name|DeleteReplicaProp
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replica
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|DELETEREPLICAPROP
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|this
operator|.
name|replica
operator|=
name|replica
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
block|}
DECL|method|getReplica
specifier|public
name|String
name|getReplica
parameter_list|()
block|{
return|return
name|replica
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setReplica
specifier|public
name|DeleteReplicaProp
name|setReplica
parameter_list|(
name|String
name|replica
parameter_list|)
block|{
name|this
operator|.
name|replica
operator|=
name|replica
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getPropertyName
specifier|public
name|String
name|getPropertyName
parameter_list|()
block|{
return|return
name|propertyName
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setPropertyName
specifier|public
name|DeleteReplicaProp
name|setPropertyName
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|DeleteReplicaProp
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setShardName
specifier|public
name|DeleteReplicaProp
name|setShardName
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|DeleteReplicaProp
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"replica"
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"property"
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to migrate a collection state format    *    * This is an expert-level request, and should not generally be necessary.    */
DECL|method|migrateCollectionFormat
specifier|public
specifier|static
name|MigrateClusterState
name|migrateCollectionFormat
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
return|return
operator|new
name|MigrateClusterState
argument_list|(
name|collection
argument_list|)
return|;
block|}
comment|// MIGRATECLUSTERSTATE request
DECL|class|MigrateClusterState
specifier|public
specifier|static
class|class
name|MigrateClusterState
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|method|MigrateClusterState
specifier|private
name|MigrateClusterState
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|MIGRATESTATEFORMAT
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
comment|/**      * @deprecated Use {@link #migrateCollectionFormat(String)}      */
annotation|@
name|Deprecated
DECL|method|MigrateClusterState
specifier|public
name|MigrateClusterState
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|MIGRATESTATEFORMAT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setCollectionName
specifier|public
name|MigrateClusterState
name|setCollectionName
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|MigrateClusterState
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must call setCollection() on this request"
argument_list|)
throw|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
comment|/**    * Returns a SolrRequest to balance a replica property across the shards of a collection    */
DECL|method|balanceReplicaProperty
specifier|public
specifier|static
name|BalanceShardUnique
name|balanceReplicaProperty
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|new
name|BalanceShardUnique
argument_list|(
name|collection
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
comment|// BALANCESHARDUNIQUE request
DECL|class|BalanceShardUnique
specifier|public
specifier|static
class|class
name|BalanceShardUnique
extends|extends
name|AsyncCollectionAdminRequest
block|{
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|field|propertyName
specifier|protected
name|String
name|propertyName
decl_stmt|;
DECL|field|onlyActiveNodes
specifier|protected
name|Boolean
name|onlyActiveNodes
decl_stmt|;
DECL|field|shardUnique
specifier|protected
name|Boolean
name|shardUnique
decl_stmt|;
DECL|method|BalanceShardUnique
specifier|private
name|BalanceShardUnique
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|BALANCESHARDUNIQUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
block|}
comment|/**      * @deprecated Use {@link #balanceReplicaProperty(String, String)}      */
annotation|@
name|Deprecated
DECL|method|BalanceShardUnique
specifier|public
name|BalanceShardUnique
parameter_list|()
block|{
name|super
argument_list|(
name|CollectionAction
operator|.
name|BALANCESHARDUNIQUE
argument_list|)
expr_stmt|;
block|}
DECL|method|getPropertyName
specifier|public
name|String
name|getPropertyName
parameter_list|()
block|{
return|return
name|propertyName
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setPropertyName
specifier|public
name|BalanceShardUnique
name|setPropertyName
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getOnlyActiveNodes
specifier|public
name|Boolean
name|getOnlyActiveNodes
parameter_list|()
block|{
return|return
name|onlyActiveNodes
return|;
block|}
DECL|method|setOnlyActiveNodes
specifier|public
name|BalanceShardUnique
name|setOnlyActiveNodes
parameter_list|(
name|Boolean
name|onlyActiveNodes
parameter_list|)
block|{
name|this
operator|.
name|onlyActiveNodes
operator|=
name|onlyActiveNodes
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getShardUnique
specifier|public
name|Boolean
name|getShardUnique
parameter_list|()
block|{
return|return
name|shardUnique
return|;
block|}
DECL|method|setShardUnique
specifier|public
name|BalanceShardUnique
name|setShardUnique
parameter_list|(
name|Boolean
name|shardUnique
parameter_list|)
block|{
name|this
operator|.
name|shardUnique
operator|=
name|shardUnique
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setCollection
specifier|public
name|BalanceShardUnique
name|setCollection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCollection
specifier|public
name|String
name|getCollection
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setAsyncId
specifier|public
name|BalanceShardUnique
name|setAsyncId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|asyncId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"property"
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyActiveNodes
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"onlyactivenodes"
argument_list|,
name|onlyActiveNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardUnique
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"shardUnique"
argument_list|,
name|shardUnique
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
block|}
end_class
end_unit
