begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.graph
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|graph
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|graph
operator|.
name|Traversal
operator|.
name|Scatter
import|;
end_import
begin_class
DECL|class|TraversalIterator
class|class
name|TraversalIterator
implements|implements
name|Iterator
block|{
DECL|field|graph
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
argument_list|>
name|graph
decl_stmt|;
DECL|field|collections
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|collections
decl_stmt|;
DECL|field|fields
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fields
decl_stmt|;
DECL|field|graphIterator
specifier|private
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|Node
argument_list|>
argument_list|>
name|graphIterator
decl_stmt|;
DECL|field|levelIterator
specifier|private
name|Iterator
argument_list|<
name|Node
argument_list|>
name|levelIterator
decl_stmt|;
DECL|field|fieldIterator
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|fieldIterator
decl_stmt|;
DECL|field|collectionIterator
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|collectionIterator
decl_stmt|;
DECL|field|levelNumIterator
specifier|private
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|levelNumIterator
decl_stmt|;
DECL|field|outField
specifier|private
name|String
name|outField
decl_stmt|;
DECL|field|outCollection
specifier|private
name|String
name|outCollection
decl_stmt|;
DECL|field|outLevel
specifier|private
name|int
name|outLevel
decl_stmt|;
DECL|field|traversal
specifier|private
name|Traversal
name|traversal
decl_stmt|;
DECL|method|TraversalIterator
specifier|public
name|TraversalIterator
parameter_list|(
name|Traversal
name|traversal
parameter_list|,
name|Set
argument_list|<
name|Scatter
argument_list|>
name|scatter
parameter_list|)
block|{
name|this
operator|.
name|traversal
operator|=
name|traversal
expr_stmt|;
name|graph
operator|=
name|traversal
operator|.
name|getGraph
argument_list|()
expr_stmt|;
name|collections
operator|=
name|traversal
operator|.
name|getCollections
argument_list|()
expr_stmt|;
name|fields
operator|=
name|traversal
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outCollections
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outFields
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|levelNums
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Iterator
argument_list|<
name|Node
argument_list|>
argument_list|>
name|levelIterators
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|scatter
operator|.
name|contains
argument_list|(
name|Scatter
operator|.
name|BRANCHES
argument_list|)
condition|)
block|{
if|if
condition|(
name|graph
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|graph
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|graphLevel
init|=
name|graph
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|collection
init|=
name|collections
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|outCollections
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|outFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|levelNums
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|levelIterators
operator|.
name|add
argument_list|(
name|graphLevel
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|scatter
operator|.
name|contains
argument_list|(
name|Scatter
operator|.
name|LEAVES
argument_list|)
condition|)
block|{
name|int
name|leavesLevel
init|=
name|graph
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|graph
operator|.
name|size
argument_list|()
operator|-
literal|1
else|:
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|graphLevel
init|=
name|graph
operator|.
name|get
argument_list|(
name|leavesLevel
argument_list|)
decl_stmt|;
name|String
name|collection
init|=
name|collections
operator|.
name|get
argument_list|(
name|leavesLevel
argument_list|)
decl_stmt|;
name|String
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|leavesLevel
argument_list|)
decl_stmt|;
name|levelNums
operator|.
name|add
argument_list|(
name|leavesLevel
argument_list|)
expr_stmt|;
name|outCollections
operator|.
name|add
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|outFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|levelIterators
operator|.
name|add
argument_list|(
name|graphLevel
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|graphIterator
operator|=
name|levelIterators
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|levelIterator
operator|=
name|graphIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fieldIterator
operator|=
name|outFields
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|collectionIterator
operator|=
name|outCollections
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|levelNumIterator
operator|=
name|levelNums
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|outField
operator|=
name|fieldIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|outCollection
operator|=
name|collectionIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|outLevel
operator|=
name|levelNumIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|levelIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|graphIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|levelIterator
operator|=
name|graphIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|outField
operator|=
name|fieldIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|outCollection
operator|=
name|collectionIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|outLevel
operator|=
name|levelNumIterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|hasNext
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Tuple
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|node
init|=
name|levelIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|node
operator|.
name|toTuple
argument_list|(
name|outCollection
argument_list|,
name|outField
argument_list|,
name|outLevel
argument_list|,
name|traversal
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
