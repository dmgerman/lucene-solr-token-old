begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.noggit
package|package
name|org
operator|.
name|apache
operator|.
name|noggit
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_comment
comment|/**  * @author yonik  * @version $Id: JSONParser.java 1099557 2011-05-04 18:54:26Z yonik $  */
end_comment
begin_class
DECL|class|JSONParser
specifier|public
class|class
name|JSONParser
block|{
comment|/** Event indicating a JSON string value, including member names of objects */
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|1
decl_stmt|;
comment|/** Event indicating a JSON number value which fits into a signed 64 bit integer */
DECL|field|LONG
specifier|public
specifier|static
specifier|final
name|int
name|LONG
init|=
literal|2
decl_stmt|;
comment|/** Event indicating a JSON number value which has a fractional part or an exponent    * and with string length<= 23 chars not including sign.  This covers    * all representations of normal values for Double.toString().    */
DECL|field|NUMBER
specifier|public
specifier|static
specifier|final
name|int
name|NUMBER
init|=
literal|3
decl_stmt|;
comment|/** Event indicating a JSON number value that was not produced by toString of any    * Java primitive numerics such as Double or Long.  It is either    * an integer outside the range of a 64 bit signed integer, or a floating    * point value with a string representation of more than 23 chars.     */
DECL|field|BIGNUMBER
specifier|public
specifier|static
specifier|final
name|int
name|BIGNUMBER
init|=
literal|4
decl_stmt|;
comment|/** Event indicating a JSON boolean */
DECL|field|BOOLEAN
specifier|public
specifier|static
specifier|final
name|int
name|BOOLEAN
init|=
literal|5
decl_stmt|;
comment|/** Event indicating a JSON null */
DECL|field|NULL
specifier|public
specifier|static
specifier|final
name|int
name|NULL
init|=
literal|6
decl_stmt|;
comment|/** Event indicating the start of a JSON object */
DECL|field|OBJECT_START
specifier|public
specifier|static
specifier|final
name|int
name|OBJECT_START
init|=
literal|7
decl_stmt|;
comment|/** Event indicating the end of a JSON object */
DECL|field|OBJECT_END
specifier|public
specifier|static
specifier|final
name|int
name|OBJECT_END
init|=
literal|8
decl_stmt|;
comment|/** Event indicating the start of a JSON array */
DECL|field|ARRAY_START
specifier|public
specifier|static
specifier|final
name|int
name|ARRAY_START
init|=
literal|9
decl_stmt|;
comment|/** Event indicating the end of a JSON array */
DECL|field|ARRAY_END
specifier|public
specifier|static
specifier|final
name|int
name|ARRAY_END
init|=
literal|10
decl_stmt|;
comment|/** Event indicating the end of input has been reached */
DECL|field|EOF
specifier|public
specifier|static
specifier|final
name|int
name|EOF
init|=
literal|11
decl_stmt|;
DECL|class|ParseException
specifier|public
specifier|static
class|class
name|ParseException
extends|extends
name|RuntimeException
block|{
DECL|method|ParseException
specifier|public
name|ParseException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEventString
specifier|public
specifier|static
name|String
name|getEventString
parameter_list|(
name|int
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
condition|)
block|{
case|case
name|STRING
case|:
return|return
literal|"STRING"
return|;
case|case
name|LONG
case|:
return|return
literal|"LONG"
return|;
case|case
name|NUMBER
case|:
return|return
literal|"NUMBER"
return|;
case|case
name|BIGNUMBER
case|:
return|return
literal|"BIGNUMBER"
return|;
case|case
name|BOOLEAN
case|:
return|return
literal|"BOOLEAN"
return|;
case|case
name|NULL
case|:
return|return
literal|"NULL"
return|;
case|case
name|OBJECT_START
case|:
return|return
literal|"OBJECT_START"
return|;
case|case
name|OBJECT_END
case|:
return|return
literal|"OBJECT_END"
return|;
case|case
name|ARRAY_START
case|:
return|return
literal|"ARRAY_START"
return|;
case|case
name|ARRAY_END
case|:
return|return
literal|"ARRAY_END"
return|;
case|case
name|EOF
case|:
return|return
literal|"EOF"
return|;
block|}
return|return
literal|"Unknown: "
operator|+
name|e
return|;
block|}
DECL|field|devNull
specifier|private
specifier|static
specifier|final
name|CharArr
name|devNull
init|=
operator|new
name|NullCharArr
argument_list|()
decl_stmt|;
DECL|field|buf
specifier|final
name|char
index|[]
name|buf
decl_stmt|;
comment|// input buffer with JSON text in it
DECL|field|start
name|int
name|start
decl_stmt|;
comment|// current position in the buffer
DECL|field|end
name|int
name|end
decl_stmt|;
comment|// end position in the buffer (one past last valid index)
DECL|field|in
specifier|final
name|Reader
name|in
decl_stmt|;
comment|// optional reader to obtain data from
DECL|field|eof
name|boolean
name|eof
init|=
literal|false
decl_stmt|;
comment|// true if the end of the stream was reached.
DECL|field|gpos
name|long
name|gpos
decl_stmt|;
comment|// global position = gpos + start
DECL|field|event
name|int
name|event
decl_stmt|;
comment|// last event read
DECL|method|JSONParser
specifier|public
name|JSONParser
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|this
argument_list|(
name|in
argument_list|,
operator|new
name|char
index|[
literal|8192
index|]
argument_list|)
expr_stmt|;
comment|// 8192 matches the default buffer size of a BufferedReader so double
comment|// buffering of the data is avoided.
block|}
DECL|method|JSONParser
specifier|public
name|JSONParser
parameter_list|(
name|Reader
name|in
parameter_list|,
name|char
index|[]
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|buf
operator|=
name|buffer
expr_stmt|;
block|}
comment|// idea - if someone passes us a CharArrayReader, we could
comment|// directly use that buffer as it's protected.
DECL|method|JSONParser
specifier|public
name|JSONParser
parameter_list|(
name|char
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|buf
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
DECL|method|JSONParser
specifier|public
name|JSONParser
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|this
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|JSONParser
specifier|public
name|JSONParser
parameter_list|(
name|String
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|buf
operator|=
operator|new
name|char
index|[
name|end
operator|-
name|start
index|]
expr_stmt|;
name|data
operator|.
name|getChars
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// temporary output buffer
DECL|field|out
specifier|private
specifier|final
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|(
literal|64
argument_list|)
decl_stmt|;
comment|// We need to keep some state in order to (at a minimum) know if
comment|// we should skip ',' or ':'.
DECL|field|stack
specifier|private
name|byte
index|[]
name|stack
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
DECL|field|ptr
specifier|private
name|int
name|ptr
init|=
literal|0
decl_stmt|;
comment|// pointer into the stack of parser states
DECL|field|state
specifier|private
name|byte
name|state
init|=
literal|0
decl_stmt|;
comment|// current parser state
comment|// parser states stored in the stack
DECL|field|DID_OBJSTART
specifier|private
specifier|static
specifier|final
name|byte
name|DID_OBJSTART
init|=
literal|1
decl_stmt|;
comment|// '{' just read
DECL|field|DID_ARRSTART
specifier|private
specifier|static
specifier|final
name|byte
name|DID_ARRSTART
init|=
literal|2
decl_stmt|;
comment|// '[' just read
DECL|field|DID_ARRELEM
specifier|private
specifier|static
specifier|final
name|byte
name|DID_ARRELEM
init|=
literal|3
decl_stmt|;
comment|// array element just read
DECL|field|DID_MEMNAME
specifier|private
specifier|static
specifier|final
name|byte
name|DID_MEMNAME
init|=
literal|4
decl_stmt|;
comment|// object member name (map key) just read
DECL|field|DID_MEMVAL
specifier|private
specifier|static
specifier|final
name|byte
name|DID_MEMVAL
init|=
literal|5
decl_stmt|;
comment|// object member value (map val) just read
comment|// info about value that was just read (or is in the middle of being read)
DECL|field|valstate
specifier|private
name|int
name|valstate
decl_stmt|;
comment|// push current parser state (use at start of new container)
DECL|method|push
specifier|private
specifier|final
name|void
name|push
parameter_list|()
block|{
if|if
condition|(
name|ptr
operator|>=
name|stack
operator|.
name|length
condition|)
block|{
comment|// doubling here is probably overkill, but anything that needs to double more than
comment|// once (32 levels deep) is very atypical anyway.
name|byte
index|[]
name|newstack
init|=
operator|new
name|byte
index|[
name|stack
operator|.
name|length
operator|<<
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|stack
argument_list|,
literal|0
argument_list|,
name|newstack
argument_list|,
literal|0
argument_list|,
name|stack
operator|.
name|length
argument_list|)
expr_stmt|;
name|stack
operator|=
name|newstack
expr_stmt|;
block|}
name|stack
index|[
name|ptr
operator|++
index|]
operator|=
name|state
expr_stmt|;
block|}
comment|// pop  parser state (use at end of container)
DECL|method|pop
specifier|private
specifier|final
name|void
name|pop
parameter_list|()
block|{
if|if
condition|(
operator|--
name|ptr
operator|<
literal|0
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Unbalanced container"
argument_list|)
throw|;
block|}
else|else
block|{
name|state
operator|=
name|stack
index|[
name|ptr
index|]
expr_stmt|;
block|}
block|}
DECL|method|fill
specifier|protected
name|void
name|fill
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|gpos
operator|+=
name|end
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|int
name|num
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|end
operator|=
name|num
operator|>=
literal|0
condition|?
name|num
else|:
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>=
name|end
condition|)
name|eof
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getMore
specifier|private
name|void
name|getMore
parameter_list|()
throws|throws
name|IOException
block|{
name|fill
argument_list|()
expr_stmt|;
if|if
condition|(
name|start
operator|>=
name|end
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|null
argument_list|)
throw|;
block|}
block|}
DECL|method|getChar
specifier|protected
name|int
name|getChar
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|>=
name|end
condition|)
block|{
name|fill
argument_list|()
expr_stmt|;
if|if
condition|(
name|start
operator|>=
name|end
condition|)
return|return
operator|-
literal|1
return|;
block|}
return|return
name|buf
index|[
name|start
operator|++
index|]
return|;
block|}
DECL|method|getCharNWS
specifier|private
name|int
name|getCharNWS
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|ch
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ch
operator|==
literal|' '
operator|||
name|ch
operator|==
literal|'\t'
operator|||
name|ch
operator|==
literal|'\n'
operator|||
name|ch
operator|==
literal|'\r'
operator|)
condition|)
return|return
name|ch
return|;
block|}
block|}
DECL|method|expect
specifier|private
name|void
name|expect
parameter_list|(
name|char
index|[]
name|arr
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ch
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
name|arr
index|[
name|i
index|]
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected "
operator|+
operator|new
name|String
argument_list|(
name|arr
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|err
specifier|private
name|ParseException
name|err
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
comment|// We can't tell if EOF was hit by comparing start<=end
comment|// because the illegal char could have been the last in the buffer
comment|// or in the stream.  To deal with this, the "eof" var was introduced
if|if
condition|(
operator|!
name|eof
operator|&&
name|start
operator|>
literal|0
condition|)
name|start
operator|--
expr_stmt|;
comment|// backup one char
name|String
name|chs
init|=
literal|"char="
operator|+
operator|(
operator|(
name|start
operator|>=
name|end
operator|)
condition|?
literal|"(EOF)"
else|:
literal|""
operator|+
operator|(
name|char
operator|)
name|buf
index|[
name|start
index|]
operator|)
decl_stmt|;
name|String
name|pos
init|=
literal|"position="
operator|+
operator|(
name|gpos
operator|+
name|start
operator|)
decl_stmt|;
name|String
name|tot
init|=
name|chs
operator|+
literal|','
operator|+
name|pos
operator|+
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|start
operator|>=
name|end
condition|)
name|msg
operator|=
literal|"Unexpected EOF"
expr_stmt|;
else|else
name|msg
operator|=
literal|"JSON Parse Error"
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|msg
operator|+
literal|": "
operator|+
name|tot
argument_list|)
return|;
block|}
DECL|method|getContext
specifier|private
name|String
name|getContext
parameter_list|()
block|{
name|String
name|context
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
condition|)
block|{
name|context
operator|+=
literal|" BEFORE='"
operator|+
name|errEscape
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|start
operator|-
literal|60
argument_list|,
literal|0
argument_list|)
argument_list|,
name|start
operator|+
literal|1
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|<
name|end
condition|)
block|{
name|context
operator|+=
literal|" AFTER='"
operator|+
name|errEscape
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|start
operator|+
literal|40
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
DECL|method|errEscape
specifier|private
name|String
name|errEscape
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|b
operator|=
name|Math
operator|.
name|min
argument_list|(
name|b
argument_list|,
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|>=
name|b
condition|)
return|return
literal|""
return|;
return|return
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|a
argument_list|,
name|b
operator|-
name|a
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
DECL|field|bool
specifier|private
name|boolean
name|bool
decl_stmt|;
comment|// boolean value read
DECL|field|lval
specifier|private
name|long
name|lval
decl_stmt|;
comment|// long value read
DECL|field|nstate
specifier|private
name|int
name|nstate
decl_stmt|;
comment|// current state while reading a number
DECL|field|HAS_FRACTION
specifier|private
specifier|static
specifier|final
name|int
name|HAS_FRACTION
init|=
literal|0x01
decl_stmt|;
comment|// nstate flag, '.' already read
DECL|field|HAS_EXPONENT
specifier|private
specifier|static
specifier|final
name|int
name|HAS_EXPONENT
init|=
literal|0x02
decl_stmt|;
comment|// nstate flag, '[eE][+-]?[0-9]' already read
comment|/** Returns the long read... only significant if valstate==LONG after    * this call.  firstChar should be the first numeric digit read.    */
DECL|method|readNumber
specifier|private
name|long
name|readNumber
parameter_list|(
name|int
name|firstChar
parameter_list|,
name|boolean
name|isNeg
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|unsafeWrite
argument_list|(
name|firstChar
argument_list|)
expr_stmt|;
comment|// unsafe OK since we know output is big enough
comment|// We build up the number in the negative plane since it's larger (by one) than
comment|// the positive plane.
name|long
name|v
init|=
literal|'0'
operator|-
name|firstChar
decl_stmt|;
comment|// can't overflow a long in 18 decimal digits (i.e. 17 additional after the first).
comment|// we also need 22 additional to handle double so we'll handle in 2 separate loops.
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ch
init|=
name|getChar
argument_list|()
decl_stmt|;
comment|// TODO: is this switch faster as an if-then-else?
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
name|v
operator|=
name|v
operator|*
literal|10
operator|-
operator|(
name|ch
operator|-
literal|'0'
operator|)
expr_stmt|;
name|out
operator|.
name|unsafeWrite
argument_list|(
name|ch
argument_list|)
expr_stmt|;
continue|continue;
case|case
literal|'.'
case|:
name|out
operator|.
name|unsafeWrite
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|valstate
operator|=
name|readFrac
argument_list|(
name|out
argument_list|,
literal|22
operator|-
name|i
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
case|case
literal|'e'
case|:
case|case
literal|'E'
case|:
name|out
operator|.
name|unsafeWrite
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|nstate
operator|=
literal|0
expr_stmt|;
name|valstate
operator|=
name|readExp
argument_list|(
name|out
argument_list|,
literal|22
operator|-
name|i
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
default|default:
comment|// return the number, relying on nextEvent() to return an error
comment|// for invalid chars following the number.
if|if
condition|(
name|ch
operator|!=
operator|-
literal|1
condition|)
operator|--
name|start
expr_stmt|;
comment|// push back last char if not EOF
name|valstate
operator|=
name|LONG
expr_stmt|;
return|return
name|isNeg
condition|?
name|v
else|:
operator|-
name|v
return|;
block|}
block|}
comment|// after this, we could overflow a long and need to do extra checking
name|boolean
name|overflow
init|=
literal|false
decl_stmt|;
name|long
name|maxval
init|=
name|isNeg
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
operator|-
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
literal|22
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ch
init|=
name|getChar
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
if|if
condition|(
name|v
operator|<
operator|(
literal|0x8000000000000000L
operator|/
literal|10
operator|)
condition|)
name|overflow
operator|=
literal|true
expr_stmt|;
comment|// can't multiply by 10 w/o overflowing
name|v
operator|*=
literal|10
expr_stmt|;
name|int
name|digit
init|=
name|ch
operator|-
literal|'0'
decl_stmt|;
if|if
condition|(
name|v
operator|<
name|maxval
operator|+
name|digit
condition|)
name|overflow
operator|=
literal|true
expr_stmt|;
comment|// can't add digit w/o overflowing
name|v
operator|-=
name|digit
expr_stmt|;
name|out
operator|.
name|unsafeWrite
argument_list|(
name|ch
argument_list|)
expr_stmt|;
continue|continue;
case|case
literal|'.'
case|:
name|out
operator|.
name|unsafeWrite
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|valstate
operator|=
name|readFrac
argument_list|(
name|out
argument_list|,
literal|22
operator|-
name|i
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
case|case
literal|'e'
case|:
case|case
literal|'E'
case|:
name|out
operator|.
name|unsafeWrite
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|nstate
operator|=
literal|0
expr_stmt|;
name|valstate
operator|=
name|readExp
argument_list|(
name|out
argument_list|,
literal|22
operator|-
name|i
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
default|default:
comment|// return the number, relying on nextEvent() to return an error
comment|// for invalid chars following the number.
if|if
condition|(
name|ch
operator|!=
operator|-
literal|1
condition|)
operator|--
name|start
expr_stmt|;
comment|// push back last char if not EOF
name|valstate
operator|=
name|overflow
condition|?
name|BIGNUMBER
else|:
name|LONG
expr_stmt|;
return|return
name|isNeg
condition|?
name|v
else|:
operator|-
name|v
return|;
block|}
block|}
name|nstate
operator|=
literal|0
expr_stmt|;
name|valstate
operator|=
name|BIGNUMBER
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// read digits right of decimal point
DECL|method|readFrac
specifier|private
name|int
name|readFrac
parameter_list|(
name|CharArr
name|arr
parameter_list|,
name|int
name|lim
parameter_list|)
throws|throws
name|IOException
block|{
name|nstate
operator|=
name|HAS_FRACTION
expr_stmt|;
comment|// deliberate set instead of '|'
while|while
condition|(
operator|--
name|lim
operator|>=
literal|0
condition|)
block|{
name|int
name|ch
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
condition|)
block|{
name|arr
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'e'
operator|||
name|ch
operator|==
literal|'E'
condition|)
block|{
name|arr
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
return|return
name|readExp
argument_list|(
name|arr
argument_list|,
name|lim
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|ch
operator|!=
operator|-
literal|1
condition|)
name|start
operator|--
expr_stmt|;
comment|// back up
return|return
name|NUMBER
return|;
block|}
block|}
return|return
name|BIGNUMBER
return|;
block|}
comment|// call after 'e' or 'E' has been seen to read the rest of the exponent
DECL|method|readExp
specifier|private
name|int
name|readExp
parameter_list|(
name|CharArr
name|arr
parameter_list|,
name|int
name|lim
parameter_list|)
throws|throws
name|IOException
block|{
name|nstate
operator||=
name|HAS_EXPONENT
expr_stmt|;
name|int
name|ch
init|=
name|getChar
argument_list|()
decl_stmt|;
name|lim
operator|--
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'-'
condition|)
block|{
name|arr
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|ch
operator|=
name|getChar
argument_list|()
expr_stmt|;
name|lim
operator|--
expr_stmt|;
block|}
comment|// make sure at least one digit is read.
if|if
condition|(
name|ch
argument_list|<
literal|'0'
operator|||
name|ch
argument_list|>
literal|'9'
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"missing exponent number"
argument_list|)
throw|;
block|}
name|arr
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
return|return
name|readExpDigits
argument_list|(
name|arr
argument_list|,
name|lim
argument_list|)
return|;
block|}
comment|// continuation of readExpStart
DECL|method|readExpDigits
specifier|private
name|int
name|readExpDigits
parameter_list|(
name|CharArr
name|arr
parameter_list|,
name|int
name|lim
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|--
name|lim
operator|>=
literal|0
condition|)
block|{
name|int
name|ch
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
condition|)
block|{
name|arr
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ch
operator|!=
operator|-
literal|1
condition|)
name|start
operator|--
expr_stmt|;
comment|// back up
return|return
name|NUMBER
return|;
block|}
block|}
return|return
name|BIGNUMBER
return|;
block|}
DECL|method|continueNumber
specifier|private
name|void
name|continueNumber
parameter_list|(
name|CharArr
name|arr
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|arr
operator|!=
name|out
condition|)
name|arr
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|nstate
operator|&
name|HAS_EXPONENT
operator|)
operator|!=
literal|0
condition|)
block|{
name|readExpDigits
argument_list|(
name|arr
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|nstate
operator|!=
literal|0
condition|)
block|{
name|readFrac
argument_list|(
name|arr
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|ch
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
condition|)
block|{
name|arr
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'.'
condition|)
block|{
name|arr
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|readFrac
argument_list|(
name|arr
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'e'
operator|||
name|ch
operator|==
literal|'E'
condition|)
block|{
name|arr
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|readExp
argument_list|(
name|arr
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
if|if
condition|(
name|ch
operator|!=
operator|-
literal|1
condition|)
name|start
operator|--
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|method|hexval
specifier|private
name|int
name|hexval
parameter_list|(
name|int
name|hexdig
parameter_list|)
block|{
if|if
condition|(
name|hexdig
operator|>=
literal|'0'
operator|&&
name|hexdig
operator|<=
literal|'9'
condition|)
block|{
return|return
name|hexdig
operator|-
literal|'0'
return|;
block|}
elseif|else
if|if
condition|(
name|hexdig
operator|>=
literal|'A'
operator|&&
name|hexdig
operator|<=
literal|'F'
condition|)
block|{
return|return
name|hexdig
operator|+
operator|(
literal|10
operator|-
literal|'A'
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|hexdig
operator|>=
literal|'a'
operator|&&
name|hexdig
operator|<=
literal|'f'
condition|)
block|{
return|return
name|hexdig
operator|+
operator|(
literal|10
operator|-
literal|'a'
operator|)
return|;
block|}
throw|throw
name|err
argument_list|(
literal|"invalid hex digit"
argument_list|)
throw|;
block|}
comment|// backslash has already been read when this is called
DECL|method|readEscapedChar
specifier|private
name|char
name|readEscapedChar
parameter_list|()
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|getChar
argument_list|()
condition|)
block|{
case|case
literal|'"'
case|:
return|return
literal|'"'
return|;
case|case
literal|'\\'
case|:
return|return
literal|'\\'
return|;
case|case
literal|'/'
case|:
return|return
literal|'/'
return|;
case|case
literal|'n'
case|:
return|return
literal|'\n'
return|;
case|case
literal|'r'
case|:
return|return
literal|'\r'
return|;
case|case
literal|'t'
case|:
return|return
literal|'\t'
return|;
case|case
literal|'f'
case|:
return|return
literal|'\f'
return|;
case|case
literal|'b'
case|:
return|return
literal|'\b'
return|;
case|case
literal|'u'
case|:
return|return
call|(
name|char
call|)
argument_list|(
operator|(
name|hexval
argument_list|(
name|getChar
argument_list|()
argument_list|)
operator|<<
literal|12
operator|)
operator||
operator|(
name|hexval
argument_list|(
name|getChar
argument_list|()
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|hexval
argument_list|(
name|getChar
argument_list|()
argument_list|)
operator|<<
literal|4
operator|)
operator||
operator|(
name|hexval
argument_list|(
name|getChar
argument_list|()
argument_list|)
operator|)
argument_list|)
return|;
block|}
throw|throw
name|err
argument_list|(
literal|"Invalid character escape in string"
argument_list|)
throw|;
block|}
comment|// a dummy buffer we can use to point at other buffers
DECL|field|tmp
specifier|private
specifier|final
name|CharArr
name|tmp
init|=
operator|new
name|CharArr
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|method|readStringChars
specifier|private
name|CharArr
name|readStringChars
parameter_list|()
throws|throws
name|IOException
block|{
name|char
name|c
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|buf
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
name|tmp
operator|.
name|set
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// directly use input buffer
name|start
operator|=
name|i
operator|+
literal|1
expr_stmt|;
comment|// advance past last '"'
return|return
name|tmp
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
break|break;
block|}
block|}
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|readStringChars2
argument_list|(
name|out
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
comment|// middle is the pointer to the middle of a buffer to start scanning for a non-string
comment|// character ('"' or "/").  start<=middle<end
comment|// this should be faster for strings with fewer escapes, but probably slower for many escapes.
DECL|method|readStringChars2
specifier|private
name|void
name|readStringChars2
parameter_list|(
name|CharArr
name|arr
parameter_list|,
name|int
name|middle
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|middle
operator|>=
name|end
condition|)
block|{
name|arr
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|middle
operator|-
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
name|middle
expr_stmt|;
name|getMore
argument_list|()
expr_stmt|;
name|middle
operator|=
name|start
expr_stmt|;
block|}
name|int
name|ch
init|=
name|buf
index|[
name|middle
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'"'
condition|)
block|{
name|int
name|len
init|=
name|middle
operator|-
name|start
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
name|arr
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|start
operator|=
name|middle
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|int
name|len
init|=
name|middle
operator|-
name|start
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
name|arr
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|start
operator|=
name|middle
expr_stmt|;
name|arr
operator|.
name|write
argument_list|(
name|readEscapedChar
argument_list|()
argument_list|)
expr_stmt|;
name|middle
operator|=
name|start
expr_stmt|;
block|}
block|}
block|}
comment|/*** alternate implelentation   // middle is the pointer to the middle of a buffer to start scanning for a non-string   // character ('"' or "/").  start<=middle<end   private void readStringChars2a(CharArr arr, int middle) throws IOException {     int ch=0;     for(;;) {       // find the next non-string char       for (; middle<end; middle++) {         ch = buf[middle];         if (ch=='"' || ch=='\\') break;       }        arr.write(buf,start,middle-start);       if (middle>=end) {         getMore();         middle=start;       } else {         start = middle+1;   // set buffer pointer to correct spot         if (ch=='"') {           valstate=0;           return;         } else if (ch=='\\') {           arr.write(readEscapedChar());           if (start>=end) getMore();           middle=start;         }       }     }   }   ***/
comment|// return the next event when parser is in a neutral state (no
comment|// map separators or array element separators to read
DECL|method|next
specifier|private
name|int
name|next
parameter_list|(
name|int
name|ch
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|' '
case|:
case|case
literal|'\t'
case|:
break|break;
case|case
literal|'\r'
case|:
case|case
literal|'\n'
case|:
break|break;
comment|// try and keep track of linecounts?
case|case
literal|'"'
case|:
name|valstate
operator|=
name|STRING
expr_stmt|;
return|return
name|STRING
return|;
case|case
literal|'{'
case|:
name|push
argument_list|()
expr_stmt|;
name|state
operator|=
name|DID_OBJSTART
expr_stmt|;
return|return
name|OBJECT_START
return|;
case|case
literal|'['
case|:
name|push
argument_list|()
expr_stmt|;
name|state
operator|=
name|DID_ARRSTART
expr_stmt|;
return|return
name|ARRAY_START
return|;
case|case
literal|'0'
case|:
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//special case '0'?  If next char isn't '.' val=0
name|ch
operator|=
name|getChar
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'.'
condition|)
block|{
name|start
operator|--
expr_stmt|;
name|ch
operator|=
literal|'0'
expr_stmt|;
name|readNumber
argument_list|(
literal|'0'
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|valstate
return|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|>
literal|'9'
operator|||
name|ch
operator|<
literal|'0'
condition|)
block|{
name|out
operator|.
name|unsafeWrite
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
operator|-
literal|1
condition|)
name|start
operator|--
expr_stmt|;
name|lval
operator|=
literal|0
expr_stmt|;
name|valstate
operator|=
name|LONG
expr_stmt|;
return|return
name|LONG
return|;
block|}
else|else
block|{
throw|throw
name|err
argument_list|(
literal|"Leading zeros not allowed"
argument_list|)
throw|;
block|}
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|lval
operator|=
name|readNumber
argument_list|(
name|ch
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|valstate
return|;
case|case
literal|'-'
case|:
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|out
operator|.
name|unsafeWrite
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|ch
operator|=
name|getChar
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
argument_list|<
literal|'0'
operator|||
name|ch
argument_list|>
literal|'9'
condition|)
throw|throw
name|err
argument_list|(
literal|"expected digit after '-'"
argument_list|)
throw|;
name|lval
operator|=
name|readNumber
argument_list|(
name|ch
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|valstate
return|;
case|case
literal|'t'
case|:
name|valstate
operator|=
name|BOOLEAN
expr_stmt|;
comment|// TODO: test performance of this non-branching inline version.
comment|// if ((('r'-getChar())|('u'-getChar())|('e'-getChar())) != 0) err("");
name|expect
argument_list|(
name|JSONUtil
operator|.
name|TRUE_CHARS
argument_list|)
expr_stmt|;
name|bool
operator|=
literal|true
expr_stmt|;
return|return
name|BOOLEAN
return|;
case|case
literal|'f'
case|:
name|valstate
operator|=
name|BOOLEAN
expr_stmt|;
name|expect
argument_list|(
name|JSONUtil
operator|.
name|FALSE_CHARS
argument_list|)
expr_stmt|;
name|bool
operator|=
literal|false
expr_stmt|;
return|return
name|BOOLEAN
return|;
case|case
literal|'n'
case|:
name|valstate
operator|=
name|NULL
expr_stmt|;
name|expect
argument_list|(
name|JSONUtil
operator|.
name|NULL_CHARS
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|getLevel
argument_list|()
operator|>
literal|0
condition|)
throw|throw
name|err
argument_list|(
literal|"Premature EOF"
argument_list|)
throw|;
return|return
name|EOF
return|;
default|default:
throw|throw
name|err
argument_list|(
literal|null
argument_list|)
throw|;
block|}
name|ch
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"start="
operator|+
name|start
operator|+
literal|",end="
operator|+
name|end
operator|+
literal|",state="
operator|+
name|state
operator|+
literal|"valstate="
operator|+
name|valstate
return|;
block|}
comment|/** Returns the next event encountered in the JSON stream, one of    *<ul>    *<li>{@link #STRING}</li>    *<li>{@link #LONG}</li>    *<li>{@link #NUMBER}</li>    *<li>{@link #BIGNUMBER}</li>    *<li>{@link #BOOLEAN}</li>    *<li>{@link #NULL}</li>    *<li>{@link #OBJECT_START}</li>    *<li>{@link #OBJECT_END}</li>    *<li>{@link #OBJECT_END}</li>    *<li>{@link #ARRAY_START}</li>    *<li>{@link #ARRAY_END}</li>    *<li>{@link #EOF}</li>    *</ul>    */
DECL|method|nextEvent
specifier|public
name|int
name|nextEvent
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|valstate
operator|==
name|STRING
condition|)
block|{
name|readStringChars2
argument_list|(
name|devNull
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|valstate
operator|==
name|BIGNUMBER
condition|)
block|{
name|continueNumber
argument_list|(
name|devNull
argument_list|)
expr_stmt|;
block|}
name|valstate
operator|=
literal|0
expr_stmt|;
name|int
name|ch
decl_stmt|;
comment|// TODO: factor out getCharNWS() to here and check speed
switch|switch
condition|(
name|state
condition|)
block|{
case|case
literal|0
case|:
return|return
name|event
operator|=
name|next
argument_list|(
name|getCharNWS
argument_list|()
argument_list|)
return|;
case|case
name|DID_OBJSTART
case|:
name|ch
operator|=
name|getCharNWS
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'}'
condition|)
block|{
name|pop
argument_list|()
expr_stmt|;
return|return
name|event
operator|=
name|OBJECT_END
return|;
block|}
if|if
condition|(
name|ch
operator|!=
literal|'"'
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected string"
argument_list|)
throw|;
block|}
name|state
operator|=
name|DID_MEMNAME
expr_stmt|;
name|valstate
operator|=
name|STRING
expr_stmt|;
return|return
name|event
operator|=
name|STRING
return|;
case|case
name|DID_MEMNAME
case|:
name|ch
operator|=
name|getCharNWS
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|':'
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected key,value separator ':'"
argument_list|)
throw|;
block|}
name|state
operator|=
name|DID_MEMVAL
expr_stmt|;
comment|// set state first because it might be pushed...
return|return
name|event
operator|=
name|next
argument_list|(
name|getChar
argument_list|()
argument_list|)
return|;
case|case
name|DID_MEMVAL
case|:
name|ch
operator|=
name|getCharNWS
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'}'
condition|)
block|{
name|pop
argument_list|()
expr_stmt|;
return|return
name|event
operator|=
name|OBJECT_END
return|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|!=
literal|','
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected ',' or '}'"
argument_list|)
throw|;
block|}
name|ch
operator|=
name|getCharNWS
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'"'
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected string"
argument_list|)
throw|;
block|}
name|state
operator|=
name|DID_MEMNAME
expr_stmt|;
name|valstate
operator|=
name|STRING
expr_stmt|;
return|return
name|event
operator|=
name|STRING
return|;
case|case
name|DID_ARRSTART
case|:
name|ch
operator|=
name|getCharNWS
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|']'
condition|)
block|{
name|pop
argument_list|()
expr_stmt|;
return|return
name|event
operator|=
name|ARRAY_END
return|;
block|}
name|state
operator|=
name|DID_ARRELEM
expr_stmt|;
comment|// set state first, might be pushed...
return|return
name|event
operator|=
name|next
argument_list|(
name|ch
argument_list|)
return|;
case|case
name|DID_ARRELEM
case|:
name|ch
operator|=
name|getCharNWS
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|']'
condition|)
block|{
name|pop
argument_list|()
expr_stmt|;
return|return
name|event
operator|=
name|ARRAY_END
return|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|!=
literal|','
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected ',' or ']'"
argument_list|)
throw|;
block|}
comment|// state = DID_ARRELEM;
return|return
name|event
operator|=
name|next
argument_list|(
name|getChar
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|lastEvent
specifier|public
name|int
name|lastEvent
parameter_list|()
block|{
return|return
name|event
return|;
block|}
DECL|method|wasKey
specifier|public
name|boolean
name|wasKey
parameter_list|()
block|{
return|return
name|state
operator|==
name|DID_MEMNAME
return|;
block|}
DECL|method|goTo
specifier|private
name|void
name|goTo
parameter_list|(
name|int
name|what
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valstate
operator|==
name|what
condition|)
block|{
name|valstate
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|valstate
operator|==
literal|0
condition|)
block|{
name|int
name|ev
init|=
name|nextEvent
argument_list|()
decl_stmt|;
comment|// TODO
if|if
condition|(
name|valstate
operator|!=
name|what
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"type mismatch"
argument_list|)
throw|;
block|}
name|valstate
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|err
argument_list|(
literal|"type mismatch"
argument_list|)
throw|;
block|}
block|}
comment|/** Returns the JSON string value, decoding any escaped characters. */
DECL|method|getString
specifier|public
name|String
name|getString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getStringChars
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Returns the characters of a JSON string value, decoding any escaped characters.    *<p/>The underlying buffer of the returned<code>CharArr</code> should *not* be    * modified as it may be shared with the input buffer.    *<p/>The returned<code>CharArr</code> will only be valid up until    * the next JSONParser method is called.  Any required data should be    * read before that point.    */
DECL|method|getStringChars
specifier|public
name|CharArr
name|getStringChars
parameter_list|()
throws|throws
name|IOException
block|{
name|goTo
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
return|return
name|readStringChars
argument_list|()
return|;
block|}
comment|/** Reads a JSON string into the output, decoding any escaped characters. */
DECL|method|getString
specifier|public
name|void
name|getString
parameter_list|(
name|CharArr
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|goTo
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|readStringChars2
argument_list|(
name|output
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
comment|/** Reads a number from the input stream and parses it as a long, only if    * the value will in fact fit into a signed 64 bit integer. */
DECL|method|getLong
specifier|public
name|long
name|getLong
parameter_list|()
throws|throws
name|IOException
block|{
name|goTo
argument_list|(
name|LONG
argument_list|)
expr_stmt|;
return|return
name|lval
return|;
block|}
comment|/** Reads a number from the input stream and parses it as a double */
DECL|method|getDouble
specifier|public
name|double
name|getDouble
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|getNumberChars
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the characters of a JSON numeric value.    *<p/>The underlying buffer of the returned<code>CharArr</code> should *not* be    * modified as it may be shared with the input buffer.    *<p/>The returned<code>CharArr</code> will only be valid up until    * the next JSONParser method is called.  Any required data should be    * read before that point.    */
DECL|method|getNumberChars
specifier|public
name|CharArr
name|getNumberChars
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ev
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|valstate
operator|==
literal|0
condition|)
name|ev
operator|=
name|nextEvent
argument_list|()
expr_stmt|;
if|if
condition|(
name|valstate
operator|==
name|LONG
operator|||
name|valstate
operator|==
name|NUMBER
condition|)
block|{
name|valstate
operator|=
literal|0
expr_stmt|;
return|return
name|out
return|;
block|}
elseif|else
if|if
condition|(
name|valstate
operator|==
name|BIGNUMBER
condition|)
block|{
name|continueNumber
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|valstate
operator|=
literal|0
expr_stmt|;
return|return
name|out
return|;
block|}
else|else
block|{
throw|throw
name|err
argument_list|(
literal|"Unexpected "
operator|+
name|ev
argument_list|)
throw|;
block|}
block|}
comment|/** Reads a JSON numeric value into the output. */
DECL|method|getNumberChars
specifier|public
name|void
name|getNumberChars
parameter_list|(
name|CharArr
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ev
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|valstate
operator|==
literal|0
condition|)
name|ev
operator|=
name|nextEvent
argument_list|()
expr_stmt|;
if|if
condition|(
name|valstate
operator|==
name|LONG
operator|||
name|valstate
operator|==
name|NUMBER
condition|)
name|output
operator|.
name|write
argument_list|(
name|this
operator|.
name|out
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|valstate
operator|==
name|BIGNUMBER
condition|)
block|{
name|continueNumber
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|err
argument_list|(
literal|"Unexpected "
operator|+
name|ev
argument_list|)
throw|;
block|}
name|valstate
operator|=
literal|0
expr_stmt|;
block|}
comment|/** Reads a boolean value */
DECL|method|getBoolean
specifier|public
name|boolean
name|getBoolean
parameter_list|()
throws|throws
name|IOException
block|{
name|goTo
argument_list|(
name|BOOLEAN
argument_list|)
expr_stmt|;
return|return
name|bool
return|;
block|}
comment|/** Reads a null value */
DECL|method|getNull
specifier|public
name|void
name|getNull
parameter_list|()
throws|throws
name|IOException
block|{
name|goTo
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the current nesting level, the number of parent objects or arrays.    */
DECL|method|getLevel
specifier|public
name|int
name|getLevel
parameter_list|()
block|{
return|return
name|ptr
return|;
block|}
DECL|method|getPosition
specifier|public
name|long
name|getPosition
parameter_list|()
block|{
return|return
name|gpos
operator|+
name|start
return|;
block|}
block|}
end_class
end_unit
